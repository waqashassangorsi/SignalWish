/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_Error
{
	public static $URL_PARAM = "code";
	
	public static $GENERAL = 100010;
	public static $ACCESS_DENIED = 100020;
	public static $LOGIN_REQUIRED = 100021;
	public static $ACCOUNT_CANCELED = 100030;
	public static $ACCOUNT_LOCKED = 100031;
	public static $ACCOUNT_PAUSED = 100032;
	public static $ACCOUNT_OVERDUE = 100033;
	public static $ACCOUNT_EXPIRED = 100034;
	
	public static function getMessage($errorCode=0)
	{
		if(isset($_REQUEST[MM_Session::$PARAM_MESSAGE_KEY]))
		{
			return htmlspecialchars(stripslashes(urldecode($_REQUEST[MM_Session::$PARAM_MESSAGE_KEY])), ENT_QUOTES, 'UTF-8');
		}
		
		if(isset($_REQUEST[self::$URL_PARAM]))
		{
			$errorCode = $_REQUEST[self::$URL_PARAM];
		}
				
		switch(intval($errorCode))
		{
			case self::$GENERAL:
			case self::$ACCESS_DENIED:
				return "You don't have access to view this page";
				
			case self::$LOGIN_REQUIRED:
				return "You must login in order to access this page";
				
			case self::$ACCOUNT_CANCELED:
			case self::$ACCOUNT_PAUSED:
				return "Your account has been canceled";
				
			case self::$ACCOUNT_LOCKED:
				return "Your account has been locked";
			
			case self::$ACCOUNT_OVERDUE:
				return "Your account is overdue and must be brought up to date before you can access protected content";
				
			case self::$ACCOUNT_EXPIRED:
				return "Your account has expired";
				
			default:
				return "An error has occurred";
		}
	}
}
