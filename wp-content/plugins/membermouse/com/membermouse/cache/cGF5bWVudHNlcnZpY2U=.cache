/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_PaymentService is the abstract class defining the interface for all MemberMouse payment services. A settings mechanism is used to automatically 
 * capture and persist the service-specific settings created in any future subclasses.
 * 
 * The settings mechanism works as follows: there is no way to know in advance what specific data a future payment service
 * might need to store, therefore one field in the database is used to store a serialized array which can contain any specific
 * options needed. For instance, say payment service "foo" requires a username and password, which are atributes of that subclass.
 * In the subclass, the prepareSettings method would need to be overwritten to create an array containg the key/value pairs for the username
 * and password, and then return the serialized state of this array. The default commitData already calls prepareSettings to get the value of the
 * settings db field, and getData already knows to deserialize the array and populate local attributes with the array contents, so nothing further
 * would need to be done. 
 * 
 * Note: The implementation of prepareSettings in the base class will already detect and serialize subclass attributes that are visible to the base class,
 * ie. in the above if example, if username and password were scoped as protected, nothing extra would need to be done in the subclass. If they were scoped as private
 * then the subclass prepareSettings would need to be overridden to properly account for this 
 */
abstract class MM_PaymentService extends MM_Entity
{
	public static $PAYPAL_SERVICE_TOKEN = "PAYPAL";
	public static $CLICKBANK_SERVICE_TOKEN = "CLICKBANK";
	public static $AUTHORIZENET_SERVICE_TOKEN = "AUTHORIZENET";
	public static $AUTHORIZENET_CIM_SERVICE_TOKEN = "AUTHORIZENETCIM";
	public static $CHARGIFY_SERVICE_TOKEN = "CHARGIFY"; 
	public static $COINBASE_SERVICE_TOKEN = "COINBASE";
	public static $COINBASE_MINIMAL_SERVICE_TOKEN = "COINBASEMINIMAL";
	public static $STRIPE_SERVICE_TOKEN = "STRIPE";
	public static $BRAINTREE_SERVICE_TOKEN = "BRAINTREE";
	public static $LIMELIGHT_SERVICE_TOKEN = "LIMELIGHT";
	public static $STICKYIO_SERVICE_TOKEN = "STICKYIO";
	public static $LITLE_SERVICE_TOKEN = "LITLE";
	public static $TWOCHECKOUT_SERVICE_TOKEN = "TWOCHECKOUT";
	public static $TEST_SERVICE_TOKEN = "TEST";
	
	protected $name;
	protected $active = false;
	protected $token = "";
	
	protected $supportedCurrencies = array("USD");
	
	protected $exclusions = array(); //fields that should not be serialized/stored. Implement in subclasses
	
	public function loadDependencies() { }
	
	public function getNextBillingDate(MM_OrderItem $orderItem) { return false; }
  
	public function install() { require_once(ABSPATH.'wp-admin/includes/upgrade.php'); }
	
	public function displayConfigOptions() {}
	
	public function processConfigOptions($data) { return new MM_Response(); }
	
	public function isOnsite() { return $this->supportsFeature(MM_PaymentServiceFeatures::ONSITE_SERVICE); }
	
	protected function getTemplateDir() { return MM_PLUGIN_ABSPATH."/templates/payment"; }
	
	public function supportsFeature($featureConst) { return false; }
	
	public function intermediateConfigAction() {}
	
	public function cancelSubscription(MM_OrderItem $orderItem) {}
 
	public function forceCancelSubscription(MM_OrderItem $orderItem) { return $this->cancelSubscription($orderItem); }
	
	public function getTransactionPageActions($transactionId) { return ""; }
	
	/**
	 * processNotification allows payment services to respond to notifications, ie PayPal's IPN mechanism, or Authorize.net's Silent Post
	 * The function receives the $_POST superglobal as a parameter, but as the method is meant to be called in the scope of the 
	 * script that is receiving the notification, $_GET, $_POST, $_COOKIE, and $_REQUEST should all be available (although only the 
	 * first two should ever be relevent). 
	 * 
	 * @param array $request The $_POST superglobal if it exists, a blank array if not
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) {}
	
	
	/**
	 * Refunds a transaction
	 *
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public abstract function refundTransaction($transactionId);
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		if (($validate) && (!$order->isValid()))
		{
			return new MM_PaymentServiceResponse("Order is not valid",MM_PaymentServiceResponse::$ERROR);
		}
		
		$order->preprocessOrder();
		
		return new MM_PaymentServiceResponse();
	}  
	
	
	//TODO: REFACTOR: make the appropriate methods abstract, and modify them to conform to the contract(s)
	/**
	 * Update the credit card and billing address for a subscription
	 * 
	 * @param MM_OrderItem $orderItem The order item linked to the subscription
	 * @param MM_CardInfo $cardInfo The new credit card information
	 * @param MM_CustomerAddress $billingAddress The billing address associated with the new card
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		//here in the base class, all we do is update the address on the order
		$order = new MM_Order($orderItem->getOrderId());
		if (!$order->isValid() || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error updating MemberMouse order billing address",MM_PaymentServiceResponse::$ERROR);
		}
		
		$order->setBillingAddress($billingAddress);
		$response = $order->commitData();
		if (MM_Response::isError($response))
		{
			return new MM_PaymentServiceResponse($response->message,MM_PaymentServiceResponse::$ERROR);
		}
		return new MM_PaymentServiceResponse();		
	}
	
	
	/**
	 * Performs any handling related to a rebill failure/entering overdue status
	 * 
	 * @param MM_OrderItem $orderItem The overdue item
	 * @param MM_User $customer (optional) If the caller has a reference to the customer associated with the item, it will be used versus doing another lookup in the db
	 * 
	 * @return MM_Response indicating success or failure of the operations
	 */
	public function handleOverdueSubscriptionItem(MM_OrderItem $orderItem, MM_User $customer=null)
	{
		if (is_null($customer))
		{
			$orderId = $orderItem->getOrderId();
			$customer = new MM_User(MM_Order::getUserIdByOrderId($orderId));
		}
		
		if (!$orderItem->isValid() || !$customer->isValid())
		{
			return new MM_Response("Invalid parameters were passed to handleOverdueSubscriptionItem",MM_Response::$ERROR);
		}
		
		//dispatch the push notification
		do_action(MM_Event::$PAYMENT_REBILL_DECLINED, MM_Event::packageOrderData($customer->getId(), $orderItem->getOrderId(), $orderItem->getId(), true));
		
		return new MM_Response();
	}	
	
	
	public function __construct($autoload=true,$configData="")
	{
		if($autoload)
		{
			$this->loadDependencies();
		}
		
		if ($configData == "")
		{
			$this->getData();
		}
		else
		{
			$this->setData($configData);
		}
	}
	
	/**
	 * getData retrieves the payment service information from the database by token, and then calls setData to populate the entity
	 * @see MM_Entity::getData()
	 */
	public function getData()
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_PAYMENT_SERVICES." WHERE token='".$this->token."'";
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * setData populates the entity using an object with names fields containing the data to use
	 * @see MM_Entity::setData()
	 */
	public function setData($data)
	{
		try
		{
			$this->id = $data->id;
			$this->name = $data->name;
			$this->active = $data->active;
			
			if (($data->settings != null) && ($data->settings !=""))
			{
				$unserialized_settings = unserialize($data->settings);
				if (is_array($unserialized_settings))
				{
					foreach ($unserialized_settings as $k=>$v)
					{
						if (isset($this->$k))
						{
							$this->$k = $v; //don't create attributes, only restore existing ones
						}
					}
				}
			}
			
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * commitData persists the state and settings of the PaymentService into the database. The prepareSettings method is used to gather all the service 
	 * specific settings and serialize them into for storage into a settings field in the backing table, allowing this generic commitData to be used for all future subclasses
	 * @see MM_Entity::commitData()
	 */
	public function commitData()
	{
		global $wpdb;
	
		$doUpdate = ($this->id>0);
		$operation = ($doUpdate)?"update":"create"; //used in error messages
		
		if (!$doUpdate)
		{
			//there can only be one row with each token, check if it exists first
			$checkSql = "select id from ".MM_TABLE_PAYMENT_SERVICES." where token='{$this->token}'";
			$res = $wpdb->get_results($checkSql);
			if ($res)
			{
				//if it does, this is an update. set the id for good measure
				$doUpdate = true;
				$row = $res[0];
				$this->id = $row->id;
			}
		}
	
		MM_Transaction::begin();
		try
		{
			$setClause = "SET token='{$this->token}', name='%s',settings='%s',active='%d'";
			
			if (!$doUpdate)
			{
				$sql = "INSERT into ".MM_TABLE_PAYMENT_SERVICES." {$setClause}";
			}
			else
			{
				$sql = "UPDATE ".MM_TABLE_PAYMENT_SERVICES." {$setClause} where token='{$this->token}'";
			}
			
			$preparedSql = $wpdb->prepare($sql, $this->name, $this->prepareSettings(), ($this->active)?1:0);
			$result = $wpdb->query($preparedSql);
	
			if($result === false)
			{
				MM_Transaction::rollback();
				return new MM_Response("ERROR: unable to {$operation} payment service (".$preparedSql.")", MM_Response::$ERROR);
			}
		}
		catch(Exception $ex)
		{
			MM_Transaction::rollback();
			return new MM_Response("ERROR: unable to {$operation} payment service", MM_Response::$ERROR);
		}
	
		MM_Transaction::commit();
		return new MM_Response();
	}
	
	/**
	 * return the value of the name attribute
	 * @return string the value of the name attribute
	 */
	public function getName()
	{
		return $this->name;
	}
	
	/**
	 * set the value of the name attribute
	 * @param string $name The new name
	 */
	public function setName($name)
	{
		$this->name = $name;
	}
	
	/**
	 * return the value of the token
	 * @return string the value of the token 
	 */
	public function getToken()
	{
		return $this->token;
	}
	
	/**
	 * Each implementation of the PaymentService class can have specific settings. These settings are stored as attributes on the object. Prior to commit, 
	 * prepareSettings creates an array using these attributes and then serializes that array and stores it in $this->settings, so that the settings are persisted
	 * when commitData is called
	 */
	protected function prepareSettings() 
	{
		$finalExclusions = array_merge($this->exclusions,array('id','name','token','settings','active','supportedCurrencies','notifyServices','exclusions'));
		$settings = array();
		foreach ($this as $key=>$value)
		{
			if (!in_array($key,$finalExclusions) && (strpos($key,"transient_") !== 0))
			{
				$settings[$key] = $value;
			}
		}
		return serialize($settings);
	}
	
	/**
	 * Sets the active attribute
	 * @param boolean $active The new state of the active attribute
	 */
	public function setActive($active)
	{
		$this->active = (bool)$active;
	}
	
	/**
	 * Returns the value of the active attribute
	 * @return boolean value of the state of the active attribute
	 */
	public function getActive()
	{
		return $this->active;
	}
	
	/**
	 * Alias to getActive. For readability
	 * @see MM_PaymentService::getActive
	 * 
	 * @return boolean value of the state of the active attribute
	 */
	public function isActive()
	{
		return $this->getActive();
	}
	
	
	/**
	 * displayPaymentForm returns the html for the form to present to the user to gather payment information. 
	 * This version (in the abstract base class for all payment services) returns a printout of billing address,
	 * shipping method and shipping address, and order total in the form of a string containing html table rows
	 * 
	 * @param MM_Order $order The order to show payment options for
	 */
	public function displayPaymentForm(MM_Order $order)
	{
		return "";
	}
	
	
	/**
	 * validateOrder can be used by an offsite payment service to validate an order prior to sending it off to be processed
	 *
	 * @param MM_PaymentServiceResponse $response a payment service response with success or error status
	 */
	public function validateOrder(MM_Order $order)
	{
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Makes an HTTP connection to a remote URL and returns the response
	 * 
	 * @param String $remoteUrl The remote URL to connect to
	 * @param String $method The type of connection to make. Only POST or GET http verbs currently supported, value is POST by default
	 * @param array/String $data (optional) An array of key/value pairs, or a string, to POST to the remote URL when the connectionMethod is set to POST. If this parameter is an array, it is converted to a string suitable for POSTing and url encoded
	 * @param array $options (optional) An array of curloptions to pass directly to the underlying curl implementation
	 * 
	 * @return MM_Response Wrapper around the remote response, with the raw response in the MM_Response message on success, and a descriptive error message in the response message otherwise.
	 */
	protected function doHTTPRequest($remoteUrl, $method="POST", $data="", $options=array())
	{
		$post_string = "";
		if (is_array($data))
		{
			foreach( $data as $key => $value )
			{
				$post_string .= "$key=" . urlencode( $value ) . "&";
			}
			$post_string = rtrim( $post_string, "& " );
		}
		else
		{
			$post_string = $data;
		}
		$request = curl_init($remoteUrl); // initiate curl object
		
		$defaultOptions = array(CURLOPT_HEADER=>FALSE,
								CURLOPT_RETURNTRANSFER=>1,
								CURLOPT_SSL_VERIFYPEER=>0
								);
		$options += $defaultOptions; //merge in the defaults, but don't override explicitly set options
		
		$method = strtoupper($method);
		if($method == 'POST')
		{
			$postOptions = array(CURLOPT_CUSTOMREQUEST  => "POST",
					CURLOPT_POSTFIELDS     => $post_string);
			//TODO: PHP 5.2 workaround - remove once support is dropped
			if (version_compare(PHP_VERSION, '5.3.2') >= 0)
			{
				$postOptions[CURLOPT_POSTREDIR] = 7;
			}
			if (!ini_get('open_basedir'))
			{
				$postOptions[CURLOPT_FOLLOWLOCATION] = true;
			}
			foreach ($postOptions as $curlOption=>$curlOptionValue)
			{
				if (!isset($options[$curlOption]))
				{
					$options[$curlOption] = $curlOptionValue;
				}
			}
		}
		else if ($method == 'PUT')
		{
			if (!isset($options[CURLOPT_CUSTOMREQUEST]))
			{
				$options[CURLOPT_CUSTOMREQUEST] = "PUT";
			}
			
			if (!isset($options[CURLOPT_POSTFIELDS]))
			{
				$options[CURLOPT_POSTFIELDS] = $post_string;
			}
		}
		else if ($method != 'GET')
		{
			if (!isset($options[CURLOPT_CUSTOMREQUEST]))
			{
				$options[CURLOPT_CUSTOMREQUEST] = $post_string;
			}
		}
		
		curl_setopt_array($request, $options);	
		
		$raw_response = curl_exec($request); // execute curl post and store results in $raw_response
		
		$curl_error = curl_error($request);
		
		$responseObj = new MM_Response();
		$responseObj->addData("http_code",curl_getinfo($request,CURLINFO_HTTP_CODE));
		
		curl_close($request); // close curl object		
		
		if ($curl_error == "")
		{
			$responseObj->message = $raw_response;
			return $responseObj;
		}
		else
		{
			$responseObj->message = $curl_error;
			return $responseObj;
		}
	}
	
	
	/**
	 * Get a service-specific purchase link for the supplied product
	 */
	public function getPurchaseLink($productId) { return null; }
	
	
	public function isSupportedCurrency($currencyCode) { return in_array(strtoupper($currencyCode), $this->supportedCurrencies); }
  
	/**
	 * Allow payment services to execute code in response to the wordpress init hook
	 */
	public function doInitHook() { }
	
	public static function performInitActions()
	{
	    global $wpdb;
	    
	    //temporary patch for 2.2.9-101
	    
	    //TODO: remove in 2.3.0 or greater
	    $ccpUpdated = MM_OptionUtils::getOption("mm-229101-ccp-update");
	    if ($ccpUpdated != "UPDATED")
	    {
	        MM_OptionUtils::setOption("mm-229101-ccp-update","UPDATED");
	        $corepageTable = MM_TABLE_CORE_PAGES;
	        $lockAcquired = $wpdb->get_var("SELECT COALESCE(GET_LOCK('{$wpdb->dbname}_229101_ccp_update',10),0)");
	        if ($lockAcquired == 1)
	        {
	            $wpdb->query("ALTER TABLE {$corepageTable} MODIFY COLUMN ref_type ENUM('member_type','error_type','access_tag','product','custom') NULL DEFAULT NULL");
	            $sql = "INSERT INTO {$corepageTable} (page_id,core_page_type_id,ref_type) SELECT p.ID,6,'custom' FROM {$wpdb->posts} p ".
    	               "LEFT JOIN {$corepageTable} cp ON (p.ID = cp.page_id) WHERE cp.page_id IS NULL AND p.post_status='publish' ".
    	               "AND (p.post_content REGEXP '\\\[mm_form[^\\]]*type=.?checkout.?')";
    	        $wpdb->query($sql);
    	        $wpdb->query("SELECT RELEASE_LOCK('{$wpdb->dbname}_229101_ccp_update')");
	        }
	    }
	    
	    //TODO: remove in 2.3.0 after completion of ticket 1672
	    add_action("template_redirect", function() {
	        $pageId = get_the_ID();
	        if (MM_CorePage::isCustomCheckoutPage($pageId))
	        {
	            $onsiteService = MM_PaymentServiceFactory::getOnsitePaymentService();
	            if ($onsiteService != null)
	            {
	                $onsiteService->checkoutInit();
	            }
	            if (!headers_sent())
	            {
	                //send headers to discourage caching (especially bfcache) to force checkout page to be regenerated every page hit
	                //this should also ensure the generation of a fresh form submission id
	                nocache_headers();
	            }
	        }
	    });
	    
	    //TODO: in 2.3.0 move this to the publish_page handler in MM_PostHooks
	        add_action('publish_page',function($ID, $post) {
	             global $wpdb; 
	             
	             if (MM_CorePage::isCustomCheckoutPage($ID))
	             {
    	             //non-default checkout page means a custom checkout page, make sure the form is still present
    	             $hasCustomCheckoutForm = preg_match("/\[\s*mm_form\s+[\]]*(type=['\"]checkout['\"])([^\]]*)]/i",$post->post_content);
    	             if (!$hasCustomCheckoutForm)
    	             {
    	               //this page is flagged as a custom checkout page, but the form was removed, so remove the core page indicator
    	               $sql = $wpdb->prepare("DELETE FROM ".MM_TABLE_CORE_PAGES." WHERE page_id=%s and core_page_type_id=%s and ref_type='custom'",$ID,MM_CorePageType::$CHECKOUT);
	                   $wpdb->query($sql);
    	             }
	             }
	             else
	             {
    	             //only run the next section if the page is a custom checkout page that is NOT marked as a checkout core page (but should be)
    	             $hasCustomCheckoutForm = preg_match("/\[\s*mm_form\s+[\]]*(type=['\"]checkout['\"])([^\]]*)]/i",$post->post_content);
    	             if ($hasCustomCheckoutForm)
    	             {
        	             $wpdb->query($wpdb->prepare("DELETE FROM ".MM_TABLE_CORE_PAGES." WHERE page_id=%s and core_page_type_id=%s and ref_type='custom'",$ID,MM_CorePageType::$CHECKOUT)); //to avoid duplicate entries
        	             $wpdb->insert(MM_TABLE_CORE_PAGES,array("page_id"=>$ID, "core_page_type_id"=>MM_CorePageType::$CHECKOUT,"ref_type"=>'custom'));
        	             
        	             //since this means the page is a custom checkout page, we have to do the same scan for the captcha as well
        	             $hasCaptcha = preg_match("/\[\s*mm_form_field\s+(.*)(type=['\"]input['\"]){0,1}(name=['\"]captcha['\"])(.*)(type=['\"]input['\"]){0,1}(.*)\]/i",$post->post_content)?1:0;
        	             MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ENABLED,$hasCaptcha);
    	             }
	             }
	        },10,2);
	    
	    
		if (class_exists("MM_PaymentServiceFactory"))
		{
			$activePaymentServices = MM_PaymentServiceFactory::getAvailablePaymentServices();
			foreach ($activePaymentServices as $activePaymentService)
			{
				$activePaymentService->doInitHook();
			}
		}
	}
	
	
	/**
	 * Determines if an order item with a limited number of rebills has finished recurring, and sets the status appropriately if it has
	 * @param MM_OrderItem $orderItem The order item to check
	 */
	public function checkPaymentPlanCompletion(MM_OrderItem $orderItem)
	{
		global $wpdb;
		if ($orderItem->getMaxRebills() > 0)
		{
			$sql = "SELECT count(*) AS num_rebills FROM ".MM_TABLE_TRANSACTION_LOG. " WHERE order_item_id=%s AND ".
					"transaction_type=%s";
			$sql = $wpdb->prepare($sql,$orderItem->getId(),MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT);
			$numRebills = intval($wpdb->get_var($sql));
			if ($numRebills >= $orderItem->getMaxRebills())
			{
				$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_COMPLETE);
				$orderItem->commitData();
			}
		}
	}
	
	
	/**
	 * Called from checkout page to allow payment services to load specialized libraries and javascript and perform any pre-order tasks
	 * Ex. Loading libraries to hook into submission to do token-exchange for payment info
	 */
	public function checkoutInit()
	{
		//interface method, meant to be extended by subclasses
	}
	
	
	/**
	 * Called from "my account" page to allow payment services to load specialized libraries and javascript and perform any tasks necessary for billing administration
	 * Ex. Loading libraries to do token-exchange for when the customer updates payment info
	 */
	public function myAccountInit()
	{
		//interface method, meant to be extended by subclasses
	}
	
	
	/**
	 * Returns boolean indicating whether this payment service is in test mode or not
	 *
	 * @return bool
	 */
	public function inTestMode()
	{
		return false;
	}
	
	
	/**
	 * Changes the configuration of this payment service to use the test mode settings, if available.
	 * If the configuration was able to be successfully changed to be a test mode configuration, true is returned, otherwise false
	 *
	 *  @return bool
	 */
	public function switchToTestMode()
	{
		return false;
	}
	
	
	/**
	 * Tests if a service supports token exchange and if it is enabled. Services that support token exchange should override this method
	 * 
	 * @return bool
	 */
	public function tokenExchangeEnabled()
	{
	    return false;
	}
	
	
	/**
	 * Returns true if the current service in its configured state has payment fields that are hosted remotely via iframes
	 */
	public function hasHostedPaymentFields()
	{
	    return false;
	}
	
	
	/**
	 * If the service uses hosted payment fields, this method allows the service to override the smarttag output for any field 
	 * on the checkout and myaccount forms 
	 * 
	 * @param string $formType current valid values are 'checkout' and 'myaccount'
	 * @param string $fieldName The MM_Form_Field name 
	 * 
	 * @return string|boolean If the service overrides the specified field, a string is returned, otherwise the return value is boolean false
	 */
	public function formFieldOverride($formType,$fieldName)
	{
	    return false;
	}
	
}