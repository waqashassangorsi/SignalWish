/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_LoginToken extends MM_Entity
{	
	private $loginToken="";
	private $userId="";
	private $age="";
	
	/**
	 * getData()
	 * Retrieve a login token entity from the db. 
	 * Requires that the token or the id be set on the object 
	 */
	public function getData() 
	{
		global $wpdb;
		
		if (!empty($this->loginToken)) 
		{
			$sql = "SELECT * FROM ".MM_TABLE_LOGIN_TOKEN." WHERE login_token='".$this->loginToken."';";
		}
		else 
		{
			$sql = "SELECT * FROM ".MM_TABLE_LOGIN_TOKEN." WHERE id='".$this->id."';";
		}
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * 
	 * Sets the entity fields based on the content of $data
	 * @param object $data
	 */
	public function setData($data)
	{
		try 
		{
			$this->id = $data->id;
			$this->loginToken = $data->login_token;
			$this->userId = $data->user_id;
			$this->age = $data->age;
						
			parent::validate();
		}
		catch (Exception $ex) {
			parent::invalidate();
		}
	}
	
	
	/**
	 * Commits the values stored in the entity to the db
	 */
	public function commitData()
	{
		global $wpdb;
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		
		MM_Transaction::begin();
		try
		{	
			
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_LOGIN_TOKEN." set " .
			 			"	login_token = '%s'," .
			 			"	user_id='%s'," .
			 			"	order_id='%s'," .
			 			"	age=NOW()".
			 			"";
			}
		 	else 
		 	{
				$sql = "update ".MM_TABLE_LOGIN_TOKEN." set " .
			 			"	login_token = '%s'," .
			 			"	user_id='%s'," .
			 			"	age=NOW() where id = '{$this->id}'".
			 			"";
		 	}
			
		 	$preparedSql = $wpdb->prepare($sql, $this->loginToken, $this->userId);
		 	$result = $wpdb->query($preparedSql);
		 	
		 	if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("ERROR: unable to create login token (".$preparedSql.")", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) {
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{	
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create login token", MM_Response::$ERROR);
		}
		
		MM_Transaction::commit();
	
		return new MM_Response();
	}
	
	/**
	 * Deletes the row having an id matching that stored in the entity
	 */
	public function delete()
	{	
		global $wpdb;
		
		$sql = "DELETE FROM ".MM_TABLE_LOGIN_TOKEN." WHERE id='%d' LIMIT 1";
		$results = $wpdb->query($wpdb->prepare($sql, $this->id));
		
		if($results) {
			return true;
		}	
		
		return false;
	}
	
	/**
	 * Deletes all login tokens older than the number of days specified in the login token lifespan configuration
	 * @return boolean true if operation successful, false otherwise
	 */
	public static function deleteAged()
	{
		global $wpdb;
	
		$sql = "DELETE FROM ".MM_TABLE_LOGIN_TOKEN." WHERE age < (now() - INTERVAL ".MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_LOGIN_TOKEN_LIFESPAN)." DAY)";
		$results = $wpdb->query($sql);
	
		if($results) {
			return true;
		}
	
		return false;
	}
	
	/**
	 * Generates a new random 32 alphanumeric string and associates it with a user id and order id
	 * @param integer $userId 
	 * @return MM_Response A response that contains the generated key in the message on success, and an error response on error
	 */
	public static function generateToken($userId)
	{
		global $wpdb; 
		
		MM_LoginToken::deleteAged();
		
		if (empty($userId))
		{
			return new MM_Response("User ID must be set when generating a login token", MM_Response::$ERROR);
		}
		
		$recentLoginToken = self::getRecentLoginTokenByUser($userId);
		
		if(!empty($recentLoginToken))
		{
			return new MM_Response($recentLoginToken, MM_Response::$SUCCESS);	
		}
		
		do {
			//generate the key
			$newKey = "";
			for ($i=0; $i<32; $i++) //create random 32 char string
			{
				$type = rand(1,3);
				switch ($type) {
					case 1: //numeric
						$newKey.=chr(rand(48,57));
						break;
					case 2: //upper alpha
						$newKey.=chr(rand(65,90));
						break;
					case 3: //lower alpha
					default:
						$newKey.=chr(rand(97, 122));
						break;
				}
			}
			
			$results = $wpdb->get_results($wpdb->prepare("select * from ".MM_TABLE_LOGIN_TOKEN." where login_token='%s'",$newKey));
		} while (count($results) > 0); //iterate while key is not unique.
		
		//should be safe
		$results = $wpdb->query($wpdb->prepare("insert into ".MM_TABLE_LOGIN_TOKEN." set login_token='%s', user_id='%d', age=now()",$newKey,$userId));
		if($results === false)
		{
			return new MM_Response("Error creating login token",MM_Response::$ERROR);
		}
		else 
		{
			return new MM_Response($newKey,MM_Response::$SUCCESS);	
		}
	}
	
	/**
	 * Lookup a login token by key. If founds stores the user id in the session
	 * @param String $loginToken 
	 * @return MM_LoginToken The login token object with user id info populated on success, an invalid object on failure
	 */
	public static function getLoginTokenByToken($loginToken)
	{
		MM_LoginToken::deleteAged();
		$key = new MM_LoginToken();
		$key->setLoginToken($loginToken);
		$key->getData();
		if ($key->isValid())
		{
			MM_Session::value(MM_Session::$KEY_LAST_USER_ID, $key->getUserId());
		}
		return $key;
	} 
	
	public static function getRecentLoginTokenByUser($userId)
	{
		global $wpdb;
		
		$sql = "SELECT login_token FROM ".MM_TABLE_LOGIN_TOKEN." WHERE age > (now() - INTERVAL 24 HOUR) AND user_id = {$userId} LIMIT 1;";
		$row = $wpdb->get_row($sql);
		
		if($row && isset($row->login_token)) 
		{
			return $row->login_token;
		}
		return "";
	}
	
	/**
	 * Set the login token
	 * @param string $loginToken
	 */
	public function setLoginToken($loginToken)
	{
		$this->loginToken = $loginToken;
	}
	
	/**
	 * 
	 * Retrieve the login token
	 * @return string the login token
	 */
	public function getLoginToken()
	{
		return $this->loginToken;
	}
	
	/**
	 * Set the user id
	 * @param string $user id
	 */
	public function setUserId($userId)
	{
		$this->userId = $userId;
	}
	
	/**
	 *
	 * Retrieve the user id
	 * @return string the user id
	 */
	public function getUserId()
	{
		return $this->userId;
	}
}
