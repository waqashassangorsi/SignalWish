/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_StripeService is an implementation of the MM_PaymentService interface using Stripe (www.stripe.com)
 */

class MM_StripeService extends MM_ScheduledPaymentService
{
	protected $token = "STRIPE"; 
	
	protected $testAPIKey = "";
	protected $liveAPIKey = "";
	
	protected $testPublishableKey = "";
	protected $livePublishableKey = "";
	
	protected $testMode = false;	
	
	protected $stripeJSEnabled = false;
	protected $stripeElementsEnabled = false;
	
	protected $supportedCurrencies = array("AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", 
			"BAM", "BBD", "BDT", "BGN", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BZD", "CAD", "CDF", "CHF", 
			"CNY", "COP", "CRC", "CVE", "CZK", "DKK", "DOP", "DZD", "EEK", "EGP", "ETB", "EUR", "FJD", 
			"FKP", "GBP", "GEL", "GIP", "GMD", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", 
			"INR", "ISK", "JMD", "KES", "KGS", "KHR", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", 
			"LSL", "LTL", "LVL", "MAD", "MDL", "MKD", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", 
			"MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "QAR", 
			"RON", "RSD", "RUB", "SAR", "SBD", "SCR", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD", "SVC", 
			"SZL", "THB", "TJS", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", 
			"WST", "XCD", "YER", "ZAR", "ZMW", //end of decimal based currencies
			
			//the following currencies are zero-decimal currencies
			"BIF", "CLP", "DJF", "GNF", "JPY", "KMF", "KRW", "MGA", "PYG", "RWF", "VND", "VUV", "XAF", "XOF", "XPF");
	
	public function __construct($autoload=true)
	{
		parent::__construct($autoload);
		
		if($autoload)
		{
			$this->setupStripe();
		}
	}
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/stripe/init.php");
	}
	
	
	/**
	 * Initializes the Stripe libraries
	 */
	private function setupStripe()
	{
		if ($this->testMode && !empty($this->testAPIKey))
		{
			\Stripe\Stripe::setApiKey($this->testAPIKey);
		}
		else if (!empty($this->liveAPIKey))
		{
			\Stripe\Stripe::setApiKey($this->liveAPIKey);
		}
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_STRIPE_CUSTOMER_LINKS." (\n".
		  		"stripe_customer_id VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
		  		"stripe_payment_method VARCHAR(255) NULL,\n".
				"membermouse_customer_id bigint(20) NOT NULL,\n".
				"UNIQUE KEY stripe_customer_id (stripe_customer_id),\n".
				"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_STRIPE_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(255) COLLATE utf8_bin,\n".
				"last_four varchar(4) NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"currency char(3) NOT NULL DEFAULT 'usd',\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_stripe_charge_charge_id_idx (charge_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_STRIPE_WEBHOOKS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"webhook_id varchar(255),\n".
				"date_received datetime NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Stripe service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TOKEN_EXCHANGE;
		$supported[] = MM_PaymentServiceFeatures::TEST_MODE;
		$supported[] = MM_PaymentServiceFeatures::MODIFY_REBILL_DATE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Stripe
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/stripe_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{
	    $active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
	    $this->setActive($active);
	    
	    if ($active)
	    {
	        $this->install();
	        $config = isset($post['payment_service']['stripe'])?$post['payment_service']['stripe']:array();
	        $emptyErrors = "";
	        $config['test_mode'] = isset($config['test_mode'])?(bool)$config['test_mode']:false;
	        $config['stripe_js_enabled'] = isset($config['stripe_js_enabled'])?(bool)$config['stripe_js_enabled']:false;
	        $config['stripe_elements_enabled'] = isset($config['stripe_elements_enabled'])?(bool)$config['stripe_elements_enabled']:false;
	        
	        if ($config['test_mode'])
	        {
	            if (empty($config['test_api_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Test Secret API Key";
	            }
	            
	            if (($config['stripe_js_enabled'] || $config['stripe_elements_enabled']) && empty($config['test_publishable_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Test Publishable Key";
	            }
	        }
	        else
	        {
	            if (empty($config['live_api_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Live Secret API Key";
	            }
	            
	            if (($config['stripe_js_enabled'] || $config['stripe_elements_enabled']) && empty($config['live_publishable_key']))
	            {
	                $emptyErrors .= "Stripe: Please enter a value for the Live Publishable Key";
	            }
	        }
	        
	        if ($emptyErrors != "")
	        {
	            return new MM_Response($emptyErrors,MM_Response::$ERROR);
	        }
	        //if here, that means they are all ok
	        
	        $this->setTestMode($config['test_mode']);
	        $this->setStripeJSEnabled($config['stripe_js_enabled']);
	        $this->setStripeElementsEnabled($config["stripe_elements_enabled"]);
	        if ($this->testMode)
	        {
	            $this->setTestAPIKey($config['test_api_key']);
	            if ($this->stripeJSEnabled || $this->stripeElementsEnabled)
	            {
	                $config['test_publishable_key'] = trim($config['test_publishable_key']); //remove whitespace
	                $this->setTestPublishableKey($config['test_publishable_key']);
	            }
	        }
	        else
	        {
	            $this->setLiveAPIKey($config['live_api_key']);
	            if ($this->stripeJSEnabled || $this->stripeElementsEnabled)
	            {
	                $config['live_publishable_key'] = trim($config['live_publishable_key']); //remove whitespace
	                $this->setLivePublishableKey($config['live_publishable_key']);
	            }
	        }
	    } 
	    
	    return new MM_Response();
	}		

	
	private function isTokenSCA($token)
	{
	    if(is_string($token))
	       return preg_match("/^(pi\_|pm\_)/", $token);
	    
	    return false;
	}
	
	/**
	 * Creates a customer in the Stripe System
	 * 
	 * @param MM_User $user The MemberMouse user
	 * @param MM_CustomerAddress $billingAddress The billing address of the customer credit card
	 * @param MM_CardInfo $cardInfo The customer's credit card information, or a payment token if $cardInfo is of type MM_PaymentToken
	 * @param $originalOrderId (optional) The order id to link the local card on file information to
	 * 
	 * @return MM_Response indicating whether the customer was created in the Stripe system successfully
	 */
	public function createCustomer(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		try 
		{
			if ($cardInfo instanceof MM_PaymentToken)
			{ 
		        $sourceParameter = $cardInfo->getToken(); 
			}
			else 
			{
				$sourceParameter = array(
								 "object"			=> "card",
								 "name"				=> $user->getFullName(),
								 "number"    		=> $cardInfo->getCardNumber(),
								 "exp_month" 		=> $cardInfo->getExpirationMonth(),
								 "exp_year"  		=> $cardInfo->getExpirationYear(),
								 "cvc"       		=> $cardInfo->getCVV(),
								 "address_line1"    => $billingAddress->getAddressLine1(),
								 "address_line2"    => $billingAddress->getAddressLine2(),
								 "address_zip"	    => $billingAddress->getPostalCode(),
								 "address_state"    => $billingAddress->getState(),
								 "address_city"     => $billingAddress->getCity(),
								 "address_country"  => $billingAddress->getCountry()
						   );
			}
			$customerData = array(
				"description" => get_bloginfo()." Customer ID# {$user->getId()} ({$user->getEmail()})",
				"email" => $user->getEmail(),
				"name" => $user->getFullName(),
				"source" => $sourceParameter,
				"metadata" => array(
					"name" => $user->getFullName(),
				),
				);  
			
			$stripeCustomer = null;
			if($this->isTokenSCA($sourceParameter))
			{
			    unset($customerData["source"]);  
			     
			    $stripeCustomer = \Stripe\Customer::create($customerData);
			    if(isset($stripeCustomer->id))
		        {    
    		        $paymentMethod = \Stripe\PaymentMethod::retrieve($sourceParameter);
    		        $paymentMethod->attach(['customer' => $stripeCustomer->id]);   
		        }
		        else
		        { 
		            return new MM_Response("Unable to create customer account.", MM_Response::$ERROR);
		        }
			}
			else
			{ 
			    $stripeCustomer = \Stripe\Customer::create($customerData);
			}
			
			
			$linkData = array(
			    "stripe_customer_id"=>$stripeCustomer->id,
			    "membermouse_customer_id"=>$user->getId()
			    );
			
			if($this->isTokenSCA($sourceParameter))
			{
			    $linkData["stripe_payment_method"] = $sourceParameter;
			}
			
			//create link to stripe customer
			$result = $wpdb->insert(MM_TABLE_STRIPE_CUSTOMER_LINKS,$linkData);
			if(!$result)
			{
				//TODO: do something if this fails in the future, ie log. Not a critical enough error to stop the process, but we would be interested to know it happened
			}
			
			//create entry in card on file table
			$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$stripeCustomer->id);
			if (!is_null($originalOrderId))
			{
				$cofData['original_order_id'] = $originalOrderId;
			}
			$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
			if(!$result)
			{
				//TODO: same deal as above: do something if this fails in the future, ie log. Not critical enough error to stop 
			}
			return new MM_Response($stripeCustomer->id);
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(), MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Takes a product's trial definition and converts it into days
	 * 
	 * @param MM_Product $product The product to convert the trial of
	 * @return integer representing the number of days, 0 on error
	 */
	private function convertTrialToDays(MM_Product $product)
	{
		if (!$product->hasTrial())
		{
			return 0;
		}
		
		$numUnits = $product->getTrialDuration();
		$unitType = $product->getTrialFrequency();
		switch ($unitType)
		{
			case 'days':
				return $numUnits;
				break;
			case 'weeks':
				return ($numUnits*7);
				break;
			case 'years':
				return ($numUnits*365);
				break;
			default:
				return 0;
		}
	}
	
	
	/**
	 * Respond to Stripe webhooks. Used to detect refunds issued by the other side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request The $_POST superglobal if it exists, a blank array if not. Ignored in this implementation in favor of php://input
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) 
	{
		global $wpdb;
		
		$rawRequest = file_get_contents("php://input");
		$webhook = json_decode($rawRequest);
		
		if ($webhook === false)
		{
			return new MM_PaymentServiceResponse("Invalid webhook format: Could not decode JSON",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (isset($webhook->id) && $this->isDuplicateWebhook($webhook->id))
		{
			return new MM_PaymentServiceResponse("Duplicate webhook");
		}
		
		//log the webhook
		$wpdb->insert(MM_TABLE_STRIPE_WEBHOOKS,array("webhook_id"=>$webhook->id,"date_received"=>MM_Utils::getCurrentTime()));
		
		if (!isset($webhook->type))
		{
			//we don't recognize this webhook, so just ignore it
			return new MM_PaymentServiceResponse();
		}
		
		switch ($webhook->type)
		{
			case 'charge.refunded':
				if (!isset($webhook->data) || !isset($webhook->data->object) || !isset($webhook->data->object->id) || 
					!isset($webhook->data->object->refunded) || ($webhook->data->object->refunded != true))
				{
					//not recognizing the object format, or this is a partial refund, ignore
					return new MM_PaymentServiceResponse();
				}
				$transactionLookupSQL = "SELECT t.id as transaction_id FROM ".MM_TABLE_TRANSACTION_LOG." t, ".MM_TABLE_STRIPE_CHARGES." c ".
										"WHERE t.payment_service_id=%s AND ((t.transaction_type=%s) OR (t.transaction_type=%s)) AND t.payment_service_detail_id=c.id AND c.charge_id=%s AND t.refund_id IS NULL";
				$chargeInfo = $wpdb->get_row($wpdb->prepare($transactionLookupSQL,$this->getId(),MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,$webhook->data->object->id));
				if ($chargeInfo != null)
				{
					//found the charge
					$refundResponse = $this->_refundTransaction($chargeInfo->transaction_id,false);
					//doesnt really matter what the response is, we are out of moves if the refund fails
				}
				return new MM_PaymentServiceResponse();
				break;
			default:
				//we don't recognize this webhook, so just ignore it
				return new MM_PaymentServiceResponse();
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Detects if the webhook with the supplied id has been processed before
	 * 
	 * @param string $webhookId
	 * @return boolean true if this is a duplicate id, false otherwise
	 */
	private function isDuplicateWebhook($webhookId)
	{
		global $wpdb;
		
		$count = $wpdb->get_var($wpdb->prepare("SELECT count(*) FROM ".MM_TABLE_STRIPE_WEBHOOKS." WHERE webhook_id=%s",$webhookId));
		return (!is_null($count) && ($count>0));
	}
	
	private function getOrderDescriptor(MM_Order $order, $defaultText=null)
	{  
		if(is_null($defaultText))
		{
			$defaultText= "Order# {$order->getOrderNumber()}";
			
			// Descriptor is limited by 22 characters. 
			if(strlen($defaultText)>22)
			{
			    $defaultText = substr($defaultText, 0,22);
			}
		} 
		
		return apply_filters(MM_Filters::$STRIPE_BILLING_STATEMENT_DESCRIPTOR,$defaultText, $order->getDataAsStdClass());
	}
	 
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb; 
		
	    $parentResponse = parent::chargeOrder($order,$cardInfo,$validate);
	    if (!MM_PaymentServiceResponse::isSuccess($parentResponse))
	    {
	        $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
	        return $parentResponse;
	    }  
	    
	    $tryCardOnFile = is_null($cardInfo);
	    if (!$tryCardOnFile)
	    {
	        $cardValidation = $cardInfo->validate();
	        if ($cardValidation !== true)
	        {
	            $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
	            return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
	        }
	    } 
	    
		//This next section looks up the customer on Stripe and does the following
		//1. if card on file is supposed to be used, but no customer was found, it exits with an error
		//2. if a card was supplied, and no customer was found, create a new customer on Stripe and attach the card to it
		//3. if a card was supplied AND the customer already exists in Stripe, that customer is updated with the new card information
		//	 and then reused. This means any previous subscriptions get updated to use the new card. Not sure if this is the desired behavior
		
		$productItems = $order->getProducts(); 
		$stripeCustomerId = $this->lookupCustomer($order->getCustomer()->getId());
		
		if ($stripeCustomerId === false)
		{
			if ($tryCardOnFile)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR);  
			}
			$ccResponse = $this->createCustomer($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);   
			}
			$stripeCustomerId = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{ 
					$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
					return $updateResponse;   
				}
			}
		} 
    		
		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $createScheduledResult;    
		}
		
		if ($order->getTotal() > 0.00)
		{  
		     $chargeResponse = $this->sendStripeCharge($order->getTotal(), $order->getCurrency(), $this->getOrderDescriptor($order),$stripeCustomerId);
		     
		     if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		     {
		         $createdSubscriptions = $createScheduledResult->message;
		         if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
		         {
		             $this->cancelScheduledSubscriptions($createdSubscriptions);
		         }
		         $order->saveOrderStatus(MM_Order::$ERROR_FAILED);
		         return $chargeResponse;
		     } 
		     
			//log to transactions tables
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}  
			
			$chargeObject = $chargeResponse->getMessage();
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$chargeId = $chargeObject->id;
			$insertData = array( "order_id"          => $order->getId(),
								 "order_item_id"     => $orderItemId,
								 "charge_id"     	 => $chargeId,
			                     "last_four"         => (isset($chargeObject->card->last4) && !empty($chargeObject->card->last4))?substr($chargeObject->card->last4,-4):"",
								 "amount"            => $order->getTotal(),
								 "currency"          => $order->getCurrency(),
								 "transaction_date"  => $transactionDate
			);
			$wpdb->insert(MM_TABLE_STRIPE_CHARGES,$insertData);
			$stripeChargeId = $wpdb->insert_id;
			 
			
			//now log the payment in the transactions table
			if ($this->testMode)
			{ 
				$res = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stripeChargeId,$transactionDate);
			}
			else
			{ 
				$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stripeChargeId,$transactionDate);
			}
		}
		 
		//errors or failures return early, so reaching this point means payment was successful or the initial payment is 0
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		 
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Send a charge to Stripe, and returns an object containing the unfiltered result.
	 * 
	 * @param integer $amount The amount to charge. This will be converted to the smallest indivisible unit of the designated currency
	 * @param string  $currency The currency designation to send. Defaults to "usd"
	 * @param string  $description The description to attach to the charge
	 * @param string  $stripeCustomerId (optional) The alphanumeric Stripe customer id to charge. Either customer or cardInfo should be supplied, but not both
	 * @param string  $cardInfo (optional) The credit card to charge. Either customer or cardInfo should be supplied, but not both
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the stripe charge object returned by the gateway, on failure contains an error message
	 */
	protected function sendStripeCharge($amount, $currency, $description, $stripeCustomerId=null, $cardInfo=null, $billingAddress=null)
	{
		if (is_null($currency))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No currency was selected",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($stripeCustomerId) && is_null($cardInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($stripeCustomerId) && !is_null($cardInfo) && is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No billing address was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		/// Does this customer have a payment method id?
		$paymentMethodID = null;
		if(!is_null($stripeCustomerId))
		{
		    $paymentMethodID = $this->lookupPaymentMethodByStripeCustomer($stripeCustomerId);
		}
		
		//VERY IMPORTANT: intval(19.99*100) yields 19.98, intval(strval(19.99*100)) yields 19.99
		//convert to integer to avoid float-point arithmetic rounding errors
		
		$currencyMeta = MM_CurrencyUtil::getCurrencyMetadata($currency);
		$intMultiplier = pow(10,intval($currencyMeta['frac_digits']));
		$amount = intval(strval($amount * $intMultiplier));
		
		if (!is_int($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received an improperly formatted amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$chargeData = array(
		  "amount"   => $amount,
      	  "currency" => strtolower($currency),				
		);
		
		if (!empty($description))
		{
			$chargeData['description'] = $description;
		}
		
		if (!is_null($cardInfo))
		{
  			if ($cardInfo instanceof MM_PaymentToken)
			{
			    if(is_null($paymentMethodID))
			    {
			     $chargeData['source'] = $cardInfo->getToken();
			    }
			}
			else 
			{
				  $chargeData['source'] = array(
				  		"object"		  => "card",
				    	"number"   	      => $cardInfo->getCardNumber(),
				 		"exp_month" 	  => $cardInfo->getExpirationMonth(),
				 		"exp_year"  	  => $cardInfo->getExpirationYear(),
			            "cvc"       	  => $cardInfo->getCVV(),
			            "address_line1"   => $billingAddress->getAddressLine1(),
			            "address_line2"   => $billingAddress->getAddressLine2(),
			            "address_zip"	  => $billingAddress->getPostalCode(),
			            "address_state"   => $billingAddress->getState(),
			            "address_city"    => $billingAddress->getCity(),
			            "address_country" => $billingAddress->getCountry()
			        );
      		}
		}
		else 
		{
			$chargeData['customer'] = $stripeCustomerId;
		}
		
		try 
		{
		    $chargeObject = null;
		    if(!is_null($paymentMethodID))
		    {  
		        $piChargeArr = [
		            'amount' => $amount,
		            'currency' => strtolower($currency),
		            'payment_method_types' => ['card'],
		            'customer' => $stripeCustomerId,
		            'payment_method' => $paymentMethodID,
		            'off_session' => true,
		            'confirm' => true,
		        ];
		        
		        if (!empty($description))
		        {
		            $piChargeArr["statement_descriptor_suffix"] = $description;
		        }
		        
		        $chargeObject = \Stripe\PaymentIntent::create($piChargeArr);
		        
		    }
		    else{
		        $chargeObject = \Stripe\Charge::create($chargeData);
		    }
		      
			return new MM_PaymentServiceResponse($chargeObject);
		}
		catch (Exception $e)
		{
			$status = MM_PaymentServiceResponse::$ERROR;
			if (strpos($e->getMessage(),"Invalid currency") !== false)
			{
				$status = MM_PaymentServiceResponse::$FAILED;
			}
			
			if (($e->getCode() == "card_declined") || ($e->getCode() == "expired_card") ||($e->getCode() == "processing_error"))
			{
				//these statuses indicate that the failure is on the remote side, and is not an error in the way the request is constructed.
				$status = MM_PaymentServiceResponse::$FAILED;
			}
			return new MM_PaymentServiceResponse($e->getMessage(), $status);
		}
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber,$updatedPaymentInfo=null)
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		
		$stripeCustomerId = $this->lookupCustomer(MM_Order::getUserIdByOrderId($order->id));
		if ($stripeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$paymentEvent->getUserId()}",MM_Response::$ERROR);
		}
		
		$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		
		// PaymentIntent descriptor is limited by 22 characters.
		if(!is_null($stripeCustomerId))
		{
		    $paymentMethodID = $this->lookupPaymentMethodByStripeCustomer($stripeCustomerId);
		    if($this->isTokenSCA($paymentMethodID))
		    {
		        $description = "Order# {$order->getOrderNumber()}";
		    } 
		}
		
		$descriptor = $this->getOrderDescriptor($order, $description);
		$chargeResponse = $this->sendStripeCharge($orderItem->getRecurringAmount(), $orderItem->getCurrency(), $descriptor,$stripeCustomerId);
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		 
		//log successful transaction
		$chargeObject = $chargeResponse->getMessage();
		$transactionDate = MM_Utils::getCurrentTime();
		$insertData = array( "order_id" => $order->getId(),
				"order_item_id"     => $orderItem->getId(),
				"charge_id"     	=> $chargeObject->id,
				"last_four"         => !empty($chargeObject->card->last4)?substr($chargeObject->card->last4,-4):"",
				"amount"            => $orderItem->getRecurringAmount(),
				"currency"          => $order->getCurrency(),
				"transaction_date"  => $transactionDate);
		
		
		$wpdb->insert(MM_TABLE_STRIPE_CHARGES,$insertData);
		$stripeTableChargeId = $wpdb->insert_id;
		

		if ($this->testMode)
		{
			MM_TransactionLog::createTestTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$stripeTableChargeId);			
		}
		else 
		{
			MM_TransactionLog::createTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$stripeTableChargeId);
		}

		
		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	
	/**
	 * Looks up the Stripe customer id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (string) Stripe customer id if found, boolean false if not found or errored
	 */
	protected function lookupCustomer($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT stripe_customer_id from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		return $row->stripe_customer_id;
	}
	
	/**
	 * Looks up the Stripe payment method id linked to a MemberMouse user (for elements)
	 *
	 * @param int $userId The MemberMouse user id
	 * @return The (string) Stripe payment method id if found, boolean false if not found or errored
	 */
	protected function lookupPaymentMethodByMMUser($userId)
	{
	    global $wpdb;
	    
	    $lookupSQL = "SELECT stripe_payment_method from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}' limit 1";
	    $row = $wpdb->get_row($lookupSQL);
	    if (is_null($row))
	    {
	        return false;
	    }
	    return $row->stripe_payment_method;
	}
	
	
	/**
	 * Looks up the Stripe payment method id linked to a Stripe user (for elements)
	 *
	 * @param int $stripeCustomerId The Stripe customer id
	 * @return The (string) Stripe payment method id if found, boolean false if not found or errored
	 */
	protected function lookupPaymentMethodByStripeCustomer($stripeCustomerId)
	{
	    global $wpdb;
	    
	    $lookupSQL = "SELECT stripe_payment_method from ".MM_TABLE_STRIPE_CUSTOMER_LINKS." WHERE stripe_customer_id='{$stripeCustomerId}' limit 1";
	    $row = $wpdb->get_row($lookupSQL);
	    if (is_null($row))
	    {
	        return false;
	    }
	    return $row->stripe_payment_method;
	}
	
	protected function savePaymentMethodReferenceByUser($userId, $paymentMethodId)
	{
	    global $wpdb; 
	    $wpdb->update(MM_TABLE_STRIPE_CUSTOMER_LINKS, array(
	        "stripe_payment_method"=>$paymentMethodId
	    ),array(
	        "membermouse_customer_id"=>$userId
	    ));
	}
	
	protected function savePaymentMethodReferenceByStripeCustomerId($stripeCustomerId, $paymentMethodId)
	{
	    global $wpdb;
	    $wpdb->update(MM_TABLE_STRIPE_CUSTOMER_LINKS, array(
	        "stripe_payment_method"=>$paymentMethodId
	    ),array(
	        "stripe_customer_id"=>$stripeCustomerId
	    ));
	} 
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$stripeCustomerId = $this->lookupCustomer($customerId);
		if ($stripeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		} 
		
		
		$user = new MM_User($customerId);
		try 
		{
			$stripeCustomer = \Stripe\Customer::retrieve($stripeCustomerId);
			$stripeCustomer->description = get_bloginfo()." customer id {$user->getId()} ({$user->getEmail()})";
			$stripeCustomer->email = $user->getEmail();
			
			
			if ($cardInfo instanceof MM_PaymentToken)
			{ 
				if($this->isTokenSCA($cardInfo->getToken()))
				{   
				    $this->savePaymentMethodReferenceByUser($customerId,$cardInfo->getToken()); 
				    
    				$paymentMethod = \Stripe\PaymentMethod::retrieve($cardInfo->getToken());
    				$paymentMethod->attach(['customer' => $stripeCustomerId]); 
    				 
    				$billingAddress->setAddressLine1("My Avenue Lane");
    				$billingAddress->setCity("Myrtle Beach");
    				$fieldsToUpdate = array(
    				    "line1"    => $billingAddress->getAddressLine1(),
    				    "line2"    => $billingAddress->getAddressLine2(),
    				    "postal_code"	     => $billingAddress->getPostalCode(),
    				    "state"    => $billingAddress->getState(),
    				    "city"     => $billingAddress->getCity(),
    				    "country"  => $billingAddress->getCountry()
    				);
    				foreach($fieldsToUpdate as $fieldId=>$value)
    				{
    				    if(!is_null($value) && strlen($value)>0)
    				    {
    				        $resultingArray[$fieldId] = $value;
    				    }
    				}
    				
    				if(count($resultingArray)>0)
    				{
    				    $paymentMethod->update($paymentMethod->id,['billing_details'=> ['address'=>$resultingArray]]);
    				}  
				}
				else 
				{  
				    $stripeCustomer->card = $cardInfo->getToken();
				    $stripeCustomer->save();
				}
			}
			else 
			{ 
  				$stripeCustomer->card = array(
		  			  "number"    		   => $cardInfo->getCardNumber(),
		    		  "exp_month" 		   => $cardInfo->getExpirationMonth(),
		    		  "exp_year"  		   => $cardInfo->getExpirationYear(),
		    		  "cvc"       		   => $cardInfo->getCVV(),
		    		  "address_line1"    => $billingAddress->getAddressLine1(),
		    		  "address_line2"    => $billingAddress->getAddressLine2(),
		    		  "address_zip"	     => $billingAddress->getPostalCode(),
		    		  "address_state"    => $billingAddress->getState(),
		    		  "address_city"     => $billingAddress->getCity(),
		    		  "address_country"  => $billingAddress->getCountry(),
			        );
  				
  				$stripeCustomer->save();
		     }
		      
			parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
			
			if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
			{
			    
				return $this->resumeSubscription($orderItem);
			}
			return new MM_PaymentServiceResponse();
		}
		catch (Exception $e)
		{
		    
			return new MM_PaymentServiceResponse($e->getMessage(), MM_PaymentServiceResponse::$ERROR);
		}		
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Stripe and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Stripe api. If Stripe notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$transactionAmount = abs($transactionRow->amount);
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$stripeChargeQuery = "SELECT * from ".MM_TABLE_STRIPE_CHARGES." WHERE id = %s";
				$stripeChargeInfo = $wpdb->get_row($wpdb->prepare($stripeChargeQuery,$transactionRow->payment_service_detail_id));
				$stripeChargeId = $stripeChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($stripeChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			return $this->refundStripeChargeId($stripeChargeId,$transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success
	}	
	
	
	/**
	 * Refunds a Stripe charge, and logs the refund in the transaction table
	 * 
	 * @param string $stripeChargeId The Stripe identifier for the charge to be refunded
	 * @param int $originalTransactionId The identifier for the membermouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refundStripeChargeId($stripeChargeId, $originalTransactionId)
	{
		global $wpdb;
		
		$alreadyRefunded = false;
		try 
		{
			//do the stripe refund
			if($this->isTokenSCA($stripeChargeId))
			{ 
			    $paymentIntent = \Stripe\PaymentIntent::retrieve($stripeChargeId);
			    if(isset($paymentIntent->charges->data) && is_array($paymentIntent->charges->data))
			    {
			     $paymentIntent->charges->data[0]->refund();
			    }
			}
			else
			{
    			$ch = \Stripe\Charge::retrieve($stripeChargeId);
    			$ch->refund();
			}
		}
		catch (Exception $e)
		{
			if (strpos($e->getMessage(),"has already been refunded") !== false)
			{
				$alreadyRefunded = true;
			}
			else 
			{
				return new MM_PaymentServiceResponse("Error refunding transaction: {$e->getMessage()}",MM_PaymentServiceResponse::$ERROR);
			}
		}
			
		//get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		if (!$alreadyRefunded || ($alreadyRefunded && is_null($originalTransactionInfo->refund_id)))
		{
			$transactionDescription = "Refund for transaction# {$originalTransactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
			
			if ($this->testMode)
			{
				$response = MM_TransactionLog::createTestTransactionEntry($originalTransactionInfo->order_id,
						$originalTransactionInfo->order_item_id,
						$originalTransactionInfo->amount,
						$originalTransactionInfo->currency,
						$transactionDescription,
						MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
						false,
						$this->getId(),
						null,
						$transactionDate,
						$originalTransactionId);
			}
			else 
			{
				$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$originalTransactionInfo->amount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$originalTransactionId);
			}
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
			}
		}
		
		if ($alreadyRefunded)
		{
			return new MM_PaymentServiceResponse("This transaction was already refunded by Stripe. The database has been updated",MM_PaymentServiceResponse::$ERROR);
		}
		return new MM_PaymentServiceResponse();		
	}
	
	
	public function getTestAPIKey()
	{
		return $this->testAPIKey;
	}
	
	
	public function setTestAPIKey($testAPIKey)
	{
		$this->testAPIKey = $testAPIKey;
	}
	
	
	public function getLiveAPIKey()
	{
		return $this->liveAPIKey;
	}
	
	
	public function setLiveAPIKey($liveAPIKey)
	{
		$this->liveAPIKey = $liveAPIKey;
	}
	
	public function isStripeElementsEnabled()
	{
	    return $this->stripeElementsEnabled;
	}
	
	public function setStripeElementsEnabled($stripeElementsEnabled)
	{
	    $this->stripeElementsEnabled = (bool)$stripeElementsEnabled;
	}
	
	public function setStripeJSEnabled($stripeJSEnabled)
	{
		$this->stripeJSEnabled = (bool)$stripeJSEnabled;
	}
	
	
	public function isStripeJSEnabled()
	{
		return $this->stripeJSEnabled;
	}
	
	public function getTestPublishableKey()
	{
		return $this->testPublishableKey;
	}
	
	
	public function setTestPublishableKey($testPublishableKey)
	{
		$this->testPublishableKey = $testPublishableKey;
	}
	
	
	public function getLivePublishableKey()
	{
		return $this->livePublishableKey;
	}
	
	
	public function setLivePublishableKey($livePublishableKey)
	{
		$this->livePublishableKey = $livePublishableKey;
	}
	
	
	/**
	 * checkoutInit is called from the checkout form prior to the page being rendered.
	 * If Stripe.js is being used, the javascript library is enqueued, and custom 
	 * 
	 * @see MM_PaymentService::checkoutInit()
	 */
	public function checkoutInit()
	{
	    if ($this->stripeJSEnabled)
	    {
	        return $this->stripeJSInit(array("stripeJS", "membermouse-checkout-form"));
	    }
	    else if($this->stripeElementsEnabled)
	    { 
	        return $this->stripeJSInit(array("stripeElements", "membermouse-checkout-form"));
	    }
	}	
	
	
	protected function stripeJSInit($bridgeDependencies=array())
	{  
		//The front-end tasks are only relevent if Stripe.js is enabled
		if ($this->stripeJSEnabled)
		{
		    wp_enqueue_script("stripeJS", "https://js.stripe.com/v2/", array(), MemberMouse::getPluginVersion(), true);
		    wp_enqueue_script("membermouse-stripeJS", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-stripe-token-exchange.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
		    wp_localize_script('membermouse-stripeJS', 'stripeJSInfo', array('stripePublishableKey' => $this->inTestMode()?$this->getTestPublishableKey():$this->getLivePublishableKey(),
		        'improperStripeResponseErrorMsg' => _mmt("An improper response was received from Stripe, please try again")));
		}
		//The front-end tasks are only relevent if Stripe Elements is enabled
		else if ($this->stripeElementsEnabled)
		{ 
		    wp_enqueue_script("stripeElements", "https://js.stripe.com/v3/", array(), MemberMouse::getPluginVersion(), true);
		    wp_enqueue_script("membermouse-stripeElements", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-stripe-elements.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
		    wp_localize_script('membermouse-stripeElements', 'stripeElementsInfo', array('stripePublishableKey' => $this->inTestMode()?$this->getTestPublishableKey():$this->getLivePublishableKey(),
		        'improperStripeResponseErrorMsg' => _mmt("An improper response was received from Stripe, please try again")));
		     
		    try
		    {
    		    $intent = \Stripe\SetupIntent::create([
    		        'usage' => 'off_session', // The default usage is off_session
    		    ]); 
                wp_localize_script('membermouse-stripeElements', "stripeSecret", $intent->client_secret);
		    }
		    catch(Exception $e)
		    { 
		        MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Stripe service cannot setup intent: ".$e->getMessage());
		        wp_localize_script('membermouse-stripeElements', "stripeSecretError", _mmt("Improper gateway configuration."));
		    }
		}
	}
	
	
	public function setTestMode($testMode)
	{
		$testMode = (bool)$testMode;
		if ($this->testMode != $testMode)
		{
			$this->setupStripe(); //attempt to catch programmatic mode changes and reinitialize Stripe
		}
		$this->testMode = $testMode;
	}
	
	
	public function getTestMode()
	{
		return $this->testMode;
	}
	
	
	/**
	 * @see MM_PaymentService::inTestMode()
	 */
	public function inTestMode()
	{
		return $this->getTestMode();
	}
	
	
	/**
	 * @see MM_PaymentService::switchToTestMode()
	 */
	public function switchToTestMode()
	{
		$this->setTestMode(true);
		return true;
	}
	
	
	/**
	 * Load Stripe.js on my account page to support the card update operation
	 *
	 * @see MM_PaymentService::myAccountInit()
	 */
	public function myAccountInit()
	{
	    if ($this->stripeJSEnabled)
	    {
	        return $this->stripeJSInit(array("stripeJS","membermouse-myaccount-js"));
	    }
	    else if($this->stripeElementsEnabled)
	    {
	        return $this->stripeJSInit(array("stripeElements", "membermouse-myaccount-js"));
	    }  
	}
	
	public function tokenExchangeEnabled()
	{
	    return $this->stripeJSEnabled || $this->stripeElementsEnabled;
	}
	
	
	public function hasHostedPaymentFields() 
	{
	    return $this->stripeElementsEnabled;
	}
	
	
	public function formFieldOverride($formType, $fieldName)
	{
	    
        switch ($fieldName)
	    {
	        case 'ccnumber':
	            return "<div id='mm_field_cc_number_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        case 'ccexpirationdate':
	            return "<div id='mm_field_cc_exp_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        case 'ccsecuritycode':
	            return "<div id='mm_field_cc_cvv_div' class='mm-stripe-elements-container'></div>\n";
	            break;
	        default:
	            return false;
	    }
	}
}