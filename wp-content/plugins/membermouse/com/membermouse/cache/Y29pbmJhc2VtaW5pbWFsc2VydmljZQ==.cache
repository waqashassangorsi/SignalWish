/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_CoinbaseService handles handles bitcoin transactions and notifications made via Coinbase
 * 
 */
 
class MM_CoinbaseMinimalService extends MM_ScheduledPaymentService
{
	protected $token = "COINBASEMINIMAL";
	
	//coinbase order/payment statuses
	public static $ORDER_STATUS_COMPLETED = "completed";
	public static $ORDER_STATUS_MISPAID = "mispaid";
	public static $ORDER_STATUS_EXPIRED = "expired";
	public static $ORDER_STATUS_CANCELED = "canceled";
	
	//api configuration fields
	protected $apiKey  = "";
	protected $apiSecret  = "";
	
	//ux fields
	protected $reminderTimeBefore = array(1,3,7);
	protected $reminderSubject = array(
		"[MM_Member_Data name='firstName'] - 1 day left to send your [MM_Order_Data name='productName'] bitcoin payment",
		"[MM_Member_Data name='firstName'] - 3 days left to send your [MM_Order_Data name='productName'] bitcoin payment",
		"[MM_Member_Data name='firstName'] - 7 days left to send your [MM_Order_Data name='productName'] bitcoin payment"
	);
	protected $reminderText = array(
		"Hi [MM_Member_Data name='firstName'],\n\n Your [MM_Order_Data name='productName'] membership is almost due - to continue, you'll need to send the following payment: \n\n [MM_Bitcoin_Payment_Details]\n\n When your payment is received, your membership will automatically be renewed.\n\n Thanks!\n [MM_Employee_Data name='displayName']",
		"Hi [MM_Member_Data name='firstName'],\n\n Your [MM_Order_Data name='productName'] membership is almost due - to continue, you'll need to send the following payment: \n\n [MM_Bitcoin_Payment_Details]\n\n When your payment is received, your membership will automatically be renewed.\n\n Thanks!\n [MM_Employee_Data name='displayName']",
		"Hi [MM_Member_Data name='firstName'],\n\n Your [MM_Order_Data name='productName'] membership is almost due - to continue, you'll need to send the following payment: \n\n [MM_Bitcoin_Payment_Details]\n\n When your payment is received, your membership will automatically be renewed.\n\n Thanks!\n [MM_Employee_Data name='displayName']"
	);
	
	//TODO: REFACTOR: NEVER SHIP TO PRODUCTION WITH $skipValidation AS TRUE; FOR LOCAL TESTING ONLY!
	private $skipValidation = false;
	private $allowOrderCreation = false;
	
	//set threshold of when ipns should be logged to database
	//all false is maximum effiency (less db writes) and
	//all true is maximum safety (awareness of hack attempts, better debugging if coinbase changes format, etc)
	private $logUnauthorizedIPNs = true;
	private $logInvalidIPNs = true;
	private $logDuplicateIPNs = false;
	
	//could in the future support all currencies listed here: https://coinbase.com/api/v1/currencies
	//but this would require adapting ipn handling to make sure it could handle currectly
	//(right now we assume that order->total_native->cents/100 = payment total)
	//also would need to make validateOrder(), which ensures no order is less than $1.00 USD,
	//is able to calculate correctly for other currencies
	protected $supportedCurrencies = array("USD");

	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/coinbase/Coinbase.php");
	}
	
	public function getAPIKey()
	{
		return $this->apiKey;
	}

	public function setAPIKey($apiKey)
	{
		$this->apiKey = $apiKey;
	}

	public function getAPISecret()
	{
		return $this->apiSecret;
	}

	public function setAPISecret($apiSecret)
	{
		$this->apiSecret = $apiSecret;
	}

	public function getReminderTimeBefore($emailNum=false)
	{
		return ($emailNum!==false)? $this->reminderTimeBefore[$emailNum] : (array)$this->reminderTimeBefore; 
	}

	public function setReminderTimeBefore($reminderTimeBefore)
	{
		$this->reminderTimeBefore = $reminderTimeBefore;
	}
	
	public function getReminderSubject($emailNum=false)
	{
		return ($emailNum!==false)? $this->reminderSubject[$emailNum] : (array)$this->reminderSubject; 
	}

	public function setReminderSubject($reminderSubject)
	{
		$this->reminderSubject = $reminderSubject;
	}
	
	public function getReminderText($emailNum=false)
	{
		return ($emailNum!==false)? $this->reminderText[$emailNum] : (array)$this->reminderText; 
	}

	public function setReminderText($reminderText)
	{
		$this->reminderText = $reminderText;
	}


	public function install()
	{
		global $wpdb;
		
		parent::install();
		
		//purpose of this table is to log every incoming ipn transaction
		$sql[] = "CREATE TABLE ".MM_TABLE_COINBASEMINIMAL_IPN_LOG." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"button_id varchar(48),\n".
				"ipn_transaction_id varchar(48),\n".
				"ipn_content text NOT NULL,\n".
				"ipn_status varchar(24),\n".
				"error CHAR(0) NULL, \n".
				"received datetime NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";

		//purpose of this table is to make an n:1 link of every coinbase "button" (unique checkout) with a mm order
		$sql[] = "CREATE TABLE ".MM_TABLE_COINBASEMINIMAL_BUTTON_LINKS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"button_id varchar(32) NOT NULL,\n".
				"order_id bigint(20) NOT NULL,\n".
				"coinbase_order text NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
				
		//purpose of this table is to typify each scheduled event as a reminder or payment check and track its status
		$sql[] = "CREATE TABLE ".MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_item_id bigint(20) NOT NULL,\n".
				"type varchar(32) NOT NULL,\n".
				"status varchar(32) NOT NULL,\n".
				"data text,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
				
		//purpose of this table is to log all credits and deficits per order item
		//essentially same data as transaction log but avoids dependency on that
		$sql[] = "CREATE TABLE ".MM_TABLE_COINBASEMINIMAL_TRANSACTIONS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20),\n".
				"button_id varchar(48),\n".
				"btc_amount decimal(10,8) NOT NULL,\n".
				"amount decimal(10,4) NOT NULL,\n".
				"currency char(3) NOT NULL,\n".
				"mispaid_amount decimal(10,4) NOT NULL,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";

		foreach ($sql as $query)
		{
			dbdelta($query);
		}
		
	}


	/**
	 * Used to report what features the Coinbase Service supports
	 * @see MM_PaymentService::supportsFeature()
	 * 
	 * @param $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::OFFSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;		
		return in_array($featureConst,$supported,true);
	}

	
	#########################################
	# ADMIN
	#########################################

	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Coinbase
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/coinbaseminimal_config.html.php",$this);
		return $config_options;
	}


	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post)
	{
		$active = isset($post['offsite_payment_services']) && in_array(strtolower($this->getToken()), $post['offsite_payment_services']);
		$this->setActive($active);
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['coinbaseminimal'])?$post['payment_service']['coinbaseminimal']:array();
			
			//validate configuration - reminder must not be empty, and api keys must not be empty and must not return auth error from Coinbase
			if (empty($config['api_key']) || empty($config['api_secret']))
			{
				return new MM_Response("Coinbase Configuration Error: Both API credentials must be filled out in order to use the Coinbase (Wallet Ignored) payment method.",MM_Response::$ERROR);
			}
			try
			{
				$testAPI = Coinbase::withApiKey($config['api_key'], $config['api_secret'])->createButton('test','1.00','USD');	
			}
			catch(Exception $e)
			{
				return new MM_Response("Coinbase denied access for those API credentials. Please make sure your merchant account has been activated and that you gave \"buttons\" permissions when you created that API key.",MM_Response::$ERROR); 
			}
			if ((int)$config['reminder_time_before']==0 || empty($config['reminder_subject']) || empty($config['reminder_text']))
			{
				return new MM_Response("Coinbase (Wallet Ignored) needs the # of days notice, subject and text to all be filled in.",MM_Response::$ERROR);
			}
			
			$this->setAPIKey($config['api_key']);
			$this->setAPISecret($config['api_secret']);
			$this->setReminderTimeBefore($config['reminder_time_before']);
			$this->setReminderSubject($config['reminder_subject']);
			$this->setReminderText($config['reminder_text']);
		}
		return new MM_Response();
	}


	#########################################
	# PAYMENT / CHECKOUT 
	#########################################
	
	public function validateOrder(MM_Order $order)
	{
		$orderItems = $order->getProducts();		
		
		$recurringItems = null;
		if (version_compare(phpversion(),"5.4",">="))
		{
			$recurringItems = array_filter($orderItems,function($i){ return $i->isRecurring();});
		}
		else
		{
			$recurringItems = array_filter($orderItems,create_function('$i','return $i->isRecurring();'));
		}
		
		$total = $this->getOrderTotal($order);
		$item = reset($orderItems);
		
		//don't allow empty order
		if (empty($orderItems))
		{
			return new MM_PaymentServiceResponse("Cannot purchase empty order.",MM_PaymentServiceResponse::$ERROR);		
		}
		//don't allow multiple subscriptions or mix of sub/single payment
		if (count($recurringItems)>1 || (!empty($recurringItems) && count($orderItems)!=count($recurringItems)))
		{
			return new MM_PaymentServiceResponse("If a subscription is being purchased, that must be the only item in the order",MM_PaymentServiceResponse::$ERROR);
		}
		//require supported currencies
		if (!in_array($order->getCurrency(),$this->supportedCurrencies))
		{
			return new MM_PaymentServiceResponse($order->getCurrency()." as order currency is unsupported for Coinbase payments.",MM_PaymentServiceResponse::$ERROR);
		}
		//coinbase does not allow orders less that about $0.75 USD 
		if ($total > 0 && $total < 0.75)
		{
			return new MM_PaymentServiceResponse("Coinbase order total cannot be less than $0.75 USD.",MM_PaymentServiceResponse::$ERROR);
		}
		//no errors
		return new MM_PaymentServiceResponse();
	}
	
	public function displayPaymentForm(MM_Order $order)
	{
		global $wpdb;
		
		// go through coinbase checkout if it's NOT a free trial / product
		if( $this->getOrderTotal($order) > 0 )
		{
			//get payment template
			$paymentInfo = $this->getCoinbaseOrder($order);
			$paymentInfo->confirmation_url = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
			$html = MM_TEMPLATE::generate("{$this->getTemplateDir()}/coinbaseminimal_payment_form.html.php",$paymentInfo);
			
			//save debit to transactions log, if it hasn't already been logged
			$orderTransactions = $wpdb->get_results($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_TRANSACTIONS." WHERE order_id=%d",$order->getid()));
			if (empty($orderTransactions))
			{
				$wpdb->insert(MM_TABLE_COINBASEMINIMAL_TRANSACTIONS,array(
					"order_id" => $order->getId(),
					"order_item_id" => (count($order->getProducts())==1? reset($order->getProducts())->getId() : NULL),
					"btc_amount" => -(intval($paymentInfo->amount)),
					"amount" => -($this->getOrderTotal($order)),
					"currency" => $order->getCurrency(),
					"transaction_date" => gmdate('Y-m-d H:i:s')
				));
			}
				
			return $html;
		}
		// assign access immediately for trials
		else
		{
			MM_AccessControlEngine::assignAccessFromOrder($order);
			$this->createSchedulesFromProducts($order->getProducts());
			return "<script>document.location.replace('".MM_AccessControlEngine::getConfirmationUrlForOrder($order)."');</script>";
		}
		
	}


	/**
	 * Fetches a unique checkout code ( or "button id") from the Coinbase API
	 * 
	 * @param MM_Order $order for the order which is being purchased
	 * @param bool $isRebill whether this is the first time checking out for on order (false) or the 1+nth checkout for a subscription (true) 
	 * @return MM_ServicePaymentResponse with message containing a unique Coinbase checkout code if successful, false if not
	 */
	 protected function getCoinbaseCheckoutCode(MM_Order $order, $isRebill=false)
	 {
	 	global $wpdb;
		$orderItems = $order->getProducts();

		$recurringItems = null;
		if (version_compare(phpversion(),"5.4",">="))
		{
			$recurringItems = array_filter($orderItems,function($i){ return $i->isRecurring();});
		}
		else
		{
			$recurringItems = array_filter($orderItems,create_function('$i','return $i->isRecurring();'));
		}
		 
		try
		{
			$coinbase = Coinbase::withApiKey($this->getAPIKey(),$this->getAPISecret());
			$item = reset($orderItems);
			$product =  new MM_Product($item->getItemId());
			$request = $coinbase->createButton(
					(
					(count($orderItems)>1))? "Order no. ".$order->getOrderNumber() : $product->getName(),
					$this->getOrderTotal($order,$isRebill),
					$order->getCurrency(),
					$order->getId()."|".wp_hash("coinbase_ipn_auth_order_".$order->getId()),
					array(
						'style' => 'none',
						'type' => 'buy_now',
						'success_url' => home_url()."?mm_coinbaseminimal_redirect=".urlencode(MM_AccessControlEngine::getConfirmationUrlForOrder($order)),
						'cancel_url' => home_url()."?mm_coinbaseminimal_redirect=".urlencode(mm_purchase_link(array("productId"=>$product->getId()))),
						'callback_url' => MM_PLUGIN_URL."/x.php?service=coinbaseminimal&hash=".wp_hash("coinbaseminimal_ipn_auth"),
						'auto_redirect' => true
					)
				);
			if (!isset($request->button->code) || empty($request->button->code))
			{
				throw new Exception("No checkout button id returned");
			}
			$buttonId = $request->button->code;
		}
		catch(Exception $e)
		{
			error_log( "\n".date('m.d.Y h:i:s')."\n".print_r($e,true), 3, 'coinbase.log' );
			return new MM_PaymentServiceResponse("Coinbase API error:".$e->getMessage(),MM_PaymentServiceResponse::$ERROR);
		}
		
		$wpdb->insert(MM_TABLE_COINBASEMINIMAL_BUTTON_LINKS,array("order_id"=>$order->getId(),"button_id"=>$buttonId));
		return new MM_PaymentServiceResponse($buttonId);
	 }

	/**
	 * Fetches a unique bitcoin "receive address" from the Coinbase API
	 * 
	 * @param MM_Order $order for the order which is being purchased
	 * @param bool $isRebill whether this is the first time checking out for on order (false) or the 1+nth checkout for a subscription (true) 
	 * @return MM_ServicePaymentResponse with message containing a unique Coinbase checkout code if successful, false if not
	 */
	protected function getCoinbaseOrder(MM_Order $order, $isRebill=false)
	{
		global $wpdb;
		$buttonRequest = $this->getCoinbaseCheckoutCode($order,$isRebill);
		if (MM_PaymentServiceResponse::isSuccess($buttonRequest))
		{
			try
			{
				$coinbase = Coinbase::withApiKey($this->getAPIKey(),$this->getAPISecret());
				$coinbaseOrder = $coinbase->createOrderFromButtonCode($buttonRequest->message);
				$wpdb->update(MM_TABLE_COINBASEMINIMAL_BUTTON_LINKS, array("coinbase_order"=>json_encode($coinbaseOrder)), array("button_id"=>$buttonRequest->message));
				
				$bitcoinAddress = $coinbaseOrder->order->receive_address;
				$bitcoinAmount = $coinbaseOrder->order->total_btc->cents / 100000000;
				$bitcoinLink = "bitcoin:$bitcoinAddress?amount=$bitcoinAmount";
				$bitcoinQR = "https://chart.googleapis.com/chart?cht=qr&chl=".urlencode($bitcoinLink)."&choe=UTF-8&chs=170x170";
				return (object) array(
					"address" => $bitcoinAddress,
					"amount" => $bitcoinAmount,
					"link" => $bitcoinLink,
					"qr" => $bitcoinQR,
					"button_id" => $buttonRequest->message
				);
			}
			catch(Exception $e)
			{
				return new MM_PaymentServiceResponse("Coinbase API error:".$e->getMessage(),MM_PaymentServiceResponse::$ERROR);
			}
			
		}
		else
		{
			return $buttonRequest;
		}
	}
		
		
	/**
	 * Gets the total dollar amount for an order based on recurring/non-recurring, etc.
	 * Changes to total calculation can thus be made in place only
	 * 
	 * @param MM_Order $order for the order which is being purchased
	 * @param bool $isRebill whether this is the first time checking out for on order (false) or the 1+nth checkout for a subscription (true) 
	 * @return float total price
	 */
	 protected function getOrderTotal(MM_Order $order, $isRebill=false)
	 {
	 	$orderItems = $order->getProducts();
		$isSubscription = count($orderItems)==1 && reset($orderItems)->isRecurring();
		// total is zero if no products are in order
		if (empty($orderItems))
		{
			return 0;
		}
		// only charge the recurring amount, not one time taxes/shipping/etc
		elseif ($isSubscription && $isRebill)
		{
			return reset($orderItems)->getRecurringAmount();
		}
		// all others - charge standard
		else
		{
			return $order->getTotal();
		}
	 }

	#########################################
	# SCHEDULING
	#########################################
	
	/**
	 * Schedules a future payment (and a reminder for it) using the MemberMouse scheduling framework
	 *
	 * @param MM_OrderItem The item (representing a product) to use to generate the charge
	 * @param string $scheduleDate The date to schedule the charge to occur on. Must be a GMT date in a format parseable by the php strtotime function. Including a time is ok too, although timer resolution is controlled by the server
	 * @param int $paymentNumber Designates which payment this is. This information is stored in the scheduled event
	 *
	 * @return MM_Response indicating success or error
	 */
	protected function scheduleSubscriptionPayment(MM_OrderItem $aProductItem, $scheduleDate, $paymentNumber=2)
	{
		global $wpdb;
		$userId = MM_Order::getUserIdByOrderId($aProductItem->getOrderId());

		//schedule reminder
		foreach ($this->getReminderTimeBefore() as $emailNum=>$daysBefore)
		{
			if($daysBefore==0) continue;
			$reminderDate = date("Y-m-d H:i", (is_numeric($scheduleDate)?$scheduleDate:strtotime($scheduleDate))-($daysBefore*24*60*60));
			$scheduledReminder = new MM_ScheduledPaymentEvent();
			$scheduledReminder->setScheduledDate($reminderDate);
			$scheduledReminder->setPaymentNumber($paymentNumber);
			$scheduledReminder->setOrderItemId($aProductItem->getId());
			$scheduledReminder->setUserId($userId);
			$scheduledReminder->setPaymentServiceId($this->id);
			$reminderResult = $scheduledReminder->commitData(true);
			$wpdb->insert(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array(
				"id" => $scheduledReminder->getId(),
				"order_item_id" => $aProductItem->getId(),
				"type" => "reminder",
				"status" => "scheduled",
				"data" => serialize(array("emailNum"=>$emailNum))
			));
		}

		//schedule payment check
		$scheduledPayment = new MM_ScheduledPaymentEvent();
		$scheduledPayment->setScheduledDate($scheduleDate);
		$scheduledPayment->setPaymentNumber($paymentNumber);
		$scheduledPayment->setOrderItemId($aProductItem->getId());
		$scheduledPayment->setUserId($userId);
		$scheduledPayment->setPaymentServiceId($this->id);
		$paymentResult = $scheduledPayment->commitData(true);
		$wpdb->insert(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array(
			"id" => $scheduledPayment->getId(),
			"order_item_id" => $aProductItem->getId(),
			"type" => "payment",
			"status" => "scheduled"
		));
		return $paymentResult;
	}


	public function processScheduledPaymentEvent(MM_ScheduledPaymentEvent $paymentEvent)
	{
		global $wpdb;
		$orderItem = new MM_OrderItem($paymentEvent->getOrderItemId());
		$order = new MM_Order($orderItem->getOrderId());
		$currentRebillNumber = intval($paymentEvent->getPaymentNumber());
		$eventRecord = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS." WHERE id=%d",$paymentEvent->getId()));
		$eventType = isset($eventRecord->type)? $eventRecord->type : null;
		$eventData = isset($eventRecord->data)? maybe_unserialize($eventRecord->data) : array();

		if (!in_array($eventType,array('reminder','payment')))
		{
			return new MM_PaymentServiceResponse("Unable to detect type of Coinbase scheduled payment event.",MM_Response::$ERROR);
		}
		if (!$orderItem->isValid())
		{
			return new MM_PaymentServiceResponse("Invalid Subscription",MM_Response::$ERROR);
		}
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		// this is a email reminder event
		if ($eventType == 'reminder')
		{
			// make sure access hasn't been given by another recent order
			$latest_future_payment_date = $wpdb->get_col(
				"SELECT e.scheduled_date FROM mm_scheduled_payments as p ".
					"join mm_scheduled_events as e on p.id=e.id ".
					"join mm_order_items as oi on p.order_item_id=oi.id ".
					"join mm_bundle_products as bp on oi.item_id=bp.product_id ".
					"where e.scheduled_date > NOW() + INTERVAL 1 DAY ".
					"and p.user_id=".esc_sql($paymentEvent->getUserId())." ".
					"ORDER BY e.scheduled_date DESC LIMIT 0,1"
			);
			if( (strtotime($latest_future_payment_date)-time()) / DAY_IN_SECONDS > 10 )
			{
				$wpdb->update( MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS, array("status"=>"preempted"), array("id"=>$paymentEvent->getId()) );
				$eventRecord->status = "preempted";
			}
			// don't send if reminder has been processed or preempted by payment
			if (!isset($eventRecord->status) || $eventRecord->status!="scheduled")
			{
				return new MM_PaymentServiceResponse("Reminder email not sent since event status was: $eventRecord->status");
			}
			$emailNum = isset($eventData["emailNum"])? $eventData["emailNum"] : 0;
			$sendEmailResult = $this->sendEmailReminder($orderItem,$emailNum);
			if (MM_Response::isSuccess($sendEmailResult))
			{
				$paymentEvent->setStatus(MM_ScheduledEvent::$EVENT_PROCESSED);
				$paymentEvent->setProcessedDate(MM_Utils::getCurrentTime());
				$paymentEvent->commitData(false);
				$wpdb->update(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array("status"=>"processed"),array("id"=>$paymentEvent->getId()));
				return new MM_PaymentServiceResponse();
			}
			else
			{
				return new MM_PaymentServiceResponse("Sending reminder email failed",MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		// this is a payment event (checking if they paid after the reminder as requested)
		elseif ($eventType == 'payment')
		{
			// if this is the first time this event has come in, it means their payment is now due, so debit the order
			// (scheduled status indicates this is the first time MM is processing this event b/c otherwise it would have to be either failed or processed)
			if( $eventRecord->status == 'scheduled' )
			{
				$paymentLink = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_BUTTON_LINKS." WHERE order_id=%d ORDER BY id DESC LIMIT 1",$orderItem->getOrderId()));
				$buttonId = !is_null($paymentLink)? $paymentLink->button_id : null;
				$btcAmount = !is_null($paymentLink)? json_decode($paymentLink->coinbase_order)->order->total_btc->cents / 100000000 : null;
				// log debit
				$wpdb->insert(MM_TABLE_COINBASEMINIMAL_TRANSACTIONS,array(
					"order_id" => $orderItem->getOrderId(),
					"order_item_id" => $orderItem->getId(),
					"button_id" => $buttonId,
					"btc_amount" => -($btcAmount),
					"amount" => -($orderItem->getRecurringAmount()),
					"currency" => $order->getCurrency(),
					"transaction_date" => gmdate('Y-m-d H:i:s')
				));
			}
			
			$numberOfPayments = count($wpdb->get_results($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_TRANSACTIONS." WHERE order_item_id=%d AND mispaid_amount=0 AND amount > 0",$orderItem->getId())));
			$numberOfDebits = count($wpdb->get_results($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_TRANSACTIONS." WHERE order_item_id=%d AND amount < 0",$orderItem->getId())));
			// if they've paid (their payments are caught up with their number of rebillings)
			if ($numberOfPayments >= $numberOfDebits)
			{
				// mark event as processed and no action required
				$paymentEvent->setStatus(MM_ScheduledEvent::$EVENT_PROCESSED);
				$paymentEvent->setProcessedDate(MM_Utils::getCurrentTime());
				$paymentEvent->commitData(false);
				$wpdb->update(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array("status"=>"processed"),array("id"=>$paymentEvent->getId()));
				// schedule next payment event + reminders
				$this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
				return new MM_PaymentServiceResponse();
			}
			// if they haven't paid
			else
			{
				// update status so we know a debit has been created for this event - failed indicates a payment was due but not made
				$wpdb->update(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array("status"=>"failed"),array("id"=>$paymentEvent->getId()));
				// handle overdue - not sure what this does - do we need to send out another email reminder here?
				parent::handleOverdueSubscriptionItem($orderItem);
				// if this is the 2nd time we're checking (no payment had been sent first time), cancel/revoke
				if ($paymentEvent->getBillingStatus() >= MM_ScheduledPaymentEvent::$FIRST_REBILL_FAILED)
				{
					// make sure access hasn't been given by another order
					$current_bundles_ids_with_future_access = $wpdb->get_col(
						"SELECT bp.bundle_id FROM mm_scheduled_payments as p ".
							"join mm_scheduled_events as e on p.id=e.id ".
							"join mm_order_items as oi on p.order_item_id=oi.id ".
							"join mm_bundle_products as bp on oi.item_id=bp.product_id ".
							"where e.scheduled_date > NOW() + INTERVAL 1 DAY ".
							"and p.user_id=".esc_sql($paymentEvent->getUserId())." ".
							"GROUP BY bp.bundle_id"
					);
					$bundle_id_for_this_order = $wpdb->get_var("SELECT bundle_id from mm_bundle_products as bp where bp.product_id=".esc_sql($orderItem->getItemId()));
					if( is_null($bundle_id_for_this_order) || !in_array($bundle_id_for_this_order,$current_bundles_ids_with_future_access) ){
						$this->cancelSubscription($orderItem);
						MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
					}
				}
				return new MM_PaymentServiceResponse("Bitcoin payment has not been received",MM_PaymentServiceResponse::$ERROR);
			}
		}

	}
	
	protected function sendEmailReminder(MM_OrderItem $orderItem,$emailNum)
	{
		$order = new MM_Order($orderItem->getOrderId());
		$user = $order->getCustomer();
		$employee = MM_Employee::getDefault();
		$context = new MM_Context($user, $employee, $order);

		//TODO get saved payment info if it exists
		$paymentInfo = $this->getCoinbaseOrder($order,true);
		if (MM_PaymentServiceResponse::isError($paymentInfo))
		{
			return new MM_Response("Unable to create Coinbase order.",MM_Response::$ERROR);
		}
		$subject = $this->getReminderSubject($emailNum);
		//TODO add param to function and pass into getremindertext for which email to send
		$body = str_replace(
			"[MM_Bitcoin_Payment_Details]",
			"<p style='background:#f3f3f3; border:solid 1px #ddd; border-radius:5px; overflow:hidden;'>".
				"<a href='$paymentInfo->link' style='text-decoration:none;color:#333'>".
					"<span style='display:inline-block;padding:4px 8px;'>Exactly $paymentInfo->amount BTC (plus miner fee) to &rArr;</span>".
					"<span style='display:inline-block;padding:4px 8px;font-family:Courier,monospace;background:#ddd;float:right;'>$paymentInfo->address</span>".
				"</a>".
			"</p>",
			$this->getReminderText($emailNum)
		);
		
		$email = new MM_Email();
		$email->setContext($context);
		$email->setSubject($subject);
		$email->setBody($body);
		$email->setToName($user->getFirstName());
		$email->setToAddress($user->getEmail());
		$email->setFromName($employee->getDisplayName());
		$email->setFromAddress($employee->getEmail());
		    
		return $email->send();
	}

	
	
	#########################################
	# IPN
	#########################################
	
	/**
	 * Processes IPN notifications
	 * @see MM_PaymentService::processNotification()
	 * 
	 * @param $request array containing the IPN variables, generally a copy of the $_POST
	 * @return MM_PaymentServiceResponse indicating success or failure processing the IPN
	 */
	public function processNotification($request)
	{
		global $wpdb;
		$request = json_decode(file_get_contents('php://input'));

		//handle possible errors and save log
		if (!isset($_REQUEST['hash']) || $_REQUEST['hash'] != wp_hash('coinbaseminimal_ipn_auth'))
		{
			if ($this->logUnauthorizedIPNs==true) $this->logIPN($request);
			return new MM_PaymentServiceResponse("Invalid auth hash received for Coinbase IPN",MM_PaymentServiceResponse::$ERROR);	
		}
		if (!isset($request->order->custom))
		{
			if ($this->logUnauthorizedIPNs==true) $this->logIPN($request);
			return new MM_PaymentServiceResponse("No order-specific auth hash received in custom parameter slot for Coinbase IPN",MM_PaymentServiceResponse::$ERROR);	
		}
		else{
			$custom = isset($request->order->custom)? $request->order->custom : $request->recurring_payment->custom;
			$custom_data = explode('|',$custom);
			$custom_id = reset($custom_data);
			$custom_hash = end($custom_data);
			if($custom_hash != wp_hash("coinbase_ipn_auth_order_{$custom_id}")){
				if ($this->logUnauthorizedIPNs==true) $this->logIPN($request);
				return new MM_PaymentServiceResponse("Invalid order-specific auth hash received in custom parameter slot for Coinbase IPN",MM_PaymentServiceResponse::$ERROR);	
			}
		}
		if (is_null($request) || empty($request) || !isset($request->order->id) || !in_array($request->order->status,array(MM_CoinbaseMinimalService::$ORDER_STATUS_CANCELED,MM_CoinbaseMinimalService::$ORDER_STATUS_COMPLETED,MM_CoinbaseMinimalService::$ORDER_STATUS_EXPIRED,MM_CoinbaseMinimalService::$ORDER_STATUS_MISPAID)))
		{
			if ($this->logInvalidIPNs==true) $this->logIPN($request);
			return new MM_PaymentServiceResponse("Invalid or empty JSON received in Coinbase IPN",MM_PaymentServiceResponse::$ERROR);	
		}
		if( $this->isDuplicateIPN($request) )
		{
			if ($this->logDuplicateIPNs==true) $this->logIPN($request);
			return new MM_PaymentServiceResponse("Duplicate Coinbase IPN detected",MM_PaymentServiceResponse::$ERROR);
		}
		$ipnId = $this->logIPN($request);

		//get order data and items from ipn
		$orderId = $request->order->custom;
		$order = new MM_Order($orderId);
		if (!$order->isValid())
		{
			return new MM_PaymentServiceResponse("No valid order found for Coinbase IPN",MM_PaymentServiceResponse::$ERROR);
		}
		$orderItems = $order->getProducts();
		//get item data for single-item-recurring orders
		//we're counting on the fact that validateOrder didn't let any mixed recurring/non-recurring or multiple recurring orders get through
		$isSubscriptionPayment = count($orderItems)==1 && reset($orderItems)->isRecurring();
		$orderItem = reset($orderItems);
		$orderItemId = $orderItem->getId();
		
		//handle failed payments
		if ($request->order->status==MM_CoinbaseMinimalService::$ORDER_STATUS_CANCELED)
		{
			foreach ($orderItems as $revokeItem)
			{
				if ($revokeItem->isRecurring())
				{					
					$this->cancelSubscription($orderItem);
				}
				$revokeResponse = MM_AccessControlEngine::revokeAccessForOrderItem($item);
				$coinbaseReason = isset($request->order->cancellation_reason)? $request->order->cancellation_reason : "No reason provided.";
				return new MM_PaymentServiceResponse("Coinbase payment failed. $coinbaseReason",MM_PaymentServiceResponse::$FAILED);
			}
		}
		
		//handle mispayments
		if ($request->order->status==MM_CoinbaseMinimalService::$ORDER_STATUS_MISPAID )
		{
			$underpaidAmount = $request->order->total_btc->cents - $request->order->mispaid_btc->cents;
			$user = $order->getCustomer();
			$employee = MM_Employee::getDefault();
			$context = new MM_Context($user, $employee, $order);	
			//if it was overpaid, let admin know and treat it as successful
			if ($underpaidAmount <= 0)
			{				
 				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("Coinbase overpayment notfication");
				$email->setBody("This notification is to alert you that the user ".$order->getCustomer()->getUsername()." overpaid for order no. ".$order->getOrderNumber()." by ".($underpaidAmount/-100000000)." BTC. If you wish to refund their overpayment, you'll need to contact them for their bitcoin wallet address.");
				$email->setToAddress($employee->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
				$email->send();
				// set status to completed so it will fall through and grant access
				$request->order->status = MM_CoinbaseMinimalService::$ORDER_STATUS_COMPLETED;
			}
			//if it was underpaid, let user and admin know and don't give access
			else
			{			
				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("We didn't receive enough payment for your [MM_Order_Data name='productName'] purchase");
				$email->setBody("Hello [MM_Member_Data name='firstName'],\n\n Sorry - the amount you sent via bitcoin was ".($underpaidAmount/100000000)." BTC less than the order total. You'll need to check out again and make full payment in order to receive membership access (you can get a refund on the ".($request->order->mispaid_btc->cents/100000000)." BTC you already paid by replying with the bitcoin wallet address you'd like the refund sent to). \n\n Thank you!\n [MM_Employee_Data name='displayName']");
				$email->setToName($user->getFirstName());
				$email->setToAddress($user->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
			    $email->send();
				
 				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("Coinbase underpayment notfication");
				$email->setBody("This notification is to alert you that the user ".$order->getCustomer()->getUsername()." underpaid for order no. ".$order->getOrderNumber()." by ".($underpaidAmount/100000000)." BTC. They were not granted access and have been notified that they need to resend payment in full and send you their bitcoin wallet address if they want to receive a refund on the ".($request->order->mispaid_btc->cents/100000000)." BTC they already paid.");
				$email->setToAddress($employee->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
				$email->send();
				return new MM_PaymentServiceResponse("Insufficient payment detected in Coinbase IPN",MM_PaymentServiceResponse::$ERROR);
			}
		}

		//handle expired payments
		if ($request->order->status==MM_CoinbaseMinimalService::$ORDER_STATUS_EXPIRED )
		{
			$underpaidAmount = $request->order->total_btc->cents - $request->order->mispaid_btc->cents;
			$user = $order->getCustomer();
			$employee = MM_Employee::getDefault();
			$context = new MM_Context($user, $employee, $order);				
			//if it was paid correctly, let admin know and treat it as successful
			if ($underpaidAmount <= 0)
			{				
 				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("Coinbase expired payment notfication");
				$email->setBody("This notification is to alert you that the user ".$order->getCustomer()->getUsername()." sent a bitcoin payment for order no. ".$order->getOrderNumber()." which was not confirmed until after the Coinbase transaction had expired. Their payment appeared to be in the correct amount and successful though, so they have been granted access. You may wish to verify that the bitcoin deposit was indeed received as expected.");
				$email->setToAddress($employee->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
				$email->send();
				// set status to completed so it will fall through and grant access
				$request->order->status = MM_CoinbaseMinimalService::$ORDER_STATUS_COMPLETED;
			}
			//if it was underpaid, let user and admin know and don't give access
			else
			{
 				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("We didn't receive enough payment for your [MM_Order_Data name='productName'] purchase");
				$email->setBody("Hello [MM_Member_Data name='firstName'],\n\n Sorry - the amount you sent via bitcoin was ".($underpaidAmount/100000000)." BTC less than the order total. You'll need to check out again and make full payment in order to receive membership access (you can get a refund on the ".($request->order->mispaid_btc->cents/100000000)." BTC you already paid by replying with the bitcoin wallet address you'd like the refund sent to). \n\n Thank you!\n [MM_Employee_Data name='displayName']");
				$email->setToName($user->getFirstName());
				$email->setToAddress($user->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
			    $email->send();
				
 				$email = new MM_Email();
				$email->setContext($context);
				$email->setSubject("Coinbase underpayment notfication");
				$email->setBody("This notification is to alert you that the user ".$order->getCustomer()->getUsername()." underpaid for order no. ".$order->getOrderNumber()." by ".($underpaidAmount/100000000)." BTC. They were not granted access and have been notified that they need to resend payment in full and send you their bitcoin wallet address if they want to receive a refund on the ".($request->order->mispaid_btc->cents/100000000)." BTC they already paid.");
				$email->setToAddress($employee->getEmail());
				$email->setFromName($employee->getDisplayName());
				$email->setFromAddress($employee->getEmail());
				$email->send();
				return new MM_PaymentServiceResponse("Insufficient payment detected in Coinbase IPN",MM_PaymentServiceResponse::$ERROR);
			}
		}

		//handle succesful payments
		if ($request->order->status==MM_CoinbaseMinimalService::$ORDER_STATUS_COMPLETED)
		{
			$numberOfBillings = count($wpdb->get_results($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS." WHERE order_item_id=%d AND type='payment'",$orderItemId)));
			//handle access for subscription payments + preempt any scheduled email reminders (must be done before scheduling new ones!) + schedule payment event if first time
			if ($isSubscriptionPayment)
			{
				$wpdb->update(MM_TABLE_COINBASEMINIMAL_SCHEDULED_EVENTS,array("status"=>"preempted"),array("status"=>"scheduled","order_item_id"=>$orderItemId,"type"=>"reminder"));
				if ($numberOfBillings == 0)
				{
					$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
					$this->createSchedulesFromProducts($orderItems);
				}
				// or assign access and restart schedule if this is a payment on an expired order
				elseif ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING)
				{
					$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
					$billingNumberOffset = is_numeric($orderItem->getTrialDuration()) && $orderItem->getTrialDuration()>0 ? 1 : 2;
					$this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $numberOfBillings + $billingNumberOffset);
				}
			}
			//handle access for non-subscription payments (e.g. bundles)
			else{
				$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
			}
			
		}

		//log transaction in service specific table + general transactions table - this will occur for completed and mispaid orders
		$transaction = array(
			"item_id" => ( count($orderItems)==1? $orderItemId : null ),
			"type" => ( $isSubscriptionPayment? MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT : MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT ),
			"description" => ($numberOfBillings>0?"Recurring payment":"Payment") ." for order# {$order->getOrderNumber()}",
			"amount" => $request->order->total_native->cents/100,
			"currency" => $request->order->total_native->currency_iso,
			"btc_amount" => $request->order->total_btc->cents / 100000000,
			"mispaid_amount" => ( $request->order->status=='mispaid'? $request->order->mispaid_native->cents/100 : null )
		);
		$wpdb->insert(MM_TABLE_COINBASEMINIMAL_TRANSACTIONS,array(
			"order_id" => $order->getId(),
			"order_item_id" => $transaction["item_id"],
			"button_id" => $request->order->button->id,
			"amount" => $transaction["amount"],
			"currency" => $transaction["currency"],
			"btc_amount" => $transaction["btc_amount"],
			"mispaid_amount" => $transaction["mispaid_amount"],
			"transaction_date" => gmdate('Y-m-d H:i:s')
		));
		$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(), $transaction['item_id'], $transaction['amount'], $transaction['currency'], $transaction['description'], $transaction['type'], true, $this->getId(), $ipnId);
		return new MM_PaymentServiceResponse($transactionLogResponse->message,($transactionLogResponse->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR);

	}
	
	
	/**
	 * Logs an IPN request. This is necessary for duplicate detection, potentially for troubleshooting,
	 * and for detecting # of times a subscription has been billed
	 * 
	 * @param object $request This is an object decoded from the JSON in the raw IPN POST data (null if invalid JSON) 
	 * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
	 */
	protected function logIPN($request) 
	{
		global $wpdb;
		if (isset($request->order))
		{
			$insertData = array(
				"button_id" => $request->order->button->id,
				"ipn_transaction_id" => $request->order->id,
				"ipn_content" => file_get_contents("php://input"),
				"ipn_status" => $request->order->status,
				"received" => gmdate('Y-m-d H:i:s'),
				"error" => ($request->order->status=="completed"? null : '')
			);
		}
		else
		{
			$insertData = array(
				"error" => "",
				"ipn_content" => file_get_contents("php://input"),
				"received" => gmdate('Y-m-d H:i:s')
			);
		}
		
		$wpdb->insert(MM_TABLE_COINBASEMINIMAL_IPN_LOG,$insertData);
		return $wpdb->insert_id;
	}
	
	
	/**
	 * Detects whether this IPN has been received or not
	 * 
	 * @param array $request The IPN request.
	 * @return boolean true if this is a duplicate, false otherwise
	 */
	protected function isDuplicateIPN($request)
	{
		global $wpdb;
		//try to acquire an ipn-specific lock; if no lock then another ipn for this item is already taking place
		$lockName = "mm_coinbaseminimal_ipn_lock-".md5("{$request->order->id}");
		$lockAcquired = $wpdb->get_var($wpdb->prepare("SELECT COALESCE(GET_LOCK(%s,0),0)",$lockName));
		if ($lockAcquired == "1")
		{
			$isDuplicate = !is_null( $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_COINBASEMINIMAL_IPN_LOG." WHERE ipn_content=%s",file_get_contents('php://input'))) );
			$wpdb->query($wpdb->prepare("SELECT RELEASE_LOCK(%s)",$lockName));
		}
		else
		{
			$isDuplicate = true;
		}
		return $isDuplicate;
	}

	#########################################
	# FRONTEND
	#########################################

	function refundTransaction($transactionId)
	{
		return new MM_PaymentServiceResponse("Bitcoin transactions are non-refundable",MM_PaymentServiceResponse::$ERROR);	
	}
	
	
	/**
	 * Redirect Coinbase return urls without the extra parameters Coinbase adds on since they trigger a WP_Query warning
	 * In the future this could be made to output a form with a js submit so that the parameters would be available to the end page without
	 * interfering with the WP GET query string mechanism. 
	 */
	function doInitHook()
	{
		if (isset($_GET['mm_coinbaseminimal_redirect']) && !empty($_GET['mm_coinbaseminimal_redirect']))
		{
			header("Location: $_GET[mm_coinbaseminimal_redirect]\r\n");
			exit;
		}
	}
	
}

