/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * This class serves as a data model for the MM_ReportPiechart class, and any future piechart-like visual elements 
 * The piechart data model is very simple; You have a collection of slices that each have a numeric value associated with them.
 * These slices are then passed to the piechart visual element which then renders those slices according to what percentage the slice value is 
 * of the whole. So if you have 4 slices, each with a numeric value of 50, each slice will be rendered as 25% of the pie. 
 */
class MM_ReportPiechartModel
{
	
	protected $slices = array();
	
	/**
	 * Creates the model from a wpdb resultset, which is either an array of objects or an array or arrays. The method internally detects
	 * what format the resultset is in and creates the model
	 * 
	 * @param array $resultSet
	 * @param String $titleName The name of the column in the resultset to use as the title for each slice
	 * @param String $valueName The name of the column in the resultset to use as the value for each slice
	 * @return boolean true or false if the model was created properly. It IS possible for the model to be partially created and error out in the middle
	 */
	public function setSlicesFromResultset($resultSet,$titleName,$valueName)
	{
		if (!is_array($resultSet))
		{
			return false;
		}
		
		foreach ($resultSet as $sliceValues)
		{
			if (is_object($sliceValues) && isset($sliceValues->$titleName) && isset($sliceValues->$valueName))
			{
				$this->addSlice($sliceValues->$titleName, $sliceValues->$valueName);
			}
			else if (is_array($sliceValues) && !empty($sliceValues[$titleName]) && !empty($sliceValues[$valueName]))
			{
				$this->addSlice($sliceValues[$titleName], $sliceValues[$valueName]);
			}
			else 
			{
				return false; //not a proper resultset
			}
		}
		return true;
	}
	
	
	/**
	 * Add the data for a slice of the piechart to the model
	 * 
	 * @param String $title The title of the slice
	 * @param String $numericValue The numeric value of the slice to use in determining the slice proportions
	 */
	public function addSlice($title, $numericValue)
	{
		$sliceObj = new stdClass();
		$sliceObj->title = $title;
		$sliceObj->value = $numericValue;
		$this->slices[] = $sliceObj;	
	}
	
	
	/**
	 * Returns all the slice in the model as an array of objects. Each object has a 'title' and a 'value' property
	 */
	public function getSlices()
	{
		return $this->slices;
	}
}
