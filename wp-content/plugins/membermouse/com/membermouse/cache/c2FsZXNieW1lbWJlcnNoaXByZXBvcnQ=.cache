/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_SalesByMembershipReport extends MM_AdvancedReportBase 
{
	
	//protected $visualElements = array("MM_ReportDataGrid","MM_ReportBarChart","MM_ReportPieChart");
	protected $visualElements = array("MM_ReportDataGrid","MM_ReportBarChart");
	
	public static $SALESBYMEMBERSHIP_REPORT_DATAGRID = "sales_by_membership_datagrid";
	public static $SALESBYMEMBERSHIP_REPORT_BARCHART = "sales_by_membership_barchart";
	//public static $SALESBYMEMBERSHIP_REPORT_PIECHART = "sales_by_membership_piechart";
	
	
	//query identifiers
	public static $SALES_BY_MEMBERSHIP_QUERY = "sales_by_membership_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$SALESBYMEMBERSHIP_REPORT_DATAGRID:
				return $this->renderSalesByMembershipReportDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			case self::$SALESBYMEMBERSHIP_REPORT_BARCHART:
				return $this->renderSalesByMembershipReportBarchart($elementIdentifier, $params, $width, $height, $directives);
				break;
			case self::$SALESBYMEMBERSHIP_REPORT_PIECHART:
				return $this->renderSalesByMembershipReportPiechart($elementIdentifier, $params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderSalesByMembershipReportDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SALES_BY_MEMBERSHIP_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$gridHeaders = array("membership_name"=>array('label'=>"Membership Level"),"member_count"=>array('label'=>"Members"),"revenue"=>array('label'=>"Revenue",'columnType'=>'money'));
		$grid = MM_ReportDatagrid::createFromData(self::$SALESBYMEMBERSHIP_REPORT_DATAGRID, $gridHeaders, $dataResponse,$directives);
		//$grid->setGridTitle("Revenue by Membership");
		$grid->setShowHeaderRow(false);
		return new MM_ReportResponse($grid->render());
	}
	
	
	public function renderSalesByMembershipReportBarchart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SALES_BY_MEMBERSHIP_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		$column = MM_ReportColumnChart::createFromTopResults($elementIdentifier, "membership_name", "revenue", 10, $dataResponse);
		$column->setCurrencyValues(true);
		$column->setValueAxisTitle("Sales in ".MM_CurrencyUtil::getActiveCurrency());
		$column->setCategoryAxisTitle("Membership Levels");
		return new MM_ReportResponse($column->render());
	}
	
	
	public function renderSalesByMembershipReportPiechart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SALES_BY_MEMBERSHIP_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		$pie = MM_ReportPieChart::createFromTopResults($elementIdentifier, "membership_name", "revenue", 10, $dataResponse);
		return new MM_ReportResponse($pie->render());
	}
	
	
	/**
	 * Generate the data for the Sales by Membership report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateSalesByMembershipReportData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Sales By Membership report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Sales By Membership report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$userdataTable = MM_TABLE_USER_DATA;
		$ordersTable = MM_TABLE_ORDERS;
		$membershipLevelsTable = MM_TABLE_MEMBERSHIP_LEVELS;
		
		$startTime = strtotime($params['start_date']);
		$endTime = strtotime($params['end_date']);
		
		$startDate = date("Y-m-d 00:00",$startTime); //mysql format
		$endDate =   date("Y-m-d 23:59:59",$endTime);
		
		//filter configuration
		$filter_type = empty($params['filter_type'])?'both':$params['filter_type'];
		switch ($filter_type)
		{
		    case 'initial':
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT);
		        break;
		    case 'rebills':
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT);
		        break;
		    default:
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT);
		}
		$transactionTypeString = implode(",",$transactionTypes);
		
		//gets the members and total revenue from transactions linked to users having a membership (optionally including recurring payments) for transactions that occur within a date range
		//refund items do not count against the total. 
		
		$sql = "SELECT Q.id AS membership_level_id, Q.name AS membership_name, Q.revenue, X.member_count FROM ".
			   "(SELECT ml.id, ml.name, ABS(SUM(t.amount)) AS revenue FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON ".
			   "(t.order_id = o.id) INNER JOIN {$userdataTable} mud ON (o.user_id = mud.wp_user_id) INNER JOIN {$membershipLevelsTable} ml ".
			   "ON (mud.membership_level_id = ml.id) WHERE t.transaction_type IN ({$transactionTypeString}) AND (t.transaction_date BETWEEN %s AND %s) ".
			   "GROUP BY ml.id) AS Q INNER JOIN (SELECT count(distinct o1.user_id) AS member_count, mud1.membership_level_id FROM ".
			   "{$transactionsTable} t1 INNER JOIN {$ordersTable} o1 ON (t1.order_id = o1.id) INNER JOIN {$userdataTable} mud1 ON ".
			   "(o1.user_id = mud1.wp_user_id) WHERE t1.transaction_type IN ({$transactionTypeString}) AND (t1.transaction_date BETWEEN %s AND %s) ".
			   "GROUP BY mud1.membership_level_id) AS X ON (Q.id = X.membership_level_id) ORDER BY Q.revenue DESC";
		$results = $wpdb->get_results($wpdb->prepare($sql,$startDate,$endDate,$startDate,$endDate),ARRAY_A);
		
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$results);
		return $dataset;
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$SALES_BY_MEMBERSHIP_QUERY:
				return self::generateSalesByMembershipReportData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

