/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
* 
* 
* MM_ReportCategoryValueModel is meant to be an object-oriented representation of a set, 
* containing one or pairs of data
*/
class MM_ReportCategoryValueModel extends MM_AbstractReportDataModel
{

	protected $values = array();
	protected $title = "";
	
	
	public function addValues($category, $value)
	{
		$this->values[] = array('category'=>$category, 'value'=>$value);
	}


	public function getValues()
	{
		return $this->values;
	}


	public function setValues($values)
	{
		$this->values = $values;
	}
	
	
	/**
	 * Creates a model containing the records in the supplied array
	 * 
	 * @param array $results The records that will be used to create the model
	 * @param string $categoryFieldName The name of the category column (in the supplied results)
	 * @param string $valueFieldName The name of the value column (in the supplied results)
	 * 
	 * @return MM_ReportCategoryValueModel on success, boolean false on error
	 */
	public static function createFromData($results,$categoryFieldName, $valueFieldName)
	{
		$model = new MM_ReportCategoryValueModel();
		if (!is_array($results))
		{	
			return false;
		}
		
		foreach ($results as $v)	
		{
			if (isset($v[$categoryFieldName]) && isset($v[$valueFieldName]))
			{
				$model->addValues($v[$categoryFieldName], $v[$valueFieldName]);
			}
		}
		return $model;
	}
	
	
	/**
	 * Creates a model containing the top $numRecords records in the supplied array when it is sorted descending using the value field
	 * 
	 * @param array $results The results to extracts the records that will be used to create the model
	 * @param string $categoryFieldName The name of the category column (in the supplied results)
	 * @param string $valueFieldName The name of the value column (in the supplied results)
	 * @param integer $numRecords The number of records to return
	 * 
	 * @return an instance of MM_ReportCategoryValueModel on success, boolean false on error
	 */
	public static function createFromTopResults($results, $categoryFieldName, $valueFieldName, $numRecords)
	{
		if (!is_array($results))
		{
			return false;
		}
		
		self::sortResults($results, $valueFieldName, self::$SORT_DESC);
		if (is_int($numRecords) && (count($results) > $numRecords))
		{
			$results = array_slice($results,0,$numRecords,true);
		}
		return self::createFromData($results, $categoryFieldName, $valueFieldName);
	}
	
	
	public function getTitle() 
	{
		return $this->title;
	}
	
	
	public function setTitle($title) 
	{
		$this->title = $title;
	}
	
	
	
	
	
}


