/**
 * 
 * The Affiliate Provider Factory does the work of retrieving and configuring an Affiliate Provider implementation
 *
 */
class MM_AffiliateProviderFactory 
{	
	/**
	 * Returns the active Affiliate Provider
	 */
	public static function getActiveProvider() {
		global $wpdb;
		
		$provider_info = $wpdb->get_row("select * from ".MM_TABLE_AFFILIATE_PROVIDERS." where active='1' limit 1");
		
		return self::_getProvider($provider_info);
	}
	
	/**
	 * Returns a specific Affiliate Provider, regardless of whether it is the active provider or not
	 * @param String $provider_token The provider token identifying the provider in the database
	 */
	public static function getProvider($provider_token) {
		global $wpdb;
		
		$provider_info = $wpdb->get_row($wpdb->prepare("select * from ".MM_TABLE_AFFILIATE_PROVIDERS." where provider_token=%s",$provider_token));
		
		return self::_getProvider($provider_info);
	}
	
	/**
	 * 
	 * Internal function used to determine the correct class to use and to instantiate, initialize, and return it
	 * @param String $provider_info 
	 */
	private static function _getProvider($provider_info) {
		$provider_token = $provider_info->provider_token;
		switch($provider_token) 
		{
			case "idevaffiliate":
				return new MM_IDevAffiliateProvider($provider_info);
			case "default":
				return new MM_DefaultAffiliateProvider($provider_info);
			default:
				return null;
				
		}
	} 
	
}

