/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_PaymentUtilsView extends MM_LoggedInUserView
{
	public static $MM_JSACTION_CHECK_IF_PAYMENT_REQUIRED = "checkIfPaymentRequired";
	public static $MM_JSACTION_GET_PAYMENT_OPTIONS_LIST = "getPaymentOptionsList";
	public static $MM_JSACTION_CHANGE_MEMBERSHIP_STATUS = "changeMembershipStatus";
	public static $MM_JSACTION_CHANGE_BUNDLE_STATUS = "changeBundleStatus";
	public static $MM_JSACTION_PLACE_ORDER_CARD_ON_FILE = "placeOrderCardOnFile";
	public static $MM_JSACTION_APPLY_FREE_BUNDLE = "applyFreeBundle";
	
	protected static $PAYMENT_OPTIONS_MODULE = "payment_options";
	protected static $PAYMENT_CONFIRMATION_MODULE = "payment_confirmation";

	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_PLACE_ORDER_CARD_ON_FILE:
					return $this->placeOrderCardOnFile($post);
					
				case self::$MM_JSACTION_CHECK_IF_PAYMENT_REQUIRED:
					return $this->checkIfPaymentRequired($post);
					
				case self::$MM_JSACTION_GET_PAYMENT_OPTIONS_LIST:
					return $this->getPaymentOptionsList($post);
					
				case self::$MM_JSACTION_CHANGE_MEMBERSHIP_STATUS:
					return $this->changeMembershipStatus($post);
					
				case self::$MM_JSACTION_CHANGE_BUNDLE_STATUS:
					return $this->changeBundleStatus($post);
					
				case self::$MM_JSACTION_APPLY_FREE_BUNDLE:
					return $this->applyFreeBundle($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	public function checkIfPaymentRequired($post)
	{
		if(!isset($post["accessType"]) || !isset($post["accessTypeId"]))
		{
			return new MM_Response("Cannot check if payment is required. Parameters access type and access type ID are required.", MM_Response::$ERROR);
		}
		
		if($post["accessType"] == MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP)
		{
			$membership = new MM_MembershipLevel($post["accessTypeId"]);
			
			if($membership->isValid())
			{			
				return new MM_Response(!$membership->isFree(), MM_Response::$SUCCESS);
			}
			else
			{
				return new MM_Response("Failed to check payment requirements. Invalid membership level ID '{$post["accessTypeId"]}'.", MM_Response::$ERROR);
			}
		}
		else if($post["accessType"] == MM_AccessControlEngine::$ACCESS_TYPE_BUNDLE)
		{
			$bundle = new MM_Bundle($post["accessTypeId"]);
				
			if($bundle->isValid())
			{
				return new MM_Response(!$bundle->isFree(), MM_Response::$SUCCESS);
			}
			else
			{
				return new MM_Response("Failed to check payment requirements. Invalid bundle ID '{$post["accessTypeId"]}'.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Failed to check payment requirements. Invalid access type '{$post["accessType"]}'.", MM_Response::$ERROR);
		}
	}
	
	public function getPaymentOptionsList($post)
	{
		if(!isset($post["mm_product_id"]) || !isset($post["mm_user_id"]))
		{
			return new MM_Response("Cannot get payment options list. Parameters product ID and user ID are required.", MM_Response::$ERROR);
		}
		
		$html = "";
		$user = new MM_User($post["mm_user_id"]);
		$product = new MM_Product($post["mm_product_id"]);
		
		// billing description
		if($product->isValid())
		{
			$html .= '<div style="margin-bottom:10px;">';
			$html .= '<span class="mm-section-header" style="font-size:15px;">';
			$html .= MM_Utils::getIcon('money', 'blue', '1.2em', '1px');
			$html .= ' Billing Description</span>';
			$html .= '<div style="margin-top:5px; margin-left:20px;">';
			$html .= $product->getBillingDescription();
			$html .= '</div>';
			$html .= '</div>';
		}
		
		// add affiliate info section
		$html .= '<div style="margin-bottom:10px;">';
		$html .= '<span class="mm-section-header" style="font-size:15px;">';
		$html .= MM_Utils::getIcon('bullhorn', 'blue', '1.1em', '1px');
		$html .= ' Credit Affiliate</span>';
		$html .= '<div style="margin-top:5px; font-size:11px; margin-left:20px;"><table cellspacing="5"><tr>';
		$html .= '<td>1st Tier <span style="font-family:courier;"><input type="text" id="mm-affiliate" size="15" /></span></td>';
		$html .= '<td>2nd Tier <span style="font-family:courier;"><input type="text" id="mm-subaffiliate" size="15" /></span></td>';
		$html .= '</tr></table></div>';
		$html .= '</div>';
		
		// payment options
		$html .= '<div style="margin-bottom:10px;">';
		$html .= '<span class="mm-section-header" style="font-size:15px;">Payment Options</span>';
		$html .= '<div style="margin-top:5px; margin-left:20px;">';
		
		if($user->isValid() && $user->hasCardOnFile()) 
		{ 
			$url = "javascript:pymtutils_js.showAdminPaymentConfirmation({$user->getId()}, {$post["mm_product_id"]});";
			
			$html .= '<p>';
			$html .= '<a href="'.$url.'" class="mm-ui-button blue">';
			$html .= MM_Utils::getIcon('credit-card', '', '1.1em', '1px');
			$html .= ' Bill Card on File';
			$html .= '</a>';
			$html .= '</p>';
		}
		
		$checkoutPageUrl = MM_CorePageEngine::getCheckoutPageStaticLink($post["mm_product_id"]);
		$adminCheckoutPageUrl = MM_Utils::appendUrlParam($checkoutPageUrl, MM_Session::$PARAM_USER_ID, $user->getId());
		
		$context = new MM_Context($user);
		$emailCheckoutPageUrl = MM_SmartTagUtil::processContent("[MM_Purchase_Link productId='{$post["mm_product_id"]}' autoLogin='true']", $context);
		
		$html .= '<p>';
		$html .= '<a href="javascript:goToCheckoutPage(\''.$adminCheckoutPageUrl.'\')" class="mm-ui-button blue">';
		$html .= MM_Utils::getIcon('edit', '', '1.1em', '1px');
		$html .= ' Enter Customer\'s Billing Information';
		$html .= '</a>';
		$html .= '</p>';
		
		$html .= '<p>';
		$html .= MM_Utils::getIcon('link', '', '1.1em', '1px');
		$html .= " Copy <a href='http://support.membermouse.com/support/solutions/articles/9000020549-auto-login-links-and-login-tokens' target='_blank'>Auto-Login</a> Checkout Link:<br/>";
		$html .= "<input id=\"mm-checkout-url\" type=\"text\" readonly value=\"".$emailCheckoutPageUrl."\" onclick=\"jQuery('#mm-checkout-url').focus(); jQuery('#mm-checkout-url').select();\" style=\"width:400px; font-family:courier !important; font-size:11px !important;\" />";
		$html .= '</p>';
		
		$html .= '<p>';
		$html .= '<a href="javascript:sendEmail(\''.$emailCheckoutPageUrl.'\')" class="mm-ui-button blue">';
		$html .= MM_Utils::getIcon('envelope', '', '1.1em', '1px');
		$html .= 'Email Checkout Link to the Customer';
		$html .= '</a>';
		$html .= '</p>';
		
		$html .= '</div>';
		
		return new MM_Response($html, MM_Response::$SUCCESS);
	}
	
	public function changeMembershipStatus($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_new_status"]))
		{
			$user = new MM_User($post["mm_id"]);
			$loggedInUser = MM_Utils::getCurrentUser();
			
			// for security reasons make sure the user that's logged in is requesting this
			if($loggedInUser->isValid() && $user->getId() == $loggedInUser->getId())
			{
				$result = MM_AccessControlEngine::changeMembershipStatus($user, $post["mm_new_status"]);
				
				if(MM_Response::isSuccess($result))
				{
					$response = new MM_Response();
					
					$response->message = "Your account has been ".MM_Status::getName($post["mm_new_status"], true)." successfully";
					
					if(isset($post["mm_redirect_url"]))
					{
						$response->url = $post["mm_redirect_url"];
					}
					
					return $response;
				}
				else
				{
					if(!empty($result->message))
					{
						return $result;
					}
					else
					{
						if($post["mm_new_status"] == MM_Status::$CANCELED)
						{
							$statusType = "cancelling";
						}
						else if($post["mm_new_status"] == MM_Status::$PAUSED)
						{
							$statusType = "pausing";
						}
						
						return new MM_Response("There was an error {$statusType} your account. Please contact customer support for assistance.", MM_Response::$ERROR);
					}
				}
			}
			else 
			{
				return new MM_Response("Invalid authorization.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error changing membership status. Member ID and new status are required.", MM_Response::$ERROR);
		}
	}
	
	public function changeBundleStatus($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_bundle_id"]) && isset($post["mm_new_status"]))
		{
			$user = new MM_User($post["mm_id"]);
			$bundle = new MM_Bundle($post["mm_bundle_id"]);
			$newStatus = intval($post["mm_new_status"]);
			$loggedInUser = MM_Utils::getCurrentUser();
			
			// for security reasons make sure the user that's logged in is requesting this
			if($loggedInUser->isValid() && $user->getId() == $loggedInUser->getId())
			{
				if($newStatus == MM_Status::$CANCELED || $newStatus == MM_Status::$PAUSED)
				{
					$result = MM_AccessControlEngine::removeBundleFromUser($user, $bundle, $newStatus);
					
					if(MM_Response::isSuccess($result))
					{
						$response = new MM_Response();
							
						$response->message = "'{$bundle->getName()}' has been successfully ".MM_Status::getName($newStatus, true);
							
						if(isset($post["mm_redirect_url"]))
						{
							$response->url = $post["mm_redirect_url"];
						}
							
						return $response;
					}
					else
					{
						if($post["mm_new_status"] == MM_Status::$CANCELED)
						{
							$statusType = "cancelling";
						}
						else if($post["mm_new_status"] == MM_Status::$PAUSED)
						{
							$statusType = "pausing";
						}
							
						return new MM_Response("There was an error {$statusType} bundle '{$post["mm_bundle_id"]}'. Please contact customer support for assistance.", MM_Response::$ERROR);
					}
				}
			}
			else 
			{
				return new MM_Response("Invalid authorization.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error changing bundle status. Member ID, bundle ID and new bundle status are required.", MM_Response::$ERROR);
		}
	}
	
	public function applyFreeBundle($post)
	{
		if(isset($post["mm_id"]) && isset($post["mm_bundle_id"]))
		{
			$user = new MM_User($post["mm_id"]);
			$bundle = new MM_Bundle($post["mm_bundle_id"]);
			$loggedInUser = MM_Utils::getCurrentUser();
			
			// for security reasons make sure the user that's logged in is requesting this
			if($loggedInUser->isValid() && $user->getId() == $loggedInUser->getId())
			{
				// verify that bundle is valid
				if($bundle->isValid())
				{
					if($bundle->isFree())
					{
						$result = MM_AccessControlEngine::assignBundleToUser($user, $bundle);
						
						if(MM_Response::isSuccess($result))
						{
							$response = new MM_Response();
								
							$response->message = "'{$bundle->getName()}' has been successfully applied to your account";
								
							if(isset($post["mm_redirect_url"]))
							{
								$response->url = $post["mm_redirect_url"];
							}
								
							return $response;
						}
						else
						{
							return new MM_Response("There was an error applying the '{$bundle->getName()}' bundle to your account. Please contact customer support for assistance.", MM_Response::$ERROR);
						}
					}
					else
					{
						return new MM_Response("Error applying free bundle. Bundle '{$bundle->getName()}' is not free.", MM_Response::$ERROR);
					}
				}
				else
				{
					return new MM_Response("Error applying free bundle. Bundle ID {$post["mm_bundle_id"]} is not valid.", MM_Response::$ERROR);
				}
			}
			else 
			{
				return new MM_Response("Invalid authorization.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error applying free bundle. Member ID and bundle ID are required.", MM_Response::$ERROR);
		}
	} 
	
	
	/**
	 * Given an order that previously was placed successfully, returns an appropriate response
	 * 
	 * @param MM_Order $dupOrder The previously successful order
	 * 
	 * @return MM_Response of type Success with the url parameter set to the appropriate confirmation url
	 */
	protected function restorePreviousResponse(MM_Order $dupOrder,$userId,$mutexId)
	{
		$result = new MM_Response();
		
		$source = isset($post["mm_source"])?$post["mm_source"]:"user";
		
		// get the confirmation url
		$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($dupOrder);
		
		if($source == "admin")
		{
			$msg = urlencode("Order placed successfully");
			$confirmationUrl = MM_ModuleUtils::getUrl(MM_MODULE_MANAGE_MEMBERS, MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS);
			$confirmationUrl .= "&user_id={$userId}&message={$msg}&dup={$mutexId}";
			$result->url = $confirmationUrl;
		}
		else 
		{
			$result->url = $confirmationUrl;
		}
		return $result;
	}
	
	
	/**
	 * Create an order from POST variables, and charge it if the customer has a card on file
	 * 
	 * @param array $post Array representing the collected POST variables
	 * @return MM_PaymentServiceResponse indicating success, failure, or error creating and charging the order
	 */
	public function placeOrderCardOnFile($post)
	{
		global $current_user;
		
		$isCustomerSupportOrder = false;
		if(isset($post["mm_source"]) && $post["mm_source"] == "admin")
		{
			$employee = MM_Employee::findByUserId($current_user->ID);
			if(is_user_logged_in() && $employee->canPlaceSupportOrder() && isset($post['mm_user_id']) && is_numeric($post['mm_user_id']))
			{
				$isCustomerSupportOrder = true;
				$customer = new MM_User($post['mm_user_id']);
			}
			else
			{
				$errorMessage = _mmt("You don't have permission to place an order for another user");
				return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
			}
		}
		else 
		{
			$customer = MM_Utils::getCurrentUser();
			if ($customer == null)
			{
				//should never happen since loggedinuserview guarantees us a logged-in user at a lower level
				$errorMessage = _mmt("There was an error placing your order; Please try again");
				return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		$mutexId = "";
		$isDuplicate = false;
		$shouldUseLocking = false;
		
		if(!empty($post["mm_submission_mutex"]))
		{
			$mutexId = $post["mm_submission_mutex"];
			$shouldUseLocking = true;
		}
		
		if ($shouldUseLocking)
		{
			$lockAcquired = MM_Utils::acquireDBLock($mutexId);
			if (!$lockAcquired)
			{
				//log that the lock couldn't be acquired
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Attempted to lock order processing during checkout, but the lock was not able to be acquired");
			}
			
			if (MM_Order::hasFormSubmissionId($mutexId, $customer->getId()))
			{
				$isDuplicate = true;
			}
			
			if (!$isDuplicate)
			{
				$result = $this->_placeOrderCardOnFile($post,$customer,$isCustomerSupportOrder);
			}
			else 
			{
				//an order with this submission id has been detected in the database, look up the status and return appropriate result
				$previousOrder = MM_Order::getOrderByUserAndFormSubmissionId($mutexId, $customer->getId());
				if ($previousOrder->getOrderStatus() == MM_Order::$PAID_COMPLETE)
				{
					$result = $this->restorePreviousResponse($previousOrder,$customer->getId(),$mutexId);
				}
				else
				{
					//this request was already processed but was not successful, attempt to send it again
					$result = $this->_placeOrderCardOnFile($post,$customer,$isCustomerSupportOrder);
				}
			}
			
			if ($lockAcquired)
			{
				MM_Utils::releaseDBLock($mutexId);
			}
			
			if (!($result instanceof MM_PaymentServiceResponse))
			{
				$result = MM_PaymentServiceResponse::translate($result);
			}
			return $result;
		}
		else 
		{
			$result = $this->_placeOrderCardOnFile($post,$customer,$isCustomerSupportOrder);
			if (!($result instanceof MM_PaymentServiceResponse))
			{
				$result = MM_PaymentServiceResponse::translate($result);
			}
			return $result;
		}
	}
	
	
	/**
	 * This method contains the business logic of placing a card-on-file order
	 * 
	 * @param array $post
	 * @return MM_PaymentServiceResponse containing success, failure, or error
	 */
	protected function _placeOrderCardOnFile($post,MM_User $customer, $isCustomerSupportOrder=false)
	{
		global $wpdb;
		
		$userHasCardOnFile = false;
		$storedCardPaymentService = null;
		$productId = 0;
		$isGift = false;
		$source = "";
		
		if(!isset($post["mm_source"]))
		{
			return new MM_PaymentServiceResponse("Invalid source", MM_PaymentServiceResponse::$ERROR);
		}
		$source = $post["mm_source"];
		
		if(!$customer->isValid())
		{
			return new MM_PaymentServiceResponse("Invalid customer", MM_PaymentServiceResponse::$ERROR);
		}
		
		if (isset($post['mm_product_id']))
		{
			$productId = $post['mm_product_id'];
		}
		$product = new MM_Product($productId);
		if (!$product->isValid())
		{
			return new MM_PaymentServiceResponse("Invalid product", MM_PaymentServiceResponse::$ERROR);
		}
		
		if(isset($post['mm_is_gift']))
		{
			$isGift = ($post['mm_is_gift'] == "true") ? true : false;
		}
		
		if(!$isGift)
		{
			$checkNoBlockingOrderResponse = MM_User::canPlaceOrder ( $customer->getId(), $productId, false,  $isCustomerSupportOrder, true );
			if (! MM_Response::isSuccess ( $checkNoBlockingOrderResponse ))
			{
				return MM_PaymentServiceResponse::translate ( $checkNoBlockingOrderResponse );
			}
		}
		
		$findCardOnFileServiceSQL = "SELECT payment_service_id FROM ".MM_TABLE_CARD_ON_FILE." where user_id=%s";
		$storedCardPaymentServiceId = $wpdb->get_var($wpdb->prepare($findCardOnFileServiceSQL,$customer->getId()));
		if (!is_null($storedCardPaymentServiceId))
		{
			$storedCardPaymentService = MM_PaymentServiceFactory::getPaymentServiceById($storedCardPaymentServiceId);
			if (!is_null($storedCardPaymentService) && $storedCardPaymentService->isActive())
			{
				//we need to determine if the payment service the user has a card on file with is active
				$userHasCardOnFile = true;
			}
		}
		
		if (!$userHasCardOnFile)
		{
			return new MM_PaymentServiceResponse("No card on file found", MM_PaymentServiceResponse::$ERROR);
		}
		
		// if execution reachs this point, the customer is valid as well as at least one product, and the customer
		// has a card on file with an active payment service
		$order = new MM_Order();
		
		// save mutex id to aid in prevention of duplicate form submissions
		if (!empty($post["mm_submission_mutex"]))
		{
			$order->setFormSubmissionId($post["mm_submission_mutex"]);
		}
		
		// set the customer
		$order->setCustomer($customer);
		
		//add the product
		$product_quantity = 1; //should be the actual quantity if that is being collected
		$order->addProduct($product, $product_quantity, $isGift);
		
		$order->setBillingAddress($order->getCustomer()->getCardOnFileBillingAddress());
		
		// get shipping address
		if($product->isShippable())
		{
			$order->setShippable(true);
			$shippingAddress = $customer->getFullShippingAddress();
		
			if(isset($post['mm_field_shipping_method']))
			{
				$order->setShippingMethodFromKey($post['mm_field_shipping_method']);
			}
		
			if(!empty($post["mm_field_shipping_address"]))
			{
				$order->setShippingSameAsBilling(false);
		
				if(isset($post['mm_field_shipping_address']))
				{
					$shippingAddress->setAddressLine1($post['mm_field_shipping_address']);
				}
		
				if(isset($post['mm_field_shipping_city']))
				{
					$shippingAddress->setCity($post['mm_field_shipping_city']);
				}
		
				if(isset($post['mm_field_shipping_state']))
				{
					$shippingAddress->setState($post['mm_field_shipping_state']);
				}
		
				if(isset($post['mm_field_shipping_zip']))
				{
					$shippingAddress->setPostalCode($post['mm_field_shipping_zip']);
				}
		
				if(isset($post['mm_field_shipping_country']))
				{
					$shippingAddress->setCountry($post['mm_field_shipping_country']);
				}
			}
				
			$order->setShippingAddress($shippingAddress);
		}
		else
		{
			$order->setShippingSameAsBilling(true);
		}
		
		//add the coupon (if any)
		$coupon_code = isset($post['mm_field_coupon_code']) ? $post['mm_field_coupon_code'] : "";
		if (!empty($coupon_code))
		{
			$coupon = MM_Coupon::getDataByCode($coupon_code);
			if($coupon->isValid() && MM_Coupon::hasAvailableCoupon($coupon->getCouponCode()) && $coupon->hasProduct($product->getId()))
			{
				$order->addCoupon($coupon);
			}
		}
		
		//add the card-on-file payment service
		$order->setPaymentMethod($storedCardPaymentService);
		
		// add affiliate and subaffiliate ids (if applicable)
		// check if there's a manual override to set the affiliate IDs
		$affiliateId = "";
		$subaffiliateId = "";
		if(isset($post["mm_affiliate"]))
		{
			$affiliateId = $post["mm_affiliate"];
		}
		else if($source != "admin")
		{
			$affiliateId = MM_Cookies::getAffiliateValue();
		}
		
		if(isset($post["mm_subaffiliate"]))
		{
			$subaffiliateId = $post["mm_subaffiliate"];
		}
		else if($source != "admin")
		{
			$subaffiliateId = MM_Cookies::getSubAffiliateValue();
		}
		
		if (!empty($affiliateId))
		{
			$order->setAffiliateId($affiliateId);
		}
		
		if (!empty($subaffiliateId))
		{
			$order->setSubAffiliateId($subaffiliateId);
		}
		
		//commit the order
		$orderCommitResult = $order->commitData();
		
		if(MM_Response::isSuccess($orderCommitResult))
		{
			// collect/save custom data
			foreach($post as $key=>$value)
			{
				if(preg_match("/(custom_)/", $key) && !preg_match("/(helper)/", $key) && !preg_match("/(label)/", $key)
						&& !preg_match("/(required)/", $key) && !preg_match("/(type)/", $key))
				{
					$customFieldId = preg_replace("/[^0-9]+/", "", $key);
					$order->getCustomer()->setCustomData(intval($customFieldId), stripslashes($value));
				}
			}
		}
		
		//now charge it
		$orderResult = $storedCardPaymentService->chargeOrder($order);
		$result = new MM_Response();
		
		if ($orderResult->getStatus() == MM_PaymentServiceResponse::$SUCCESS)
		{
			$assignAccessResult = MM_AccessControlEngine::assignAccessFromOrder($order);
				
			if(MM_Response::isSuccess($assignAccessResult))
			{
				$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
			}
			else
			{
				$result->type = MM_Response::$ERROR;
					
				$msg = "Payment for order number {$order->getOrderNumber()} was successful but there was an error granting access to your content";
					
				if($assignAccessResult->message)
				{
					$msg .= ": ".$assignAccessResult->message;
				}
					
				$result->message = $msg;
			}
		}
		else
		{
			$result->type = MM_Response::$ERROR;
				
			$errorMsg = $orderResult->getMessage();
			if(!empty($errorMsg))
			{
				$result->message = $errorMsg;
			}
			else
			{
				$result->message = "Unable to charge the card on file";
			}
		}
		
		if(MM_Response::isSuccess($result))
		{
			if($source == "user")
			{
				$result->url = $confirmationUrl;
			}
			else if($source == "admin")
			{
				$msg = urlencode("Order placed successfully");
				$confirmationUrl = MM_ModuleUtils::getUrl(MM_MODULE_MANAGE_MEMBERS, MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS);
				$confirmationUrl .= "&user_id={$order->getCustomer()->getId()}&message={$msg}";
				$result->url = $confirmationUrl;
			}
		}
		return $result;
	}
	
	
	public function addDialogContainers()
	{
		echo "<div id=\"mm-payment-options-dialog\"></div>\n".
			 "<div id=\"mm-payment-confirmation-dialog\"></div>\n".
			 "<script>\n". 
			 "	jQuery(document).ready(function(){\n".
			 "		if(jQuery.isFunction(\"dialog\")) {\n".
			 "			jQuery(\"#mm-payment-options-dialog\").dialog({autoOpen: false});\n".
			 "			jQuery(\"#mm-payment-confirmation-dialog\").dialog({autoOpen: false});\n".
			 "		}\n".
			 "	});\n".
			 "</script>\n";
	}
	
	
	/**
	 * Override base showDialog method to allow limited ability to call methods from other views
	 * {@inheritDoc}
	 * @see MM_View::showDialog()
	 */
	protected function showDialog($post) 
	{
		$info = $this->createValueObjectFromRequest($post);
		$allowedModules = array(self::$PAYMENT_OPTIONS_MODULE, self::$PAYMENT_CONFIRMATION_MODULE);
		$requestedModule = (isset($post[self::$MM_JSMODULE]))?$post[self::$MM_JSMODULE]:"";
		if (!empty($requestedModule) && in_array($requestedModule,$allowedModules))
		{
			return MM_TEMPLATE::generate(MM_MODULES."/{$requestedModule}.dialog.php", $info);
		}
		else 
		{
			return parent::showDialog($post);
		}
	}
}