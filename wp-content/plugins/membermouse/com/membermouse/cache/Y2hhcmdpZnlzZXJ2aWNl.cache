/**
*
* MemberMouse(TM) (http://www.membermouse.com)
* (c) Membermouse, LLC. All rights reserved.
* 
* MM_ChargifyService is the payment service that processes charges for Chargify (www.chargify.com)
* Because Chargify is focused on providing recurring billing, somme capabilities are not supported by this service, 
* specifically purchasing multiple quantities of a single product and purchasing multiple products in general. The latter is due to the api
* accepting each subscription request as a second call, which creates a scenario where timeouts are potentially possible
* 
*/
class MM_ChargifyService extends MM_PaymentService implements MM_MemberMouseEventListener
{

	protected $token = "CHARGIFY";
	
	protected $api_key = "";
	protected $subdomain = "";
	
	protected $productFamilyId = "";
	
	protected $sharedKey = "";
	
	private $productCache = array();
	
	//states used in the subscription webhook payloads
	const ACTIVE_STATE   = "active";
	const PAST_DUE_STATE = "past_due";
	
	public function install()
	{
		//TODO: REFACTOR: INDEX, INDEX, INDEX!
		
		parent::install();
		$sql = "CREATE TABLE ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." (\n".
					"chargify_product_api_handle VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
					"membermouse_product_id bigint(20) NOT NULL,\n".
					"UNIQUE KEY chargify_product_api_handle (chargify_product_api_handle),\n".
					"UNIQUE KEY membermouse_product_id (membermouse_product_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		$sql .= "CREATE TABLE ".MM_TABLE_CHARGIFY_CUSTOMER_LINKS." (\n".
					"chargify_customer_id VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
					"membermouse_customer_id bigint(20) NOT NULL,\n".
					"UNIQUE KEY chargify_customer_id (chargify_customer_id),\n".
					"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		$sql .= "CREATE TABLE ".MM_TABLE_CHARGIFY_COUPON_LINKS." (\n".
					"chargify_coupon_id VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
					"membermouse_coupon_id bigint(20) NOT NULL,\n".
					"UNIQUE KEY chargify_coupon_id (chargify_coupon_id),\n".
					"UNIQUE KEY membermouse_coupon_id (membermouse_coupon_id)\n".
					") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		$sql .= "CREATE TABLE ".MM_TABLE_CHARGIFY_SUBSCRIPTION_LINKS." (\n".
				"chargify_subscription_id VARCHAR(255) COLLATE utf8_bin NOT NULL,\n".
				"membermouse_order_id bigint(20) NOT NULL,\n".
				"membermouse_order_item_id bigint(20),\n".
				"UNIQUE KEY chargify_subscription_id (chargify_subscription_id)".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		$sql .= "CREATE TABLE ".MM_TABLE_CHARGIFY_NOTIFICATIONS." (\n".
					"id bigint(20) NOT NULL,\n".
					"webhook_id VARCHAR(255) NOT NULL,\n".
					"event_type varchar(32) NOT NULL,\n".
					"PRIMARY KEY  (id)\n".
					") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		dbDelta($sql);
	}
	
	/**
	 * Used to report what features the Chargify Service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param String $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::MODIFY_REBILL_DATE;
		return in_array($featureConst,$supported,true);
	}
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Chargify
	 * @see MM_PaymentService::displayConfigOptions()
	 *
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/chargify_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post)
	{
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);
	
		if ($active)
		{
			$this->install();
			$config = $post['payment_service']['chargify'];
			$check_not_empty = array('api_key'=>'API Key', 'subdomain'=>'Subdomain','product_family'=>'Product Family','shared_key'=>"Shared Key");
			$empty_errors = "";
			foreach ($check_not_empty as $check=>$displayName)
			{
				if (!isset($config[$check]) || empty($config[$check]))
				{
					$empty_errors = "Chargify: please enter a value for {$displayName}\n";
				}
			}
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			//if here, that means they are all ok
			$this->setApiKey($config['api_key']);
			$this->setSubdomain($config['subdomain']);
			$this->setProductFamilyId($config['product_family']);
			$this->setSharedKey($config['shared_key']);
		}
		return new MM_Response();
	}
	
	
	/**
	 * Processes information from the settings screen prior to the payment service settings being saved. Allows for 
	 * data to be retrieved from Chargify using ajax during the configuration process
	 * 
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS containing any requested data as the message, or a MM_Response of type ERROR on failure
	 */
	public function processIntermediateAction($post)
	{
		if ((!isset($post['payment_service']['chargify'])) || !(is_array($post['payment_service']['chargify'])))
		{
			return new MM_Response("No chargify configuration information sent to processIntermediateAction",MM_Response::$ERROR);
		}
		$config = $post['payment_service']['chargify'];
		
		//TODO: REFACTOR: how to sanity check these values?
		if (!empty($config['api_key']) && !empty($config['subdomain']))
		{
			$this->setApiKey($config['api_key']);
			$this->setSubdomain($config['subdomain']);
		}
		
		$productFamiliesResponse = $this->getProductFamilies(true);
		return $productFamiliesResponse;
	}
	
	
	/**
	 * Processes notifications from Chargify, currently using webhooks
	 * 
	 * Webhooks are simple POSTs of Chargify objects containing event and state information
	 * According to the api documentation, valid live and problem subscription states are 'trialing', 'assessing',
	 * 'active', 'soft_failure', 'past_due', and 'unpaid'. Valid end-of-life states are 'canceled', 'suspended','trial_ended', and 'expired'. 
	 * By tracking successful renewals and subscription state changes between live/problem and end-of-life states, MemberMouse can capture all 
	 * of the data it needs
	 * 
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param $request array containing the POSTed variables, generally a copy of the $_POST
	 * @return MM_PaymentServiceResponse indicating success or failure processing the notification
	 */
	public function processNotification($request)
	{
		//grab the signature from the request headers
		$signature = $this->parseWebhookSignatureFromHeaders();
		$signature = (empty($signature) && !empty($_GET['signature']))?$_GET['signature']:$signature; //if we couldnt read it from the headers, try the $_GET
		if (empty($signature))
		{
			return new MM_PaymentServiceResponse("Unable to locate X-Chargify-Webhook-Signature in the sent headers (or the query string), possible forged request",MM_PaymentServiceResponse::$ERROR);
		}
		
		//the signature is an md5 of the shared key concatenated with the raw request, validate it
		$rawRequest = file_get_contents("php://input");
		$calculatedSignature = md5($this->getSharedKey().$rawRequest);
		if ($signature !== $calculatedSignature)
		{
			return new MM_PaymentServiceResponse("Unable to validate webook due to signature mismatch, possible forged request",MM_PaymentServiceResponse::$ERROR);
		}
		
		//at this point, we can assume the webhook is valid, so make sure there is an id and it hasnt been processed before
		if (empty($request['id']))
		{
			return new MM_PaymentServiceResponse("Unable to process webhook, no id was found",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($this->isDuplicateWebhook($request))
		{
			return new MM_PaymentServiceResponse("Duplicate webhook: This webhook has already been processed"); //its not technically an error, return success
		}
		
		//now figure out what happened and respond to it
		$eventType = !empty($request['event'])?$request['event']:"";
		
		switch ($eventType)
		{
			case 'payment_success':
				break;
			case 'payment_failure':
				break;
			case 'renewal_success':
				//log the renewal as a successful rebill. Currently MemberMouse doesn't have a scheduler, hence doesn't generate regular charges.
				//Therefore, we need to make two entries in the transactions table (using the $balance flag) to create a charge to apply the payment against
				$subscriptionId = (!empty($request['subscription']['id']))?$request['subscription']['id']:"";
				if (empty($subscriptionId))
				{
					return new MM_PaymentServiceResponse("Unable to process Chargify renewal webhook, no subscription id found",MM_PaymentServiceResponse::$ERROR);
				}
				$orderItemId = $this->lookupOrderItemFromSubscriptionId($subscriptionId);
				$orderItem = new MM_OrderItem(empty($orderItemId)?"":$orderItemId);
				if (is_null($orderItemId) || (!$orderItem->isValid()))
				{
					return new MM_PaymentServiceResponse("Unable to process Chargify renewal webhook, no order item found matching subscription id {$subscriptionId}",MM_PaymentServiceResponse::$ERROR);
				}
				$paymentAmount = number_format((intval($request['subscription']['balance_in_cents'])/100),2); //convert to dollars, fix decimals
				$order = new MM_Order($orderItem->getOrderId());
				$transactionDescription = "Recurring payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
				$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(),$orderItemId, $paymentAmount, $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->getId(),$ipnId);
				break;
			case 'renewal_failure':
				break;
			case 'subscription_state_change':
				$subscriptionId = (!empty($request['subscription']['id']))?$request['subscription']['id']:"";
				if (empty($subscriptionId))
				{
					return new MM_PaymentServiceResponse("Unable to process Chargify subscription_state_change webhook, no subscription id found",MM_PaymentServiceResponse::$ERROR);
				}
				$orderItemId = $this->lookupOrderItemFromSubscriptionId($subscriptionId);
				$orderItem = new MM_OrderItem(empty($orderItemId)?"":$orderItemId);
				if (is_null($orderItemId) || (!$orderItem->isValid()))
				{
					return new MM_PaymentServiceResponse("Unable to process Chargify subscription_state_change webhook, no order item found matching subscription id {$subscriptionId}",MM_PaymentServiceResponse::$ERROR);
				}
				$order = new MM_Order($orderItem->getOrderId());
				$previousState = !empty($request['subscription']['previous_state'])?$request['subscription']['previous_state']:"";
				$currentState  = !empty($request['subscription']['state'])?$request['subscription']['state']:"";
				$previousStateClassification = $this->classifySubscriptionState($previousState);
				$currentStateClassification  = $this->classifySubscriptionState($currentState);
				//we only care about applying access when moving from the end-of-life to live state (problem state is informational), or revoking access when moving in the other direction
				if (($currentStateClassification === 'live') && ($previousStateClassification !== 'live'))
				{
					$accessModificationResponse = MM_AccessControlEngine::assignAccessFromOrderItems($order->getCustomer(), array($orderItem));
					return new MM_PaymentServiceResponse($accessModificationResponse->message,($accessModificationResponse->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR);
				}
				else if (($currentStateClassification === 'end-of-life') && ($previousStateClassification !== 'end-of-life'))
				{
					$accessModificationResponse = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
					return new MM_PaymentServiceResponse($accessModificationResponse->message,($accessModificationResponse->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR);
				}
				else 
				{
					//we dont care what happened. Either the current state is unknown, so we can't act anyway, or the state hasn't changed
					return new MM_PaymentServiceResponse();
				}
				break;
			case 'subscription_product_change':
				//TODO: REFACTOR: use this as a future hook to catch membership change from the other side?
				break;
			default:
				//There are other events sent by Chargify, but we are not currently interested in them
				return new MM_PaymentServiceResponse();
				break;
		}
		return new MM_PaymentServiceResponse(); //shouldnt ever reach here
	}
	
	
	/**
	 * Returns whether the supplied subscription state is classified as 'live' or 'end-of-life'. For MemberMouse purposes, 
	 * the 'problem' state is treated as informational only, and rolled into the 'live' classification
	 * 
	 * Chargify classifications are taken from http://docs.chargify.com/subscription-states
	 * 
	 * @param string $subscriptionState The state the subscription is in
	 * @return string with the classification of the state. Will be 'live','end-of-life' or 'unknown'
	 */
	protected function classifySubscriptionState($subscriptionState)
	{
		$subscriptionState = !empty($subscriptionState)?strtolower($subscriptionState):""; //deal with null and improper casing simultaneously
		switch ($subscriptionState)
		{
			case 'trialing':
			case 'assessing':
			case 'active':
			case 'soft_failure':
			case 'past_due':
			case 'unpaid':
				return 'live';
				break;
			case 'canceled':
			case 'suspended':
			case 'trial_ended':
			case 'expired':
				return 'end-of-life';
				break;
			default:
				return 'unknown';
		}
		return 'unknown';
	}
	
	/**
	 * Parse the HTTP headers and return the value of the X-Chargify-Webhook-Signature
	 * @return string containing the value of the X-Chargify-Webhook-Signature if it exists, otherwise an empty string
	 */
	protected function parseWebhookSignatureFromHeaders()
	{
		$headers = headers_list();
		foreach ($headers as $header)
		{
			if (strpos($header,"X-Chargify-Webhook-Signature") !== false)
			{
				$split = explode(":",$header,2);
				if (count($split) == 2)
				{
					$signature = trim($split[1]);
					return $signature;
				}
			}
		}
		return "";
	}
	
	
	protected function isDuplicateWebhook($request)
	{
		global $wpdb;
		
		//make sure we have an id to check. This needs to be checked higher up, but in case for some reason it isnt, return false if id doesnt exist...
		if (empty($request['id']))
		{
			return false;
		}
		$dupCheckSQL = "select count(*) from ".MM_TABLE_CHARGIFY_NOTIFICATIONS." where webhook_id=%s";
		$numDupes = $wpdb->get_var($wpdb->prepare($dupCheckSQL,$request['id']));
		return ($numDupes>0);
	} 
	
	
	/**
	 * Creates a subscription on chargify from the provided order
	 * @see MM_PaymentService::chargeOrder()
	 * 
	 * @param MM_Order $order The order to use to create the charge/subscription
	 * @param MM_CardInfo $cardInfo The credit card info to use to charge the order
	 * @param boolean $validate Whether or not to validate the order before charging it
	 * @return MM_PaymentServiceResponse representing the result of the attempt to charge the customer
	 * 
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo, $validate=true)
	{
		global $wpdb;
		
		parent::chargeOrder($order,$cardInfo,$validate);
		
		$cardValidation = $cardInfo->validate();
		if ($cardValidation !== true)
		{
			return new MM_PaymentServiceResponse($cardValidation,MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerLinkSQL = "select chargify_customer_id, membermouse_customer_id from ".MM_TABLE_CHARGIFY_CUSTOMER_LINKS." where membermouse_customer_id=%d";
		$customerResults = $wpdb->get_row($wpdb->prepare($customerLinkSQL,$order->getCustomer()->getId()));
		$chargifyCustomerId = null;
		if ($customerResults != null)
		{
			$tmpCustomerId = $customerResults->chargify_customer_id;
			$res = $this->getRemoteCustomerById($customerResults->chargify_customer_id);
			if ($res->type !== MM_Response::$ERROR)
			{
				//found the customer id; for now lets assume its good
				$chargifyCustomerId = $tmpCustomerId;
			}
		}
		else 
		{
			//no link was found in the db, try to retrieve customer by email
			$res = $this->getRemoteCustomerByEmail($order->getCustomer()->getEmail());
			if ($res->type === MM_Response::$SUCCESS)
			{
				$chargifyCustomerId = $res->message->id;  
			}
		}
		
		//if the customer already exists, we have their chargify customer id now, so iterate through the products and create subscriptions
		$orderProducts = $order->getProducts();
		if (count($orderProducts) < 1)
		{
			return new MM_PaymentServiceResponse("Error charging order: No products!",MM_PaymentServiceResponse::$ERROR);
		}
		
		//separate coupons into the product they apply to. $productSpecificCoupons is a hashtable, keyed by product id. Entries are arrays of coupons to apply to each product
		$productSpecificCoupons = array(); 
		
		//global coupons apply to all products
		$globalCoupons = array();
		
		$coupons = $order->getCoupons();
		
		foreach ($coupons as $couponId=>$couponItem)
		{
			$tmpCoupon = new MM_Coupon($couponId);
			if ($tmpCoupon->isValid())
			{
				$tmpCoupon->getAssocProducts();
				$tmpCouponProducts = $tmpCoupon->getProducts();
				if (count($tmpCouponProducts) < 1)
				{
					$globalCoupons[] = $tmpCoupon;
				}
				else
				{
					foreach ($tmpCouponProducts as $couponProductId)
					{
						$productSpecificCoupons[$couponProductId][] = $tmpCoupon;
					}
				}
			}
		}
		
		$this->populateProductCache($orderProducts);
		
		$firstProductItem = array_pop($orderProducts);
		$firstCoupon = null;
		if (isset($productSpecificCoupons[$firstProductItem->getItemId()]))
		{
			$firstCoupon = reset($productSpecificCoupons[$firstProductItem->getItemId()]);
		}
		else if (count($globalCoupons) > 0)
		{
			$firstCoupon = reset($globalCoupons);
		}
		$firstProductResponse = $this->createRemoteSubscription($order, $firstProductItem,$chargifyCustomerId,$cardInfo,$firstCoupon);
		if ($firstProductResponse->status != MM_PaymentServiceResponse::$SUCCESS)
		{
			return $firstProductResponse;
		}
		//update first product status
		$firstProductItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
		$firstProductItem->commitData();
		
		$paymentProfileId = (isset($firstProductResponse->credit_card->id))?$firstProductResponse->credit_card->id:null;
		
		//now charge the rest of the products
		foreach ($orderProducts as $nextProduct)
		{
			if (is_null($paymentProfileId))
			{
				$productResponse = $this->createRemoteSubscription($order, $nextProduct,$chargifyCustomerId,$cardInfo);
			}
			else
			{
				$productResponse = $this->createRemoteSubscription($order, $nextProduct,$chargifyCustomerId,null,$paymentProfileId);
			}
			
			if ($productResponse->status != MM_PaymentServiceResponse::$SUCCESS)
			{
				return $productResponse;
			}
			$nextProduct->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$nextProduct->commitData();
		}
		
		//at this point, the code should have bailed if there were any errors, so report success
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Create a product cache to save on database access later using the supplied array
	 * 
	 * @param array $productsArray An array of MM_Products or MM_OrderItems (or both)
	 */
	private function populateProductCache($productsArray)
	{
		global $wpdb;
		
		if (!is_array($productsArray))
		{
			return false;
		}
		
		$productIds = array();
		foreach ($productsArray as $eachProduct)
		{
			if ($eachProduct instanceof MM_Product)
			{
				$eachId = $eachProduct->getId();
				if ($eachId >0)
				{
					$productIds[] = $eachId;
				}
			}
			else if (($eachProduct instanceof MM_OrderItem) && ($eachProduct->getItemType() == MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT))
			{
				$productIds[] = $eachProduct->getItemId();
			}
		}
		
		$productIdString = implode(",",$productIds);
		$productCacheSQL = "select chargify_product_api_handle, membermouse_product_id from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." where membermouse_product_id IN (%s)";
		$res = $wpdb->get_results($wpdb->prepare($productCacheSQL,$productIdString));
		if ($wpdb->num_rows)
		{
			foreach ($res as $productLink)
			{
				$this->productCache[$productLink->membermouse_product_id] = $productLink->chargify_product_api_handle;
			}
		}
		return true;
	}
	
	/**
	 * Returns the api key used to authenticate to chargify
	 */
	public function getApiKey()
	{
		return $this->api_key;
	}
	
	/**
	 * Sets the api key used to authenticate to chargify
	 * @param String $api_key
	 */
	public function setApiKey($api_key)
	{
		$this->api_key = $api_key;
	}
	
	/**
	 * Returns the subdomain used to identify the chargify account
	 */
	public function getSubdomain()
	{
		return $this->subdomain;
	}
	
	/**
	 * Sets the subdomain used to identify the chargify account
	 * @param String $subdomain
	 */
	public function setSubdomain($subdomain)
	{
		$this->subdomain = $subdomain;
	}
	
	
	/**
	 * getProductFamilies
	 * Returns the product families stored by chargify on the server
	 * 
	 * @return MM_Response containing an array of product families on success, or an error message on failure
	 */
	public function getProductFamilies($returnAsHtmlOptions=false)
	{
		$productFamiliesResponse = $this->doHTTPRequest($this->getChargifyUrl()."/product_families.json","GET","",$this->getJSONOptions());
		if ($productFamiliesResponse->type != MM_Response::$ERROR)
		{
			//returned successfully, decode json and return result in the response
			$familiesArray = json_decode($productFamiliesResponse->message,true);
			$newFamiliesArray = array();
			foreach ($familiesArray as $eachFamily) //reindex by api handle
			{
				$familyId = $eachFamily['product_family']['id']; 
				$newFamiliesArray[$familyId] = ($returnAsHtmlOptions)?$eachFamily['product_family']['name']:$eachFamily['product_family'];				
			}
			$productFamiliesResponse->message = ($returnAsHtmlOptions)?MM_HtmlUtils::generateSelectionsList($newFamiliesArray):$newFamiliesArray;
		}
		return $productFamiliesResponse;
	}
	
	
	/**
	 * Retrieves products from Chargify and returns them in an array
	 * 
	 * @return MM_Response containing an array of chargify product objects (indexed by api handle) on success, or a descriptive error message on failure
	 */
	public function getProducts()
	{
		$productResponse = $this->doHTTPRequest($this->getChargifyUrl()."/product_families/{$this->getProductFamilyId()}/products.json","GET","",$this->getJSONOptions());
		if ($productResponse->type != MM_Response::$ERROR)
		{
			$productsArray = json_decode($productResponse->message);
			$newProductsArray = array();
			foreach ($productsArray as $eachProduct)
			{
				$handle = $eachProduct->product->handle; 
				$newProductsArray[$handle] = $eachProduct->product;
			}
			$productResponse->message = $newProductsArray;
		}
		return $productResponse;
	}
	
	
	/**
	 * Returns the product family id used by Chargify
	 * 
	 * @return String The product family id
	 */
	public function getProductFamilyId()
	{
		return $this->productFamilyId;
	}
	
	
	/**
	 * Sets the product family id used by Chargify
	 * 
	 * @param String $productFamilyId 
	 */
	public function setProductFamilyId($productFamilyId)
	{
		$this->productFamilyId = $productFamilyId;
	}
	
	
	/**
	 * Returns the shared key used to validate webhooks
	 * @return string The shared key
	 */
	public function getSharedKey()
	{
		return $this->sharedKey;
	}
	
	
	/**
	 * Sets the shared key used to validate webhooks
	 * @param String $sharedKey The shared key
	 */
	public function setSharedKey($sharedKey)
	{
		$this->sharedKey = $sharedKey;
	}
	
	
	private function getChargifyUrl()
	{
		return "https://{$this->subdomain}.chargify.com";
	}
	
	protected function getJSONOptions()
	{
		$options = array(CURLOPT_HTTPHEADER         => array("Accept:application/json","Content-Type:application/json"),
						 CURLOPT_USERPWD        => $this->getApiKey() . ":x",
						 CURLOPT_FOLLOWLOCATION => false,
						 CURLOPT_MAXREDIRS      => 1
						);
		return $options;
	}
	
	
	/**
	 * Respond to events generated by MemberMouse
	 * 
	 * @see MM_MemberMouseEventListener::eventReceived()
	 * @param $eventType An event constant enumerated in MM_MemberMouseEventListener
	 * @param $eventData Any data associated with the event
	 * @return MM_Response indicating success or failure processing the event
	 */
	public function eventReceived($eventType, $eventData)
	{
		$response = new MM_Response("Error processing event",MM_Response::$ERROR);
		switch ($eventType)
		{
			case MM_MemberMouseEventListener::PRODUCT_ADDED:
			case MM_MemberMouseEventListener::PRODUCT_UPDATED:
				$response = $this->createRemoteProduct($eventData);
				break;
			case MM_MemberMouseEventListener::PRODUCT_REMOVED:
				$response = $this->archiveRemoteProduct($eventData);
				break;
			case MM_MemberMouseEventListener::COUPON_ADDED:
			case MM_MemberMouseEventListener::COUPON_UPDATED:
				$response = $this->createRemoteCoupon($eventData);
				break;
			case MM_MemberMouseEventListener::COUPON_REMOVED:
				$response = $this->archiveRemoteCoupon($eventData);
				break;
			default:
				return false;
		}
		return $response;
	}
	
	
	/**
	 * Create/update a coupon remotely on Chargify. If the coupon supplied is already linked to a remote coupon, the operation is an update
	 * 
	 * @param MM_Coupon $localCoupon The coupon to create remotely
	 * @return MM_Response indicating success or failure
	 */
	public function createRemoteCoupon($localCoupon)
	{
		global $wpdb;
		
		if (!($localCoupon instanceof MM_Coupon))
		{
			return new MM_Response("Error creating Chargify coupon: invalid coupon supplied",MM_Response::$ERROR);
		}
		
		$update = false;
		$remoteCouponId = $this->lookupRemoteCouponId($localCoupon);
		
		if ($remoteCouponId !== false)
		{
			//id was found, this is an update instead of a create
			$update = true;
			$remoteCoupon->coupon_id = $remoteCouponId;
		}
		
		$remoteCoupon = new stdClass();
		$remoteCoupon->name = $localCoupon->getCouponName();
		$remoteCoupon->code = $localCoupon->getCouponCode();
		$remoteCoupon->description = $localCoupon->getDescription();
		$remoteCoupon->description = empty($remoteCoupon->description)?$remoteCoupon->name:$remoteCoupon->description;
		
		if ($localCoupon->getCouponType() == MM_Coupon::$TYPE_DOLLAR)
		{
			$remoteCoupon->amount = $localCoupon->getCouponValue();
		}
		else if ($localCoupon->getCouponType() == MM_Coupon::$TYPE_PERCENTAGE)
		{
			$remoteCoupon->percentage = $localCoupon->getCouponValue();
		}
		
		if ($localCoupon->getRecurringBillingSetting() == MM_Coupon::$TYPE_RECURRING_BILLING_SETTING_ALL)
		{
			$remoteCoupon->recurring = true;
		}
		
		if ($localCoupon->getEndDate() != "")
		{
			$remoteCoupon->coupon_end_date = date("Y-m-d",strtotime($localCoupon->getEndDate()));
		}
		
		$remoteCoupon->product_family_id = $this->getProductFamilyId();
		
		$remoteCouponWrapper = new stdClass();
		$remoteCouponWrapper->coupon = $remoteCoupon;
		$remoteCouponJSON = json_encode($remoteCouponWrapper);
		
		//coupon is constructed and ready to send 
		if (!$update)
		{
			$response = $this->doHTTPRequest($this->getChargifyUrl()."/coupons.json","POST",$remoteCouponJSON,$this->getJSONOptions());
			if ($response->type == MM_Response::$SUCCESS)
			{
				//grab the id and store in the link table
				$createdCoupon = json_decode($response->message);
				if (isset($createdCoupon->coupon) && isset($createdCoupon->coupon->id))
				{
					$newRemoteId = $createdCoupon->coupon->id;
					$couponLinkSQL = "insert into ".MM_TABLE_CHARGIFY_COUPON_LINKS." set chargify_coupon_id=%s, membermouse_coupon_id=%d";
					$wpdb->query($wpdb->prepare($couponLinkSQL,$newRemoteId,$localCoupon->getId()));
					return new MM_Response();
				}
				return new MM_Response("Coupon creation on Chargify succeeded, but improper response was returned.",MM_Response::$ERROR);
			}
			else
			{
				//TODO: REFACTOR: Add logging here to describe why the op failed?
				return $response;
			}
		}
		else
		{
			$response = $this->doHTTPRequest($this->getChargifyUrl()."/coupons/{$remoteCouponId}.json","PUT",$remoteCouponJSON,$this->getJSONOptions());
			return $response;
		}
	}
	
	
	/**
	 * Archives a coupon on Chargify
	 * 
	 * @param MM_Coupon $localCoupon The coupon that will be archived
	 * @return MM_Response indicating success or failure
	 */
	public function archiveRemoteCoupon($localCoupon)
	{
		global $wpdb;
		
		if (!($localCoupon instanceof MM_Coupon))
		{
			return new MM_Response("Error archiving Chargify coupon: invalid coupon supplied",MM_Response::$ERROR);
		}
		
		$remoteCouponId = $this->lookupRemoteCouponId($localCoupon);
		if ($remoteCouponId === false)
		{
			return new MM_Response("Error archiving Chargify coupon: coupon supplied is not linked",MM_Response::$ERROR);
		}
		
		$couponWrapper = new stdClass();
		$couponWrapper->coupon = new stdClass();
		$couponWrapper->coupon->coupon_id = $remoteCouponId;
		$couponDeleteJSON = json_encode($couponWrapper);
		
		$response = $this->doHTTPRequest($this->getChargifyUrl()."/coupons/{$remoteCouponId}.json","DELETE",$couponDeleteJSON,$this->getJSONOptions());
		if ($response->type == MM_Response::$SUCCESS)
		{
			$deleteCouponSQL = "delete from ".MM_TABLE_CHARGIFY_COUPON_LINKS." where chargify_coupon_id = %s";
			$wpdb->query($wpdb->prepare($deleteCouponSQL,$remoteCouponId));
		}
		return $response;
	}
	
	
	/**
	 * Takes a local coupon object and returns the id of a linked remote coupon on Chargify
	 * 
	 * @param MM_Coupon $localCoupon The MemberMouse coupon
	 * @return the id of the remote coupon, boolean false if it is not linked or there was an error
	 */
	private function lookupRemoteCouponId(MM_Coupon $localCoupon)
	{
		global $wpdb;
		
		if ($localCoupon == null)
		{
			return false;
		}
		
		$sql = "select chargify_coupon_id from ".MM_TABLE_CHARGIFY_COUPON_LINKS." where membermouse_coupon_id=%s";
		$result = $wpdb->get_row($wpdb->prepare($sql,$localCoupon->getId()));
		if (!is_null($result))
		{
			return $result->chargify_coupon_id;
		}
		return false;
	}
	
	
	/**
	 * Overrides the base class doHTTPRequest in order to provide additional error-handling and detection for Chargify
	 * @see MM_PaymentService::doHTTPRequest()
	 */
	protected function doHTTPRequest($remoteUrl,$method="POST",$data="",$options=array())
	{
		$response = parent::doHTTPRequest($remoteUrl,$method,$data,$options);
		if (!($response instanceof MM_Response))
		{
			return new MM_Response("Unknown error connecting to chargify",MM_Response::$ERROR);
		}
		
		if ($response->type == MM_Response::$SUCCESS)
		{
			$response->message = trim($response->message);
			if (strpos($response->message,"HTTP Basic: Access denied") !== false)
			{
				$response->type = MM_Response::$ERROR;
			}
			else if (empty($response->message))
			{
				$response->message = "Null response from remote server. Please check the subdomain and API Key values";
				$response->type = MM_Response::$ERROR;
			}
			else 
			{
				$responseObject = json_decode($response->message);	
				if (($responseObject != null) && (isset($responseObject->errors)) && is_array($responseObject->errors))
				{
					$response->message = implode("\n",$responseObject->errors);
					$response->type = MM_Response::$ERROR;	
				}
			}
		}
		return $response;
	}
	
	
	public function synchronizeProducts($localToRemoteOnly=false)
	{
		global $wpdb;
		
		$this->install(); //ensure the local schema is up to date
		
		$errors = array();
		
		$chargifyProductsResponse = $this->getProducts();
		if ($chargifyProductsResponse->type == MM_Response::$ERROR)
		{
			return $chargifyProductsResponse;
		}
		
		$chargifyProducts = $chargifyProductsResponse->message;
		
		//delete orphaned links from the table
		$wpdb->query("delete cf.* from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." cf left join ".MM_TABLE_PRODUCTS." p on (cf.membermouse_product_id = p.id) where p.id IS NULL");
		
		$sql = "select chargify_product_api_handle, membermouse_product_id from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS;
		$result = $wpdb->get_results($sql);
		$localProductHashtable = array();
		foreach ($result as $link)
		{
			if (!empty($link->chargify_product_api_handle) && !in_array($link->chargify_product_api_handle,array_keys($chargifyProducts)))
			{
				$wpdb->query($wpdb->prepare("delete from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." where chargify_product_api_handle=%s",$link->chargify_product_api_handle));
			}
			else 
			{
				$localProductHashtable[$link->chargify_product_api_handle] = $link->membermouse_product_id;
			}
		}
		unset($result); 
		
		if (!$localToRemoteOnly)
		{
			/** ----------- copy changes from remote to local -------------  **/
			foreach ($chargifyProducts as $remoteProduct)
			{
				$remoteProductAPIHandle = trim($remoteProduct->handle);
				$localProduct = (isset($localProductHashtable[$remoteProductAPIHandle]))? new MM_Product($localProductHashtable[$remoteProductAPIHandle]): new MM_Product();
				
				//name
				$localProduct->setName($remoteProduct->name);
				
				//description
				$localProduct->setDescription($remoteProduct->description);
				
				if (($remoteProduct->initial_charge_in_cents > 0) && ($remoteProduct->price_in_cents == 0) && ($remoteProduct->trial_price_in_cents == 0))
				{
					//this product is non-recurring, create the local product to be non-recurring as well, using the initial charge as the price
					$localProduct->setPrice($remoteProduct->initial_charge_in_cents/100);
				}
				else
				{
				
					//trial parameters
					if (($remoteProduct->trial_interval != "") && ($remoteProduct->trial_interval != "null"))
					{
						//there is a trial
						$remoteTrialUnit = $this->convertChargifyToMMUnits($remoteProduct->trial_interval_unit);
						if (!empty($remoteTrialUnit))
						{
							$localProduct->setTrialDuration($remoteProduct->trial_interval);
							$localProduct->setTrialFrequency($remoteTrialUnit);
							if (is_int($remoteProduct->trial_price_in_cents))
							{
								$trialPrice = $remoteProduct->trial_price_in_cents / 100;
								$localProduct->setTrialAmount($trialPrice);
							}
						}				
					}
					
					
					//price
					$price = is_int($remoteProduct->price_in_cents)?($remoteProduct->price_in_cents/100):0;
					$localProduct->setPrice($price);
					
					//recurrence interval
					if (($remoteProduct->interval_unit != "") && ($remoteProduct->interval_unit != "null"))
					{
						//normal recurring period
						$remoteRecurringUnit = $this->convertChargifyToMMUnits($remoteProduct->interval_unit);
						if (!empty($remoteRecurringUnit))
						{
							$localProduct->setRebillPeriod($remoteProduct->interval);
							$localProduct->setRebillFrequency($remoteRecurringUnit);
						}
					}
				}
	
				//done, now persist the new product
				$localProduct->commitData();
				
				$deleteLinkSQL = "delete from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." where (chargify_product_api_handle = %s) OR (membermouse_product_id = %d)";
				$wpdb->query($wpdb->prepare($deleteLinkSQL,$remoteProductAPIHandle,$localProduct->getId())); //clean out old product linkages (which would now be invalid)
				$linkSQL = "insert into ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." set chargify_product_api_handle = %s, membermouse_product_id = %d";			
				$wpdb->query($wpdb->prepare($linkSQL,$remoteProductAPIHandle,$localProduct->getId())); //add new product link
			}
			/** -------------- end copying from remote to local --------------- **/
		}
		
		/** -------------- begin copying from local to remote ------------- **/
		$localOnlyProductsSQL = "select p.id from ".MM_TABLE_PRODUCTS." p left join ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." cp on (p.id = cp.membermouse_product_id) where cp.membermouse_product_id IS NULL";
		$localOnlyProductIDs = $wpdb->get_col($localOnlyProductsSQL);
		
		foreach ($localOnlyProductIDs as $localProductId)
		{
			$localProduct = new MM_Product($localProductId);
			if ($localProduct->isValid()) //don't see how this could be false, seeing as we got the id straight from the table, but doesn't hurt to check 
			{
				$res = $this->createRemoteProduct($localProduct);
				if ($res->type == MM_Response::$ERROR)
				{
					$errors[] = $res->message; //collect all the error messages for later
				}
			}
		}
		/** -------------- end copying from local to remote ------------- **/
		
		if (is_array($errors) && count($errors))
		{
			return new MM_Response(implode("\n",$errors),MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	
	/**
	 * Create the product on Chargify using the undocumented-but-stable product_families/product api endpoint. 
	 * The rules are that you: 
	 *      *must post to the products collection of the product family, ie. /product_families/{product_family_id}/products.json
	 *      *You cannot post a json array of products. json product entities must be posted separately
	 *      *Product taxability is not returned with the product so you will have to manually update this in the UI if needed
	 * 
	 * Also creates the entry in the product linkage table
	 * 
	 * @param MM_Product $product The membermouse product to add
	 * @return MM_Response object indicating success or error
	 */
	
	protected function createRemoteProduct(MM_Product $product)
	{
		global $wpdb;
		
		$preJSONProduct = new stdClass();
		
		//name 
		$preJSONProduct->name = $product->getName();
		
		//handle
		$preJSONProduct->handle = "membermouse-".$product->getId();
		
		//description
		$preJSONProduct->description = $product->getName();
		
		if ($product->isRecurring())
		{
			//trial info
			$trialInfoArray = $this->convertMMToChargifyUnits($product->getTrialDuration(),$product->getTrialFrequency());
			if ($trialInfoArray !== false)
			{
				$trialAmount = $product->getTrialAmount();
				if (!empty($trialAmount))
				{
					$preJSONProduct->trial_price_in_cents = ($product->getTrialAmount() * 100);
				}
				
				$preJSONProduct->trial_interval=$trialInfoArray['numUnits'];
				$preJSONProduct->trial_interval_unit=$trialInfoArray['unitName'];
			}
			
			
			//price
			$preJSONProduct->price_in_cents = $product->getPrice() * 100;
			
			//recurring billing info
			$recurrenceInfo = $this->convertMMToChargifyUnits($product->getRebillPeriod(), $product->getRebillFrequency());
			if ($recurrenceInfo !== false)
			{
				$preJSONProduct->interval =$recurrenceInfo['numUnits'];
				$preJSONProduct->interval_unit = $recurrenceInfo['unitName'];
			}
			
			if (($product->doLimitPayments()) && isset($preJSONProduct->interval))
			{
				$numberOfPayments = intval($product->getNumberOfPayments());
				$preJSONProduct->expiration_interval = ($numberOfPayments * $preJSONProduct->interval);
				$preJSONProduct->expiration_interval_unit = $preJSONProduct->interval_unit;
			}
		}
		else 
		{
			//non-recurring products need to be sent as having an initial price of the product cost, and recurring for $0 dollars every 1 day expiring 1 day later
			//http://help.chargify.com/entries/20109003-defining-a-one-time-purchase-product
			$preJSONProduct->initial_charge_in_cents = $product->getPrice() * 100;
			$preJSONProduct->price_in_cents = 0;
			$preJSONProduct->interval = 1;
			$preJSONProduct->interval_unit = "day";
			$preJSONProduct->expiration_interval = 1;
			$preJSONProduct->expiration_interval_unit = "day";
		}
		
		$JSONWrapper = new stdClass();
		$JSONWrapper->product = $preJSONProduct;
		$productJSON = json_encode($JSONWrapper);
		
		$createProductResponse = $this->doHTTPRequest($this->getChargifyUrl()."/product_families/{$this->getProductFamilyId()}/products.json","POST",$productJSON,$this->getJSONOptions());
		if ($createProductResponse->type == MM_Response::$ERROR)
		{
			return $createProductResponse;
		}
		
		//on success, we should get back json representing the created product
		$productsArray = json_decode($createProductResponse->message,true);
		if (!is_array($productsArray))
		{
			return new MM_Response("Chargify create product operation returned success for product {$product->getId()} but could not parse the api handle from the response",MM_Response::$ERROR);
		}
		
		$createdProduct = array_pop($productsArray);
		$createdProductAPIHandle = is_array($createdProduct['handle'])?array_pop($createdProduct['handle']):$createdProduct['handle'];
		$createdProductAPIHandle = trim($createdProductAPIHandle);
		
		//link product
		$clearSQL = "delete from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." where chargify_product_api_handle=%s";
		$wpdb->query($wpdb->prepare($clearSQL,$createdProductAPIHandle));
		
		$linkProductSQL = "insert into ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." set chargify_product_api_handle=%s, membermouse_product_id=%d";
		$wpdb->query($wpdb->prepare($linkProductSQL,$createdProductAPIHandle,$product->getId()));
		
		return new MM_Response();
	}
	
	
	/**
	 * Archive a remote product on Chargify.com
	 * Chargify does not allow product deletes; Instead products are archived and all of the associated information is preserved
	 * 
	 * @param MM_Product $localProduct The local product to archive remotely
	 * @return MM_Response indicating success or failure
	 */
	public function archiveRemoteProduct(MM_Product $localProduct)
	{
		//operation currently not supported on Chargify
		return false;
	}
	
	
	/**
	 * Converts between the unit types internally used by MM to specify recurring periods to the units used by chargify
	 * Inputs are the number of units (ie. 3) and the unit name (ie. "weeks"). This is then converted to Chargify units and returned
	 * in an array, with the keys "numUnits" and "unitName". So using the above values as an example, the returned array would contain
	 * ("numUnits"=>21, "unitName"=>"day"). This function returns false if a value of 0 is passed in for numUnits
	 * 
	 * @param int $numUnits An integer representing the number of units of measurement
	 * @param String $unitName The name of the local unit of measurement
	 * @return boolean false on error, array containing the keys "numUnits" and "unitName" along with the appropriate values on success. Also returns false if numUnits is 0
	 */
	private function convertMMToChargifyUnits($numUnits, $unitName)
	{
		if (!is_numeric($numUnits) || ($numUnits == 0))
		{
			return false;
		}
		
		switch ($unitName) 
		{	
			case "months":
				return array("numUnits"=>$numUnits, "unitName"=>"month");
				break;
			case "days":
				return array("numUnits"=>$numUnits, "unitName"=>"day");
				break;
			case "weeks":
				return array("numUnits"=>$numUnits*7, "unitName"=>"day");
				break;
			case "years":
				return array("numUnits"=>$numUnits*12, "unitName"=>"month");
				break;
			default:
				return false;
		}
		return false; //shouldn't ever reach here
	}
	
	
	/**
	 * Converts Chargify units of measurement to those used by MemberMouse
	 * 
	 * @param String $unitName The unit of measurement used by Chargify
	 * @return String containing the equivalent MemberMouse unit of measurement
	 */
	private function convertChargifyToMMUnits($unitName)
	{
		//TODO: refactor: make this function accept numUnits so that its more robust if chargify ever changes how they operate
		$unitName = trim($unitName);
		$unitName = strtoupper($unitName);
		
		if ($unitName == "DAY")
		{
			return "days";
		}
		
		if ($unitName == "MONTH")
		{
			return "months";
		}
	}
	
	
	/**
	 * Retrieves the chargify customer id associated with the customer having the supplied email address
	 * 
	 * @param $email The email address to search the remote server for
	 * @return MM_Response The message contains the chargify customer id on success, and an error message (along with the type being set to error) if the customer was not found or some other error occurred
	 */
	public function getRemoteCustomerByEmail($email)
	{
		if (empty($email))
		{
			return new MM_Response("Error retrieving remote customer: no email supplied",MM_Response::$ERROR);
		}
		
		$urlEncodedEmail = urlencode($email);
		$customerResponse = $this->doHTTPRequest($this->getChargifyUrl()."/customers/lookup.json?reference={$urlEncodedEmail}","GET","",$this->getJSONOptions());
		if ($customerResponse->type != MM_Response::$ERROR)
		{
			$customerWrapper = json_decode($customerResponse->message);
			if ($customerWrapper === false)
			{
				$customerResponse->type = MM_Response::$ERROR;
				$customerResponse->message = "Error retrieving remote customer: invalid json returned";
			}
			else
			{
				if (!isset($customerWrapper->customer))
				{
					$customerResponse->type = MM_Response::$ERROR;
					$customerResponse->message = "Error retrieving remote customer: no customer returned in response";
				}
				else
				{
					$customerResponse->message = $customerWrapper->customer;
				}
			}
		}
		return $customerResponse;
	}
	
	
	/**
	 * Retrieves a chargify customer using the chargify customer id
	 * 
	 * @param string $chargifyCustomerId The id of the customer to look up
	 * @return MM_Response containing the customer object on success, or an error message on failure
	 */
	public function getRemoteCustomerById($chargifyCustomerId)
	{
		if (empty($chargifyCustomerId))
		{
			return new MM_Response("Error retrieving remote customer: no id supplied",MM_Response::$ERROR);
		}
	
		$customerResponse = $this->doHTTPRequest($this->getChargifyUrl()."/customers/{$chargifyCustomerId}.json","GET","",$this->getJSONOptions());
		if ($customerResponse->type != MM_Response::$ERROR)
		{
			$customerWrapper = json_decode($customerResponse->message);
			if ($customerWrapper === false)
			{
				$customerResponse->type = MM_Response::$ERROR;
				$customerResponse->message = "Error retrieving remote customer: invalid json returned";
			}
			else
			{
				if (!isset($customerWrapper->customer))
				{
					$customerResponse->type = MM_Response::$ERROR;
					$customerResponse->message = "Error retrieving remote customer: no customer returned in response";
				}
				else
				{
					$customerResponse->message = $customerWrapper->customer;
				}
			}
		}
		return $customerResponse;
	}
	
	
	/**
	 * Creates a remote customer using the information supplied from a local customer, and link them in the local link table
	 * 
	 * @param MM_User $localCustomer The membermouse user to create a chargify customer for
	 * @return MM_Response containing the created chargify customer on success, or an error message on failure
	 */
	public function createRemoteCustomer(MM_User $localCustomer)
	{
		global $wpdb; 
		
		$remoteCustomer = new stdClass();
		$remoteCustomer->first_name = $localCustomer->getFirstName();
		$remoteCustomer->last_name  = $localCustomer->getLastName();
		$remoteCustomer->email      = $localCustomer->getEmail();
		$remoteCustomer->reference  = $localCustomer->getEmail();
		$jsonWrapper = new stdClass();
		$jsonWrapper->customer = $remoteCustomer;
		$customerJSON = json_encode($jsonWrapper);
		
		$createCustomerResponse = $this->doHTTPRequest($this->getChargifyUrl()."/customers.json","POST",$customerJSON,$this->getJSONOptions());
		if ($createCustomerResponse->type == MM_Response::$ERROR)
		{
			return $createCustomerResponse;
		}
		
		$createdObject = json_decode($createCustomerResponse->message);
		if (!isset($createdObject->customer) || !isset($createdObject->customer->id))
		{
			return new MM_Response("Error creating customer for {$localCustomer->getEmail()}: remote side did return the expected response",MM_Response::$ERROR);
		}
		$chargifyCustomerId = $createdObject->customer_id;
		$createCustomerResponse->message = $createdObject->customer;
		
		$customerLinkSQL = "insert into ".MM_TABLE_CHARGIFY_CUSTOMER_LINKS." set chargify_customer_id=%s, membermouse_customer_id=%d";
		$wpdb->query($wpdb->prepare($customerLinkSQL,$chargifyCustomerId,$localCustomer->getId()));
		
		return $createCustomerResponse;
	}
	
	
	/**
	 * Creates a subscription on the chargify server. Either credit card infor or a payment profile id must be supplied
	 * 
	 * @param MM_Order $order The order being charged. Used to reference the customer and billing/shipping addresses
	 * @param MM_OrderItem $productItem The product (represented as an MM_OrderItem) to create a charge for
	 * @param String $chargifyCustomerId (optional) If non-null, this customer id will be used to create the subscription, otherwise a new customer will be created
	 * @param MM_CardInfo $cardInfo (optional) The credit card information to use. If not present, a paymentProfileId must be supplied
	 * @param String $paymentProfileId (optional) The payment profile id to charge against. Used if there is a card on file. If not present, cardInfo must be supplied
	 * @param MM_Coupon $coupon (optional) The coupon to apply to this order, if any.
	 * 
	 * @return MM_PaymentServiceResponse representing the status of the request. On success, the subscription object will be returned 
	 */
	public function createRemoteSubscription(MM_Order $order, MM_OrderItem $productItem, $chargifyCustomerId=null, MM_CardInfo $cardInfo = null, $paymentProfileId = null, MM_Coupon $coupon = null)
	{
		global $wpdb;
		
		if ($order == null)
		{
			return new MM_PaymentServiceResponse("Error creating subscription: no order supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($productItem == null)
		{
			return new MM_PaymentServiceResponse("Error creating subscription: no product supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		$chargifyProductAPIHandle = isset($this->productCache[$productItem->getItemId()])?$this->productCache[$productItem->getItemId()]:"";
		if (empty($chargifyProductAPIHandle))
		{
			$chargifyProductAPIHandle = $this->lookupProductHandleById($productItem->getItemId());
			if ($chargifyProductAPIHandle === false)
			{
				return new MM_PaymentServiceResponse("Error creating subscription: product with id {$productItem->getItemId()} is not linked to a chargify product",MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		if (($cardInfo == null) && ($paymentProfileId == null))
		{
			return new MM_PaymentServiceResponse("Error creating subscription: no payment information supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//at this point, we are assured we have an order, product, customer, and payment information, so lets create the subscription
		$subscriptionObject = new stdClass();
		$subscriptionObject->product_handle = $chargifyProductAPIHandle;
		
		$ba = $order->getBillingAddress(); //this will be used shortly if its a new customer and/or payment profile
		//plug in customer data
		if ($chargifyCustomerId != null)
		{
			$subscriptionObject->customer_id = $chargifyCustomerId;
		}
		else 
		{
			$customer = $order->getCustomer();
			$customerAttributes = new stdClass();
			$customerAttributes->first_name = (!is_null($customer->getFirstName()) && ($customer->getFirstName() != ""))?$customer->getFirstName():$ba->getFirstName();
			$customerAttributes->last_name  = (!is_null($customer->getLastName()) && ($customer->getLastName() != ""))?$customer->getLastName():$ba->getLastName();
			$customerAttributes->email      = $customer->getEmail();
			$customerAttributes->reference  = $customer->getEmail();
			$subscriptionObject->customer_attributes = $customerAttributes;
		}
		
		//plug in payment info
		if ($paymentProfileId != null)
		{
			$subscriptionObject->payment_profile_id = $paymentProfileId;
		}
		else 
		{
			$paymentProfileAttributes = new stdClass();
			$paymentProfileAttributes->first_name       = $ba->getFirstName();
			$paymentProfileAttributes->last_name        = $ba->getLastName();
			$paymentProfileAttributes->full_number      = $cardInfo->getCardNumber();
			$paymentProfileAttributes->expiration_month = $cardInfo->getExpirationMonth();
			$paymentProfileAttributes->expiration_year  = $cardInfo->getExpirationYear();
			$cvv = $cardInfo->getCVV();
			if (!empty($cvv))
			{
				$paymentProfileAttributes->cvv = $cvv;
			}
			$paymentProfileAttributes->billing_address  = $ba->getAddressLine1();
			$paymentProfileAttributes->billing_address  = $ba->getAddressLine2();
			$paymentProfileAttributes->billing_city     = $ba->getCity();
			$paymentProfileAttributes->billing_state    = $ba->getState();
			$paymentProfileAttributes->billing_zip      = $ba->getPostalCode();
			$paymentProfileAttributes->billing_country  = $ba->getCountry();
			$subscriptionObject->payment_profile_attributes = $paymentProfileAttributes;
		}
		
		//NOTE: currently because chargify doesn't support e-commerce, it is assumed only one coupon will be used and only one product will be charged at a time
		//If those assumptions ever change, this whole method will need to be slight refactored, and the global and per product coupon queues will need to be put
		//in play
		if (!is_null($coupon))
		{
			$subscriptionObject->coupon_code = $coupon->getCouponCode();	
		}
		
		$subscriptionWrapper = new stdClass();
		$subscriptionWrapper->subscription = $subscriptionObject;
		$subscriptionJSON = json_encode($subscriptionWrapper);
		$response = $this->doHTTPRequest($this->getChargifyUrl()."/subscriptions","POST",$subscriptionJSON,$this->getJSONOptions());
		if ($response->type != MM_Response::$SUCCESS)
		{
			return new MM_PaymentServiceResponse($response->message, MM_PaymentServiceResponse::$ERROR);
		}
		
		$subscriptionResponse = json_decode($response->message);
		if ($subscriptionResponse === false)
		{
			return new MM_PaymentServiceResponse("Error parsing the results of a subscription creation request from Chargify",MM_PaymentServiceResponse::$ERROR);
		}
		
		//link this subscription to the order item
		if (!empty($subscriptionResponse->subscription->id))
		{
			$linkResult = $this->linkSubscriptionToOrderItem($subscriptionResponse->subscription->id, $productItem);
			//if the linking fails, thats bad, but lets continue for now
		}
		
		//store the card on file if necessary
		if (is_null($paymentProfileId) && isset($subscriptionResponse->subscription) && isset($subscriptionResponse->subscription->credit_card) && isset($subscriptionResponse->subscription->credit_card->id))
		{
			$paymentProfileId = $subscriptionResponse->subscription->credit_card->id;
			$cardOnFileSQL = "insert into ".MM_TABLE_CARD_ON_FILE." set user_id=%d, payment_service_id=%d, payment_service_identifier=%s, original_order_id=%s";
			$wpdb->query($wpdb->prepare($cardOnFileSQL,$order->getCustomer()->getId(),$this->getId(),$paymentProfileId,$order->getId()));	
		}
		
		return new MM_PaymentServiceResponse($subscriptionResponse->subscription);
	}
	
	
	/**
	 * Links a chargify subscription to a membermouse order item
	 * 
	 * @param string $subscriptionId
	 * @param MM_OrderItem $orderItem
	 * @return boolean true if the link was stored correctly, false otherwise
	 */
	protected function linkSubscriptionToOrderItem($subscriptionId, MM_OrderItem $orderItem)
	{
		global $wpdb;
		
		//TODO: REFACTOR: evaluate adding additional logic to enforce that there can only be one such link

		//validate parameters
		if (empty($subscriptionId) || empty($orderItem))
		{
			return false;
		}
		
		$subscriptionLinkData = array(
				"chargify_subscription_id"  => $subscriptionId,
				"membermouse_order_id"      => $orderItem->getOrderId(),
				"membermouse_order_item_id" => $orderItem->getId()
				);
		$linkResult = $wpdb->insert(MM_TABLE_CHARGIFY_SUBSCRIPTION_LINKS, $subscriptionLinkData);
		return $linkResult;
	}
	
	
	/**
	 * Lookup an order item id from a linked Chargify subscription id
	 * 
	 * @param MM_OrderItem $orderItem The order item to query against
	 * @return $subscriptionId if found, null if no linked subscription id exists or there was an error
	 */
	protected function lookupOrderItemFromSubscriptionId($subscriptionId)
	{
		global $wpdb;
		
		if (empty($orderItem) || !($orderItem instanceof MM_OrderItem))
		{
			return null;
		}
		
		$lookupSQL = "select membermouse_order_item_id from ".MM_TABLE_CHARGIFY_SUBSCRIPTION_LINKS." where chargify_subscription_id = %s";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupSQL,$subscriptionId));
		return $orderItemId;
	}
	
	
	/**
	 * Return the chargify product api handle for the membermouse product id supplied
	 * 
	 * @param String $productId The product id of the membermouse product being looked up
	 * @return String/boolean The chargify product api handle for the membermouse product if it is linked in the db. boolean false is returned if not found
	 */
	protected function lookupProductHandleById($productId)
	{
		global $wpdb;
		
		if (empty($productId))
		{
			return false;
		}
		
		$productHandleSQL = "select chargify_product_api_handle from ".MM_TABLE_CHARGIFY_PRODUCT_LINKS." where membermouse_product_id=%d";
		$res = $wpdb->get_row($wpdb->prepare($productHandleSQL,$productId));
		if ($res == null)
		{
			return false;
		}
		else 
		{
			return $res->chargify_product_api_handle;
		}
		
	}
	
	
	/**
	 * Refund a transaction
	 * 
	 * @see MM_PaymentService::refundTransaction()
	 */
	public function refundTransaction($transactionId)
	{
		global $wpdb;
		//the initial implementation returns an error which the UI will display to the user
		$chargifyRefundUrl = $this->getChargifyUrl();
	
		$transactionInfoResponse = MM_TransactionLog::getTransactionInfo($transactionId);
		if (MM_Response::isSuccess($transactionInfoResponse))
		{
			$order_id = $transactionInfoResponse->order_id;
			$order_item_id = $transactionInfoResponse->order_item_id;
			$subscriptionLookup = "SELECT chargify_subscription_id FROM ".MM_TABLE_CHARGIFY_SUBSCRIPTION_LINKS." WHERE ";
			$subscriptionLookup.=(!is_null($order_id))?"(order_id = '{$order_id}') AND ":"";
			$subscriptionLookup.-"(order_item_id = '{$order_item_id}'";
			$subscriptionId = $wpdb->get_var($subscriptionLookup);
			if ($subscriptionId !== false)
			{
				$chargifyRefundUrl.="/subscriptions/{$subscriptionId}#transactions";	
			}
		}	
		
		$errorMessage = "To refund this transaction, go to <a href='{$chargifyRefundUrl}' target='_TOP'>{$chargifyRefundUrl}</a>";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}
}
