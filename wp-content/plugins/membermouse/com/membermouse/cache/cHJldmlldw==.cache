class MM_Preview
{
	private $accessTags = array();
	private $user;
	private $days =0;
	private $memberTypeId=0;
	private $accessTagApplied=array();
	
	
 	public function __construct(){}
 	
	public function setData($userId, $days=0, $memberTypeId=null, $accessTags=null)
	{
		$userObj = new MM_User($userId);
		$userObj->setId($userId);
		$userObj->setMembershipId($memberTypeId);
		$userObj->setFirstName("Admin");
		$userObj->setLastName("Test");
		$userObj->setPhone("(555) 555-5555");
		$userObj->setEmail("sample@test.com");
		$userObj->setPassword("admin1231");
		$userObj->setUsername("sampleusername");
		$userObj->setStatus("1");
		$userObj->setBillingAddress("123 Fake St.");
		$userObj->setBillingAddress2("Suite 1");
		$userObj->setBillingCity("Nowhere");
		$userObj->setBillingState("TX");
		$userObj->setBillingZipCode("55555");
		$userObj->setBillingCountry(MM_CountryUtils::$DFLT_COUNTRY_ISO);
		$userObj->setShippingAddress("123 Fake St.");
		$userObj->setShippingAddress2("Suite 1");
		$userObj->setShippingCity("Nowhere");
		$userObj->setShippingState("TX");
		$userObj->setShippingZipCode("55555");
		$userObj->setShippingCountry(MM_CountryUtils::$DFLT_COUNTRY_ISO);
		$userObj->validate();
		$this->user = $userObj;
		
		$this->accessTags = (is_array($accessTags))?array_keys($accessTags):array();
		$this->accessTagApplied = $accessTags;
		$this->days = $days;
		MM_Session::value(MM_Session::$KEY_PREVIEW_MODE, serialize($this));
	}
	
	public static function getData()
	{
		global $current_user;
		$previewObj = unserialize(MM_Session::value(MM_SESSION::$KEY_PREVIEW_MODE));
		$memberTypeList = MM_MembershipLevel::getMembershipLevelPostAccess();
	
		if(is_object($previewObj))
		{	
			return $previewObj;
		}
		if(is_array($memberTypeList))
		{
			$memberTypeId = key($memberTypeList);
		} 
		
		$obj = new MM_Preview();
		$obj->setData($current_user->ID, 0, $memberTypeId);
		$previewObj = unserialize(MM_Session::value(MM_SESSION::$KEY_PREVIEW_MODE));
		if(is_object($previewObj))
		{
			return $previewObj;
		}
		
		return false;
	}
	
	public static function clearPreviewMode()
	{
		MM_Session::clear(MM_SESSION::$KEY_PREVIEW_MODE);
	}
	
	public function getAppliedDays($accessTagId)
	{
		if(isset($this->accessTagApplied[$accessTagId])) 
		{
			return $this->accessTagApplied[$accessTagId];
		}
		
		return 0;
	}
	
	public function getUser()
	{
		return $this->user;
	}
	
	public function getDays()
	{
		return $this->days;
	}
	
	public function getBundles()
	{
		return $this->accessTags;
	}
	
	public function getMembershipId()
	{
		$user = $this->user;
		return $user->getMembershipId();
	}
}
