/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * 
 * MM_ReportDatagrid is the main datagrid component of the reporting framework. 
 * It has the ability to :
 * * present tabular data in rows
 * * display tooltips for any heading or content
 * * show a heading and/or a subheading
 * * accept a dataset and automatically create a grid from it
 * * do pagination
 * * dynamically show/hide columns
 * * dynamically expand content associated with a row, in reaction to a button press
 * * display subrows, in a tabletree style, associated with a master row
 */
class MM_ReportDatagrid extends MM_ReportVisualElement
{
	//grid css classes
	protected $subheaderRowClass  = "subheader_row";
	protected $subheaderCellClass = "subheader_cell";
	protected $tooltipClass = "qlabs_tooltip";
	protected $oddRowClass = "data_odd";
	protected $evenRowClass = "data_even";
	protected $dataCellClass = "data_cell";
	
	protected $oddSubrowClass = "data_subrow_odd";
	protected $evenSubrowClass = "data_subrow_even";
	protected $subrowStartDataCellClass = "foldoutStart";
	protected $subrowEndDataCellClass = "foldoutEnd";
	
	//options
	protected $columnFilteringEnabled = false;
	protected $columnFilterButtonLabel = "Table Filter";
	protected $columnFilterPanelHeader = "Active columns";
	protected $gridTitle = "";
	protected $showHeaderRow = true;
	
	protected $paginated = true;
	protected $currentPage = 1;
	protected $pageSize = 50;
	protected $hasBackLink = false;
	protected $backlinkText = "";
	
	protected $sortColumn = "";
	protected $sortDirection = "";
	
	protected $noDataContent = "-- No Data --";
	
	protected $gridTemplate;
	
	public function __construct($gridContainerId="",$directives=array())
	{
		$this->gridTemplate = MM_TEMPLATE_REPORTING.DIRECTORY_SEPARATOR."components".DIRECTORY_SEPARATOR."reportdatagrid.html.php";
		$this->processDirectives($directives);
		parent::__construct($gridContainerId,$directives);
	}
	
	
	protected function processDirectives($directives)
	{
		$this->isPaginated = (!empty($directives['paginated']) && ((bool)$directives['paginated']));
		$this->currentPage = (!empty($directives['page']) && is_numeric($directives['page']))?$directives['page']:$this->currentPage;
		$this->pageSize    = (!empty($directives['pageSize']) && is_numeric($directives['pageSize']))?$directives['pageSize']:$this->pageSize;
		
		if (isset($directives['sortDirection']) && ($directives['sortDirection'] == "")) //blank sort direction indicates a sort reset
		{
			$this->sortColumn = "";
			$this->sortDirection = "";
		}
		else 
		{
			$this->sortColumn  = (!empty($directives['sortColumn']))?$directives['sortColumn']:$this->sortColumn;
			$this->sortDirection = (!empty($directives['sortDirection']))?$directives['sortDirection']:$this->sortDirection;
		}
	}
	
	
	public static function getCSSDependencies()
	{
		$ds = DIRECTORY_SEPARATOR;
		$cssDir = MM_RESOURCES_URL."css{$ds}admin{$ds}reporting{$ds}datagrid{$ds}";
		
		$dependencies = array(
			"{$cssDir}data_grids_main.css",
			"{$cssDir}data_grids_style_01.css",
			"{$cssDir}data_grids_tooltip.css",
			"{$cssDir}data_grids_mm.css",
		);
		return $dependencies;
	}
	
	
	protected function renderColumnFilteringInputs()
	{
		$output = "";
		$numColumns = count($this->model->getColumns());
		for ($count=1; $count<=$numColumns; $count++)
		{
			$output.= "<input id=\"col{$count}\" name=\"#\" type=\"checkbox\" />\n";
		}
		return $output;
	}
	
	
	protected function renderColumnFilteringPanelList()
	{
		$output = "<ul>\n";
		$columns = $this->model->getColumns();
		$count = 1;
		$foundFilter = false;
		foreach ($columns as $column=>$columnData)
		{
			if ($columnData['filterable'])
			{
				$output .= "<li><label for=\"col{$count}\">{$column}</label></li>\n";
				$foundFilter = true;
			}
			$count++;
		}
		$output .= "</ul>\n";
		
		return ($foundFilter)?$output:"";
	}
	
	
	protected function renderInlineCSS()
	{
		$output = "";
		$modelColumns = $this->model->getColumns();
		$i=0;
		foreach ($modelColumns as $k=>$v)
		{
			$i++;
			$output .= "td.data_cell:nth-of-type({$i}):before,\n";
			$output .= "td.label_cell:nth-of-type({$i}):before\n";
			$output .= "{\n";
			$output .= "    content: \"{$v['label']}:\";\n";
			$output .= "}\n";
		}
		if ($output != "")
		{
			$output = "<style>\n@media only screen and (max-width: 480px),\n".
					  "(min-device-width: 0px) and (max-device-width: 479px)\n".
	                  "{{$output}}\n</style>\n";
		}
		return $output;
	}
	
	
	protected function renderSubheaderRow()
	{
		$output = "";
		$modelColumns = $this->model->getColumns();
		if (count($modelColumns) > 0)
		{
			$output .= "<tr class=\"{$this->subheaderRowClass}\">\n";
			foreach ($modelColumns as $k=>$v)
			{
				$cellContent = $v['label'];
				if (isset($v['sortable']) && ($v['sortable'] == true))
				{
					//sorting directions cycle from DESC to ASC to none. By examining where we are in the cycle, we know what comes next..
					$nextSortDir = MM_ReportDatagridModel::$SORT_DESC;
					if (($this->sortColumn == $k) && !empty($this->sortDirection))
					{
						//already sorting by this column, figure out whats next
						if ($this->sortDirection == MM_ReportDatagridModel::$SORT_DESC)
						{
							$cellContent = $cellContent.MM_Utils::getIcon("caret-down", 'grey', '1.3em', '2px', 'sorting by this column (descending)', 'margin-left:4px;');
							$nextSortDir = MM_ReportDatagridModel::$SORT_ASC;
						}
						else //we assume this is an ascending sort, since we know the sort column isnt blank and its not desc
						{
							$cellContent = $cellContent.MM_Utils::getIcon("caret-up", 'grey', '1.3em', '2px', 'sorting by this column (ascending)', 'margin-left:4px;');
							$nextSortDir = ""; //empty space will be the signal for a reset
						}
					}
					$cellContent = "<a onClick=\"mmjs.changeDirective('{$this->container}',{'sortColumn':'{$k}','sortDirection':'{$nextSortDir}'});\">{$cellContent}</a>";
				}
				
				if (!empty($v['tooltip']))
				{
					$cellContent .= "<div class=\"{$this->tooltipClass}\">i<span>";
					if (!empty($v['tooltip_label']))
					{
						$cellContent .= "<strong>{$v['tooltip_label']}</strong>";
					}
					$cellContent .= $v['tooltip'];
					$cellContent .= "</span></div>";
				}
				$output .= "<td class=\"{$this->subheaderCellClass}\" nowrap=\"nowrap\">{$cellContent}</td>\n";
			}
			$output .= "</tr>\n";
		}
		return $output;
	}
	
	
	protected function renderDataSection()
	{		
		$rowNum = 0;
		$rows = $this->model->getRows();
		$columns = $this->model->getColumns();
		$numColumns = count($columns); 
		$output = "";
		
		if (!empty($this->sortColumn) && !empty($this->sortDirection))
		{
			$useColumn = (isset($columns[$this->sortColumn]['sortValueColumn']))?$columns[$this->sortColumn]['sortValueColumn']:$this->sortColumn;
			MM_ReportDatagridModel::sortResults($rows,$useColumn, $this->sortDirection,true);
		}
		
		if ($this->paginated)
		{
			$minToDisplay = (($this->currentPage -1) * $this->pageSize) + 1;
			$maxToDisplay = ($this->currentPage * $this->pageSize);
		}
		else 
		{
			$minToDisplay = 0;
			$maxToDisplay = count($rows);
		}
		
		foreach ($rows as $rowData)
		{
			//next line starts counting the rows, starting with 1
			$rowStyle = ((++$rowNum%2)==0)?$this->evenRowClass:$this->oddRowClass;
			if (($rowNum >= $minToDisplay) && ($rowNum <= $maxToDisplay))
			{
				$output .= "<!-- ROW {$rowNum} -->\n";
				
				if ($rowData['data'] == MM_ReportDatagridModel::$BLANK_ROW)
				{
					for ($i=0; $i<$numColumns; $i++)
					{
						$output .= "<tr class=\"{$rowStyle}\">\n";
						$output .= "<td class=\"{$this->dataCellClass}\">&nbsp;</td>\n";
						$output .= "</tr>\n";
					}
				}
				else
				{
					//if (isset($rowData['data']['subrows']))
					//	error_log(print_r($rowData['data']['subrows'],true));
					$subRowsPresent = isset($rowData['data']['subrows']) && is_array($rowData['data']['subrows']);
					$numSubrows = $subRowsPresent?count($rowData['data']['subrows']['rows']):0;
					
					$output .= "<tr class=\"{$rowStyle}\">\n";
					$columnCount = 0;
					$metaOverride = array('postfix_iso'=>false);
					foreach ($columns as $columnName=>$columnData)
					{
						$cellContent = trim($rowData['data'][$columnName]);
						$cellContent = ($cellContent !== "")?$rowData['data'][$columnName]:"&nbsp;"; //if its just blank spaces, use html entity for that
						if (isset($columnData['columnType']) && ($columnData['columnType'] == 'money') && (is_numeric($cellContent)))
						{
							$cellContent = _mmof($cellContent,MM_CurrencyUtil::getActiveCurrency(),$metaOverride);
						}
						else 
						{
							//do any necessary substitutions
							$cellContent = str_replace("%row_id%", $rowNum, $cellContent); //relace %row_id% with the actual row id
							$cellContent = str_replace("%col_num%", $columnCount, $cellContent); //replace %col_num% with the actual column number
							$cellContent = str_replace("%total_subrows%", $numSubrows, $cellContent); //replace %total_subrows% with the number of foldout rows
						}
						if (isset($columnData['link']) && isset($columnData['link']['name']) && isset($columnData['link']['value']))
						{
							$linkParamName = htmlentities($columnData['link']['name'],ENT_COMPAT | ENT_HTML401, "UTF-8");
							$linkParamValue = isset($rowData['data'][$columnData['link']['value']])?htmlentities($rowData['data'][$columnData['link']['value']],ENT_COMPAT | ENT_HTML401, "UTF-8"):"";
							$cellContent = "<a onClick=\"mmjs.navigate('{$this->container}',{'{$linkParamName}':'{$linkParamValue}'});\">{$cellContent}</a>";
						}
						$cellClasses = ($subRowsPresent && ($columnCount == 0))?"{$this->dataCellClass} toplevelHeader":$this->dataCellClass;
						$output .= "<td class=\"{$cellClasses}\">{$cellContent}</td>\n";
						$columnCount++;
					}
					$output .= "</tr>\n";
					
					if (!empty($rowData['expandedContent'])) //add expandable section, if there is one
					{
						$output .= "<!-- expandable section -->\n";
						$output .= "<tr class=\"expanded\">\n";
						$output .= "    <td colspan=\"{$numColumns}\">\n";
						$output .= "       <input id=\"row_{$rowNum}\" name=\"#\" type=\"checkbox\" />\n";
						$output .= "          <div class=\"expanded\">\n";
						$output .= "              {$rowData['expandedContent']}\n";
						$output .= "          </div>\n";
						$output .= "    </td>\n";
						$output .= "</tr>\n";
						$output .= "<!-- / -->\n";	
					}
					
					
					if ($subRowsPresent) //add subrows if they are present
					{
						$subrowNum = 0;
						$subrowData = $rowData['data']['subrows']['rows'];
						$columnAliases = isset($rowData['data']['subrows']['columnAliases'])?$rowData['data']['subrows']['columnAliases']:array();
						
						foreach ($subrowData as $rowData)
						{
							//next line starts counting the subrows, starting with 1
							$rowStyle = ((++$subrowNum%2)==0)?$this->evenSubrowClass:$this->oddSubrowClass;
							$output .= "<tr class=\"{$rowStyle}\">\n";
							$columnCount = 0;
							if ($subrowData == MM_ReportDatagridModel::$BLANK_ROW)
							{
								for ($i=0; $i<$numColumns; $i++)
								{
								$output .= "<tr class=\"{$rowStyle}\">\n";
								$output .= "<td class=\"{$this->dataCellClass}\">&nbsp;</td>\n";
								$output .= "</tr>\n";
								}
							}
							else 
							{
								$columnCount = 0;
								foreach ($columns as $columnName=>$columnData)
								{
									if (isset($columnAliases[$columnName]))
									{
										$columnName = $columnAliases[$columnName];
									}
									$cellContent = isset($rowData['data'][$columnName])?trim($rowData['data'][$columnName]):'&nbsp';
									$cellContent = ($cellContent !== "")?$cellContent:"&nbsp;"; //if its just blank spaces, use html entity for that
									//do any necessary substitutions
									$cellContent = str_replace("%row_id%", $rowNum, $cellContent); //relace %row_id% with the actual row id
									$cellContent = str_replace("%subrow_id%", $subrowNum, $cellContent); //relace %subrow_id% with the actual subrow id
									$cellContent = str_replace("%col_num%", $columnCount, $cellContent); //replace %col_num% with the actual column number
									$cellClasses = "{$this->dataCellClass} ";
									if ($columnCount == 0)
									{
										$cellClasses .= ($subrowNum == $numSubrows)?$this->subrowEndDataCellClass:$this->subrowStartDataCellClass;
									}
									$output .= "<td class=\"{$cellClasses}\">{$cellContent}</td>\n";
									$columnCount++;
								}
							}
							$output .= "</tr>\n";
						}
					}
				}
				$output .= "\n";
			}
		}
		return $output;
	}
	
	
	public function render(MM_ReportDatagridModel $model = null)
	{
		if (!is_null($model))
		{
			$this->setModel($model);
		}
		$params = new stdClass();
		$params->gridIdentifier = $this->container;
		$columnFilteringEnabled = $this->isColumnFilteringEnabled();
		$params->columnFilteringEnabled = $columnFilteringEnabled;
		if ($columnFilteringEnabled)
		{
			$params->columnFilteringInputs = $this->renderColumnFilteringInputs();
			$params->columnFilterButtonLabel = $this->columnFilterButtonLabel;
			$params->columnFilterPanelHeader = $this->columnFilterPanelHeader;
			$params->columnFilterPanelList = $this->renderColumnFilteringPanelList();
		}
		$params->inlineCSS = $this->renderInlineCSS();
		$params->gridTitle = $this->gridTitle;
		$params->subheaderRow = $this->renderSubheaderRow();
		if ($this->model->getNumRows() > 0)
		{
			$params->dataSection = $this->renderDataSection();
		}
		else 
		{
			$params->dataSection = $this->renderEmptyDataSection();
		}
		$params->columnHeaderCount = count($this->model->getColumns());
		if ($this->paginated)
		{
			$totalPages = ceil($this->model->getNumRows()/$this->pageSize);
			if ($totalPages > 1)
			{
				$pageNumbers = array();
				for ($i=1; $i<=$totalPages; $i++)
				{
					$pageNumbers[$i] = $i;
				}
				$params->isPaginated = $this->paginated;
				$params->currentPage = $this->currentPage;
				$params->pageSelector = MM_HtmlUtils::generateSelectionsList($pageNumbers,$this->currentPage);
				$params->totalPages = $totalPages;
			}
			else
			{
				$params->isPaginated = false;
			}
		}
		$output = "";
		if ($this->hasBackLink)
		{
			$backlinkText = (!empty($this->backlinkText))?$this->backlinkText:"Back to previous";
			$output.= "<a onClick=\"mmjs.navigateBack('{$this->container}');\">{$backlinkText}</a><br/>";
		}
		$output .= MM_TEMPLATE::generate($this->gridTemplate,$params);
		return $output;
	}
	
	
	protected function renderEmptyDataSection()
	{
		$numColumns = count($this->model->getColumns());
		$output = "<tr class='{$this->oddRowClass}'>\n";
		$output.= "<td class='{$this->dataCellClass}' colspan='{$numColumns}' align='center'>{$this->noDataContent}</td>\n";
		$output.= "</tr>\n";
		return $output;
	}
	
	
	public function setColumnFilteringEnabled($enabled=true)
	{
		$this->columnFilteringEnabled = $enabled;
	}
	
	
	public function getColumnFilteringEnabled()
	{
		return $this->columnFilteringEnabled;
	}
	
	
	public function isColumnFilteringEnabled()
	{
		return $this->columnFilteringEnabled;
	}
	
	
	public function setColumnFilterButtonLabel($label)
	{
		$this->columnFilterButtonLabel = $label;
	}
	
	
	public function getColumnFilterButtonLabel()
	{
		return $this->columnFilterButtonLabel;
	}
	
	
	public function setColumnFilterPanelHeader($columnFilterPanelHeader)
	{
		$this->columnFilterPanelHeader = $columnFilterPanelHeader;
	}
	
	
	public function getColumnFilterPanelHeader()
	{
		return $this->columnFilterPanelHeader;
	}
	
	
	public function setGridTitle($gridTitle)
	{
		$this->gridTitle = $gridTitle;
	}
	
	
	public function getGridTitle()
	{
		return $this->gridTitle;
	}
	
	
	public function setPaginated($paginated)
	{
		$this->paginated = $paginated;
	}
	
	
	public function getPaginated()
	{
		return $this->paginated;
	}
	
	
	public function setCurrentPage($currentPage)
	{
		$this->currentPage = $currentPage;
	}
	
	
	public function getCurrentPage()
	{
		return $this->currentPage;
	}
	
	
	public function setPageSize($pageSize)
	{
		$this->pageSize = $pageSize;
	}
	
	
	public function getPageSize()
	{
		return $this->pageSize;
	}


    /**
     * Convenience method to create a grid using a wpdb resultset of type ARRAY_K.
     *
     * @param $gridIdentifier The identifier for the visual element
     * @param $columnHeaders An array of columns and their definitions
     * @param MM_ReportResponse $resultObject A report response object containing the data
     * @param array $directives (optional) An array of directives to pass to the grid
     *
     * @return MM_ReportDatagrid|null
     */
    public static function createFromData($gridIdentifier, $columnHeaders, MM_ReportResponse $resultObject, $directives=array())
	{
		if (!MM_ReportResponse::isSuccess($resultObject))
		{
			return null;
		}
		
		//create the grid
		$grid = new MM_ReportDatagrid($gridIdentifier, $directives);
		
		//create and configure the data model
		$gridData = new MM_ReportDatagridModel();
		$gridData->setColumnHeadersFromArray($columnHeaders);
		
		//now add each row to the grid data model
		$resultset = $resultObject->message;
		if ($resultset)
		{
			foreach ($resultset as $v)
			{
				$gridData->addRow($v);
			}
		}
		
		//plug the model into the grid
		$grid->setModel($gridData);
		
		return $grid;
	}
	
	public function addBackLink($hasBacklink, $backlinkText="")
	{
		$this->hasBackLink = (bool)$hasBacklink;
		$this->backlinkText = ($this->hasBackLink)?$backlinkText:"";
	}
	
	
	public function getNoDataContent()
	{
		return $this->noDataContent;
	}
	
	
	public function setNoDataContent($noDataContent)
	{
		$this->noDataContent = $noDataContent;
	}


	public function getShowHeaderRow()
	{
		return $this->showHeaderRow;
	}


	public function setShowHeaderRow($showHeaderRow)
	{
		$this->showHeaderRow = (bool)$showHeaderRow;
	}
	
	
}