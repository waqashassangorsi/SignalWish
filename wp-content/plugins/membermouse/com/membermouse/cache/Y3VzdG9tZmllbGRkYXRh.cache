/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CustomFieldData extends MM_Entity
{
	private $customFieldId = "";
	private $userId = "";
	private $value = "";
	
	public function getData() 
	{
		// do nothing
	}
	
	public function setData($data)
	{
		try 
		{
			$this->customFieldId = $data->custom_field_id;
			$this->userId = $data->user_id;
			$this->value = stripslashes(html_entity_decode($data->value,ENT_COMPAT | ENT_HTML401, "UTF-8"));
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{	
		global $wpdb;
		
		if(intval($this->id) > 0)
		{
			$sql = "UPDATE ".MM_TABLE_CUSTOM_FIELD_DATA." SET 
						custom_field_id='%s', 
						user_id='%s',
						value='%s',
						last_updated='%s'
					WHERE 
						id='{$this->id}'
			";
			
			$preparedSql = $wpdb->prepare($sql, $this->customFieldId, $this->userId, htmlentities(stripslashes($this->value), ENT_QUOTES, "UTF-8"), MM_Utils::getCurrentTime());
			$ret = $wpdb->query($preparedSql);
			if($ret===false)
			{
				return new MM_Response("Could not save query {$preparedSql}.", MM_Response::$ERROR);
			}
		}
		else
		{
			$sql = "INSERT INTO ".MM_TABLE_CUSTOM_FIELD_DATA." SET 
				custom_field_id='%s', 
				user_id='%s',
				value='%s',
				last_updated='%s'
			";
			
			$preparedSql = $wpdb->prepare($sql, $this->customFieldId, $this->userId, htmlentities(stripslashes($this->value), ENT_QUOTES, "UTF-8"), MM_Utils::getCurrentTime());
			$ret = $wpdb->query($preparedSql);
			if($ret===false)
			{
				return new MM_Response("Could not save query {$preparedSql}.", MM_Response::$ERROR);
			}
		}
		return new MM_Response();
	}
	
	public function delete()
	{	
		global $wpdb;
		if(intval($this->id)>0)
		{
			$sql = "delete from ".MM_TABLE_CUSTOM_FIELD_DATA." where id='{$this->id}' limit 1";
			
			$result = $wpdb->query($sql);
			if($result===false)
			{
				return new MM_Response("Could not remove custom field data due to sql error.", MM_Response::$ERROR);
			}
			return new MM_Response();
		}
		return new MM_Response("Could not remove invalid custom field data.", MM_Response::$ERROR);
	}
	
	
	/** GETTERS / SETTERS **/
	
	public function setCustomFieldId($id)
	{
		$this->customFieldId = $id;
	}
	
	public function getCustomFieldId()
	{
		return $this->customFieldId;
	}
	
	public function setUserId($id)
	{
		$this->userId = $id;
	}
	
	public function getUserId()
	{
		return $this->userId;
	}
	
	public function setValue($val)
	{
		$this->value = $val;
	}
	
	public function getValue()
	{
		return $this->value;
	}
	
	
	/** UTILITIES **/
	
	/**
	 * @param Number $fieldId the ID of the custom field to get data for
	 * @param Number $userId the ID of the user to get custom data for
	 * @return MM_CustomFieldData
	 */
	public static function getCustomFieldDataByUser($fieldId, $userId)
	{
		$fieldData = new MM_CustomFieldData();
		
		global $wpdb;
 		
 		$sql = "select * from ".MM_TABLE_CUSTOM_FIELD_DATA." where user_id='{$userId}' and custom_field_id='{$fieldId}' limit 1;";
 		$result = $wpdb->get_row($sql);
 		
 		if(isset($result->user_id))
 		{
 			$fieldData->setData($result);
 			
 			if($fieldData->isValid())
 			{
 				$fieldData->setId($result->id);
 			}
 		}
 		
 		return $fieldData;
	}
	
	public static function wasRecentlyUpdated($fieldId, $userId)
	{
		global $wpdb;
	
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_CUSTOM_FIELD_DATA." WHERE custom_field_id = {$fieldId} AND user_id = {$userId} AND last_updated > (now() - INTERVAL 10 SECOND) LIMIT 1;";
		$row = $wpdb->get_row($sql);
	
		if($row && isset($row->total) && intval($row->total) > 0)
		{
			return true;
		}
		return false;
	}
	
	
	/**
	 * Delete all custom field data linked to a specific user id
	 * 
	 * @param int $userId The user id to remove the data from
	 * @return MM_Response object indicating operation success or failure
	 */
	public static function deleteByUserId($userId)
	{
	    global $wpdb;
	    
	    $status = $wpdb->delete(MM_TABLE_CUSTOM_FIELD_DATA, array('user_id'=>$userId), array('%d'));
	    if ($status === false)
	    {
	        $errorMsg = $wpdb->prepare("Error deleting user id %s from mm_custom_field_data",$user_id);
	        return new MM_Response($errorMsg,MM_Response::$ERROR);
	    }
	    else
	    {
	        return new MM_Response();
	    }
	}
}