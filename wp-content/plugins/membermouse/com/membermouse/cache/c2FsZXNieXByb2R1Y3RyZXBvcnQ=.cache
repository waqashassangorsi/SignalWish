/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_SalesByProductReport extends MM_AdvancedReportBase 
{
	
	protected $visualElements = array("MM_ReportDataGrid","MM_ReportColumnChart");
	
	public static $SALESBYPRODUCT_REPORT_DATAGRID = "sales_by_product_datagrid";
	public static $SALESBYPRODUCT_REPORT_COLUMN_CHART = "sales_by_product_column_chart";
	
	//query identifiers
	public static $SALES_BY_PRODUCT_QUERY = "sales_by_product_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$SALESBYPRODUCT_REPORT_DATAGRID:
				return $this->renderSalesByProductReportDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			case self::$SALESBYPRODUCT_REPORT_COLUMN_CHART:
				return $this->renderSalesByProductReportColumnChart($elementIdentifier, $params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderSalesByProductReportDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SALES_BY_PRODUCT_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$gridHeaders = array("product"=>array('label'=>"Product"),"units"=>array('label'=>"Units"),"sales"=>array('label'=>"Sales",'columnType'=>'money'));
		$grid = MM_ReportDatagrid::createFromData(self::$SALESBYPRODUCT_REPORT_DATAGRID, $gridHeaders, $dataResponse,$directives);
		//$grid->setGridTitle("Sales By Product");
		$grid->setShowHeaderRow(false);
		
		return new MM_ReportResponse($grid->render());
	}
	
	
	public function renderSalesByProductReportColumnChart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SALES_BY_PRODUCT_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$column = MM_ReportColumnChart::createFromTopResults($elementIdentifier, "product", "sales", 10, $dataResponse);
		$column->setCurrencyValues(true);
		$column->setValueAxisTitle("Sales in ".MM_CurrencyUtil::getActiveCurrency());
		$column->setCategoryAxisTitle("Products");
		//TODO: handle no data scenario (here, or lower?)
		return new MM_ReportResponse($column->render());
	}
	
	
	/**
	 * Generate the data for the Sales By Product report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateSalesByProductReportData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Sales By Product report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Sales By Product report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$productsTable = MM_TABLE_PRODUCTS;
		$orderItemsTable = MM_TABLE_ORDER_ITEMS;
		
		$startTime = strtotime($params['start_date']);
		$endTime = strtotime($params['end_date']);
		
		$startDate = date("Y-m-d 00:00",$startTime); //mysql format
		$endDate =   date("Y-m-d 23:59:59",$endTime);
		
		//filter configuration
		$filter_type = empty($params['filter_type'])?'both':$params['filter_type'];
		switch ($filter_type)
		{
		    case 'initial':
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT);
		        break;
		    case 'rebills':
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT);
		        break;
		    default:
		        $transactionTypes = array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT);
		}
		$transactionTypeString = implode(",",$transactionTypes);
		
		//gets the units and total revenue from transactions linked to product sales (optionally including recurring payments) for transactions that occur within a date range
		//refund items do not count against the total. If there is a data error (for instance transactions exist where the linked orders/items were deleted) then the product is
		//listed as 'Unknown Product'
		
		$sql = "SELECT IFNULL(p.name,'<Unknown Product>') AS product, SUM(IFNULL(oi.quantity,1)) AS units, ABS(SUM(t.amount)) AS sales FROM {$transactionsTable} t LEFT JOIN {$orderItemsTable} oi ".
			   "ON (t.order_item_id = oi.id) LEFT JOIN {$productsTable} p ON (oi.item_id = p.id) ".
			   "WHERE t.transaction_type IN ({$transactionTypeString}) AND (t.transaction_date BETWEEN %s AND %s) ".
			   "AND t.refund_id IS NULL GROUP BY p.id ORDER BY sales DESC;";
		$results = $wpdb->get_results($wpdb->prepare($sql,$startDate,$endDate),ARRAY_A);
		
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$results);
		return $dataset;
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$SALES_BY_PRODUCT_QUERY:
				return self::generateSalesByProductReportData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

