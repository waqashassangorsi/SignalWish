/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_CustomerValueReport extends MM_AdvancedReportBase 
{
	
	protected $visualElements = array("MM_ReportDataGrid","MM_ReportLineChart");
	
	//visual element identifiers
	public static $CUSTOMER_VALUE_REPORT_DATAGRID = "customer_value_report_datagrid";
	public static $CUSTOMER_VALUE_REPORT_LINECHART = "customer_value_report_linechart";
	
	//query identifiers
	public static $CUSTOMER_VALUE_REPORT_AFFILIATE_QUERY = "customer_value_report_affiliate_query";
	public static $CUSTOMER_VALUE_REPORT_MEMBERSHIP_QUERY = "customer_value_report_membership_query";	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$CUSTOMER_VALUE_REPORT_DATAGRID:
				return $this->renderCustomerValueReportDatagrid($elementIdentifier,$params, $width, $height, $directives);
				break;
			case self::$CUSTOMER_VALUE_REPORT_LINECHART:
				return $this->renderCustomerValueLinechart($elementIdentifier,$params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderCustomerValueReportDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		if (isset($params['group_by']) && ($params['group_by'] == "membership_level"))
		{
			return $this->renderCustomerValueReportMembershipDatagrid($elementIdentifier, $params, $width, $height, $directives);
		}
		else
		{
			return $this->renderCustomerValueReportAffiliateDatagrid($elementIdentifier, $params, $width, $height, $directives);
		}
	}
	
	
	public function renderCustomerValueReportMembershipDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData($this,self::$CUSTOMER_VALUE_REPORT_MEMBERSHIP_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$gridHeaders = array("membership_level_name" => array('label'=>"Membership Level"),
							 "total_customers"	     => array('label'=>"# Cust."),
						     "0_day"           	     => array('label'=>"Day 0",    'columnType'=>'money'),
							 "7_day"          	     => array('label'=>"Day 7",    'columnType'=>'money'),
							 "14_day"          	     => array('label'=>"Day 14",   'columnType'=>'money'),
							 "21_day"          	     => array('label'=>"Day 21",   'columnType'=>'money'),
							 "30_day"         	     => array('label'=>"Day 30",   'columnType'=>'money'),
							 "60_day"          	     => array('label'=>"Day 60",   'columnType'=>'money'),
							 "90_day"          	     => array('label'=>"Day 90",   'columnType'=>'money'),
							 "120_day"         	     => array('label'=>"Day 120",  'columnType'=>'money'),
							 "150_day"         	     => array('label'=>"Day 150",  'columnType'=>'money'),
							 "180_day"         	     => array('label'=>"Day 180",  'columnType'=>'money'),
							 "360_day"         	     => array('label'=>"Day 360",  'columnType'=>'money'),
						     "all_time_value"  	     => array('label'=>"All-Time", 'columnType'=>'money')
								
		);
		$grid = MM_ReportDatagrid::createFromData(self::$CUSTOMER_VALUE_REPORT_DATAGRID, $gridHeaders, $dataResponse, $directives);
		//$grid->setGridTitle("Customer Value Report - By Membership Level");
		$grid->setShowHeaderRow(false);
		return new MM_ReportResponse($grid->render());
	}
	
	
	public function renderCustomerValueReportAffiliateDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData($this,self::$CUSTOMER_VALUE_REPORT_AFFILIATE_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$gridTitle = "Customer Value Report";
		if (isset($params['affiliate_id']))
		{
			$isSubgrid = true;
			$gridHeaders = array("sub_affiliate_id" => array('label'=>"Subaffiliate"));
			$gridTitle .= " - (showing subaffiliates for affiliate id &quot;{$params['affiliate_id']}&quot;)";
		}
		else
		{
			$isSubgrid = false;
			$gridHeaders = array("affiliate_id"    => array('label'=>"Affiliate", 'sortable'=>true, 'link'=>array('name'=>'affiliate_id','value'=>'affiliate_id')));
		}
	
		$gridHeaders += array("total_customers" => array('label'=>"# Cust."),
				"0_day"           => array('label'=>"Day 0",   'columnType'=>'money', 'sortable'=>true),
				"7_day"           => array('label'=>"Day 7",   'columnType'=>'money'),
				"14_day"          => array('label'=>"Day 14",  'columnType'=>'money'),
				"21_day"          => array('label'=>"Day 21",  'columnType'=>'money'),
				"30_day"          => array('label'=>"Day 30",  'columnType'=>'money'),
				"60_day"          => array('label'=>"Day 60",  'columnType'=>'money'),
				"90_day"          => array('label'=>"Day 90",  'columnType'=>'money'),
				"120_day"         => array('label'=>"Day 120", 'columnType'=>'money'),
				"150_day"         => array('label'=>"Day 150", 'columnType'=>'money'),
				"180_day"         => array('label'=>"Day 180", 'columnType'=>'money'),
				"360_day"         => array('label'=>"Day 360", 'columnType'=>'money'),
				"all_time_value"  => array('label'=>"All-Time",   'columnType'=>'money')
	
		);
		$grid = MM_ReportDatagrid::createFromData(self::$CUSTOMER_VALUE_REPORT_DATAGRID, $gridHeaders, $dataResponse, $directives);
		$grid->setGridTitle($gridTitle);
		if ($isSubgrid)
		{
			$grid->addBackLink(true);
		}
		return new MM_ReportResponse($grid->render());
	}
	
	
	/**
	 * Generate the data for the Customer Value report "grouped" by membership level.
	 * Constraint: The supplied params must contain a start and end date
	 *
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateCustomerValueReportMembershipData($params)
	{
		global $wpdb;
	
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Customer Value report data: Improper parameters format",MM_Response::$ERROR);
		}
	
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Customer Value report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
	
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$ordersTable = MM_TABLE_ORDERS;
		$userDataTable = MM_TABLE_USER_DATA;
		$membershipsTable = MM_TABLE_MEMBERSHIP_LEVELS;
		
		$startDate = date("Y-m-d H:i:s",strtotime($params['start_date'])); //mysql format
		$endDate =   date("Y-m-d H:i:s",strtotime($params['end_date']));
		
		$excludedUserStatuses = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR)); //quoted and comma-seperated
		$paymentStatuses = implode(",",array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT));
		
		$sql = "SELECT X.membership_level_name,".
				"(ABS(SUM(IF(days_out=0,amount,0))))/total_customers AS 0_day,".
				"(ABS(SUM(IF(days_out<=7,amount,0))))/total_customers AS 7_day,".
				"(ABS(SUM(IF(days_out<=14,amount,0))))/total_customers AS 14_day,".
				"(ABS(SUM(IF(days_out<=21,amount,0))))/total_customers AS 21_day,".
				"(ABS(SUM(IF(days_out<=30,amount,0))))/total_customers AS 30_day,".
				"(ABS(SUM(IF(days_out<=60,amount,0))))/total_customers AS 60_day,".
				"(ABS(SUM(if(days_out<=90,amount,0))))/total_customers AS 90_day,".
				"(ABS(SUM(IF(days_out<=120,amount,0))))/total_customers AS 120_day,".
				"(ABS(SUM(IF(days_out<=150,amount,0))))/total_customers AS 150_day,".
				"(ABS(SUM(IF(days_out<=180,amount,0))))/total_customers AS 180_day,".
				"(ABS(SUM(IF(days_out<=360,amount,0))))/total_customers AS 360_day,".
				"(ABS(SUM(amount)))/total_customers AS all_time_value,".
				"Y.total_customers ".
				"FROM (SELECT t.amount, t.transaction_date, mu.became_active,DATEDIFF(t.transaction_date,".
				"mu.became_active) AS days_out, mu.membership_level_id, ml.name AS membership_level_name, mu.wp_user_id ".
				"FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
				"INNER JOIN {$userDataTable} mu ON (o.user_id = mu.wp_user_id) ".
				"INNER JOIN {$membershipsTable} ml ON (mu.membership_level_id = ml.id) ".
				"WHERE (t.transaction_type IN ({$paymentStatuses})) AND (mu.became_active BETWEEN %s AND %s) AND ".
				"(mu.status NOT IN ({$excludedUserStatuses}))) AS X INNER JOIN (SELECT COUNT(1) AS total_customers, membership_level_id ".
				"FROM {$userDataTable} WHERE (became_active BETWEEN %s AND %s) ".
				"AND (status NOT IN ({$excludedUserStatuses})) GROUP BY membership_level_id) AS Y ".
				"ON (X.membership_level_id = Y.membership_level_id) ".
				"GROUP BY X.membership_level_id ORDER BY Y.total_customers DESC";
		$sql = $wpdb->prepare($sql,$startDate,$endDate,$startDate,$endDate);
		
		$results = $wpdb->get_results($sql,ARRAY_A);
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$results);
		return $dataset;
	}
	
	
	/**
	 * Generate the data for the Customer Value report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateCustomerValueReportAffiliateData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Customer Value report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Affiliate report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$ordersTable = MM_TABLE_ORDERS;
		$userDataTable = MM_TABLE_USER_DATA;
		
		$startDate = date("Y-m-d H:i:s",strtotime($params['start_date'])); //mysql format
		$endDate =   date("Y-m-d H:i:s",strtotime($params['end_date']));
		
		$excludedUserStatuses = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR)); //quoted and comma-seperated
		
		if (isset($params['affiliate_id']))
		{
			//this is a drilldown
			$affiliateValue = ($params['affiliate_id'] == "[unspecified]")?"":$params['affiliate_id'];
			$sql = "SELECT IF(Y.origin_affiliate_id='','[unspecified]',Y.origin_affiliate_id) AS affiliate_id,".
					"IF(Y.origin_subaffiliate_id='','[unspecified]',Y.origin_subaffiliate_id) AS sub_affiliate_id,".
					"(ABS(SUM(IF(days_out=0,amount,0))))/total_customers AS 0_day,".
					"(ABS(SUM(IF(days_out<=7,amount,0))))/total_customers AS 7_day,".
					"(ABS(SUM(IF(days_out<=14,amount,0))))/total_customers AS 14_day,".
					"(ABS(SUM(IF(days_out<=21,amount,0))))/total_customers AS 21_day,".
					"(ABS(SUM(IF(days_out<=30,amount,0))))/total_customers AS 30_day,".
					"(ABS(SUM(IF(days_out<=60,amount,0))))/total_customers AS 60_day,".
					"(ABS(SUM(if(days_out<=90,amount,0))))/total_customers AS 90_day,".
					"(ABS(SUM(IF(days_out<=120,amount,0))))/total_customers AS 120_day,".
					"(ABS(SUM(IF(days_out<=150,amount,0))))/total_customers AS 150_day,".
					"(ABS(SUM(IF(days_out<=180,amount,0))))/total_customers AS 180_day,".
					"(ABS(SUM(IF(days_out<=360,amount,0))))/total_customers AS 360_day,".
					"(ABS(SUM(IFNULL(amount,0))))/total_customers AS all_time_value,".
					"Y.total_customers ".
					"FROM (SELECT t.amount, t.transaction_date, mu.became_active,DATEDIFF(t.transaction_date,".
					"mu.became_active) AS days_out, mu.origin_affiliate_id,  mu.origin_subaffiliate_id, mu.wp_user_id ".
					"FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
					"INNER JOIN {$userDataTable} mu ON (o.user_id = mu.wp_user_id) WHERE (mu.origin_affiliate_id = %s) AND  (t.transaction_type IN ".
					"('".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."','".MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."')) ".
					"AND (mu.became_active BETWEEN %s AND %s) AND ".
					"(mu.status NOT IN ({$excludedUserStatuses}))) AS X RIGHT OUTER JOIN (SELECT COUNT(1) AS total_customers, origin_affiliate_id, ".
					"origin_subaffiliate_id FROM {$userDataTable} WHERE (origin_affiliate_id = %s) AND (became_active BETWEEN %s AND %s) ".
					"AND (status NOT IN ({$excludedUserStatuses})) GROUP BY origin_subaffiliate_id) AS Y ".
					"ON (X.origin_subaffiliate_id = Y.origin_subaffiliate_id) ".
					"GROUP BY X.origin_subaffiliate_id ORDER BY Y.total_customers DESC";
			$sql = $wpdb->prepare($sql,$affiliateValue,$startDate,$endDate,$affiliateValue,$startDate,$endDate);
		}
		else 
		{
			//top-level query
			$sql = "SELECT IF(Y.origin_affiliate_id='','[unspecified]',Y.origin_affiliate_id) AS affiliate_id,".
					"IF(Y.origin_subaffiliate_id='','[unspecified]',Y.origin_subaffiliate_id) AS sub_affiliate_id,".
					"(ABS(SUM(IF(days_out=0,amount,0))))/total_customers AS 0_day,".
					"(ABS(SUM(IF(days_out<=7,amount,0))))/total_customers AS 7_day,".
					"(ABS(SUM(IF(days_out<=14,amount,0))))/total_customers AS 14_day,".
					"(ABS(SUM(IF(days_out<=21,amount,0))))/total_customers AS 21_day,".
					"(ABS(SUM(IF(days_out<=30,amount,0))))/total_customers AS 30_day,".
					"(ABS(SUM(IF(days_out<=60,amount,0))))/total_customers AS 60_day,".
					"(ABS(SUM(if(days_out<=90,amount,0))))/total_customers AS 90_day,".
					"(ABS(SUM(IF(days_out<=120,amount,0))))/total_customers AS 120_day,".
					"(ABS(SUM(IF(days_out<=150,amount,0))))/total_customers AS 150_day,".
					"(ABS(SUM(IF(days_out<=180,amount,0))))/total_customers AS 180_day,".
					"(ABS(SUM(IF(days_out<=360,amount,0))))/total_customers AS 360_day,".
					"(ABS(SUM(IFNULL(amount,0))))/total_customers AS all_time_value,".
					"Y.total_customers ".
					"FROM (SELECT t.amount, t.transaction_date, mu.became_active,DATEDIFF(t.transaction_date,".
					"mu.became_active) AS days_out, mu.origin_affiliate_id,  mu.origin_subaffiliate_id, mu.wp_user_id ".
					"FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
					"INNER JOIN {$userDataTable} mu ON (o.user_id = mu.wp_user_id) WHERE (t.transaction_type IN ".
					"('".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."','".MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."')) ".
					"AND (mu.became_active BETWEEN %s AND %s) AND ".
					"(mu.status NOT IN ({$excludedUserStatuses}))) AS X RIGHT OUTER JOIN (SELECT COUNT(1) AS total_customers, origin_affiliate_id, ".
					"origin_subaffiliate_id FROM {$userDataTable} WHERE (became_active BETWEEN %s AND %s) ".
					"AND (status NOT IN ({$excludedUserStatuses})) GROUP BY origin_affiliate_id) AS Y ".
					"ON (X.origin_affiliate_id = Y.origin_affiliate_id) ".
					"GROUP BY X.origin_affiliate_id ORDER BY Y.total_customers DESC";
			$sql = $wpdb->prepare($sql,$startDate,$endDate,$startDate,$endDate);
		}
		
		$results = $wpdb->get_results($sql,ARRAY_A);
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$results);
		return $dataset;
	}
	
	
	public function renderCustomerValueLinechart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		
		if (isset($params['group_by']) && ($params['group_by'] == "membership_level"))
		{
			$keyColumn = "membership_level_name";
			$dataResponse = MM_ReportDataRetriever::requestData(get_class($this),self::$CUSTOMER_VALUE_REPORT_MEMBERSHIP_QUERY, $params);
		}
		else
		{
			$keyColumn = (isset($params['affiliate_id']))?"sub_affiliate_id":"affiliate_id";
			$dataResponse = MM_ReportDataRetriever::requestData(get_class($this),self::$CUSTOMER_VALUE_REPORT_AFFILIATE_QUERY, $params);
		}
		
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		//create the line chart
		$line = new MM_ReportLineChart($elementIdentifier);
		
		//do any required sorting of the data
		if (isset($directives['sortColumn']))
		{
			MM_AbstractReportDataModel::sortResults($dataResponse->message, $directives['sortColumn'], $directives['sortDirection']);
		}
		
		$firstLine = array_keys(reset($dataResponse->message));
		$fields = array();
		foreach ($firstLine as $afield) //this section allows the buckets to be changed without breaking the line chart
		{
			$matches = array();
			if (preg_match("/^([0-9]+)_day$/",$afield,$matches) == 1)
			{
				$fields[$afield] = $matches[1];
			}
		}
		
		$count = 0;
		foreach ($dataResponse->message as $v)
		{
			if ($count++ >= 10)
			{
				break;
			}
			$model = new MM_ReportCategoryValueModel();
			$model->setTitle($v[$keyColumn]);
			foreach ($fields as $bucketName=>$bucket)
			{
				$model->addValues($bucket, $v[$bucketName]);
			}
			$line->addModel($model);
		}
		
			
		$line->setCurrencyValues(true);
		$line->setCurrencyType(MM_CurrencyUtil::getActiveCurrency());
		$line->setValueAxisTitle("Customer value in ".MM_CurrencyUtil::getActiveCurrency());
		return new MM_ReportResponse($line->render());
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$CUSTOMER_VALUE_REPORT_AFFILIATE_QUERY:
				return self::generateCustomerValueReportAffiliateData($params);
				break;
			case self::$CUSTOMER_VALUE_REPORT_MEMBERSHIP_QUERY:
				return self::generateCustomerValueReportMembershipData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

