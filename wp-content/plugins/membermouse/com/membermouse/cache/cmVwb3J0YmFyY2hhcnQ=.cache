/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ReportBarChart extends MM_ReportVisualElement
{
	
	protected $categoryField = "category";
	
	protected $valueField = "value";
	
	protected $orientation = "";
	
	protected $valueAxisTitle = "";
	
	protected $categoryAxisTitle = "";
	
	protected $balloonText = "";
	
	protected $title = "";
	
	protected $currencyValues = false;
	
	protected $labelRotation = 45;
	
	public static $HORIZONTAL_ORIENTATION = "horizontal";
	public static $VERTICAL_ORIENTATION = "vertical";

	
	public function __construct($container="",$directives="")
	{
		parent::__construct($container,$directives);
	}
	

	public static function getJavascriptDependencies()
	{
		return array (
				MM_PLUGIN_URL."/resources/js/amcharts/amcharts/amcharts.js",
				MM_PLUGIN_URL."/resources/js/amcharts/amcharts/serial.js" 
		);
	}


	public function render(MM_ReportCategoryValueModel $model = null)
	{
		if (empty($this->balloonText))
		{
			$this->setBalloonText("[[{$this->categoryField}]] : [[{$this->valueField}]]");
		}
		
		if (!is_null($model))
		{
			$this->setModel($model);
		}
		
		$output = "";
		if (!empty($this->container)&&($this->model instanceof MM_ReportCategoryValueModel))
		{
			$values = $this->model->getValues();
			if (is_array($values))
			{
				if ($this->currencyValues)
				{
					$this->setBalloonText("[[{$this->categoryField}]] : [[balloon]]");
				}
				$colorCounter = 0;
				$metaOverride = array('postfix_iso'=>false);
				foreach($values as &$v)
				{
					if ($this->currencyValues && is_numeric($v[$this->valueField]))
					{
						$v['balloon'] = _mmof($v[$this->valueField],_mmfc(),$metaOverride);
					}
					$v['color'] = $this->getColorForPosition($colorCounter++);
				}
			}
			$jsonData = json_encode($values);
			$output .= "<script type='text/javascript'>\n";
			$output .= "jQuery(function() {\n";
			$output .= "var {$this->container}_chart = AmCharts.makeChart('{$this->container}', {\n";
			$output .= "	'theme': 'none',\n";
			$output .= "	'type': 'serial',\n";
			$output .= "	'startDuration': 2,\n";
			$output .= "	'dataProvider': {$jsonData},\n";
			$output .= "	'valueAxes': [{\n";
			$output .= "		'position': 'left',\n";
			if ($this->currencyValues)
			{
				$output .= "	'precision': 2,\n";
			}
			$output .= "		'title': '{$this->valueAxisTitle}'\n";
			$output .= "	}],\n";
			$output .= "	'graphs': [{\n";
			if (!empty($this->balloonText))
			{
				$output .= "'balloonText': '{$this->balloonText}',\n";
			}
			$output .= "	'colorField': 'color',\n";
			$output .= "	'fillAlphas': 1,\n";
			$output .= "	'lineAlpha': 0.1,\n";
			$output .= "	'fixedColumnWidth': 50,\n";
			$output .= "	'type': 'column',\n";
			$output .= "	'valueField': '{$this->valueField}'\n";
			$output .= "	}],\n";
			$output .= "	'depth3D': 20,\n";
			$output .= "	'angle': 30,\n";
			$rotate = ($this->orientation !== self::$VERTICAL_ORIENTATION)?"true":"false";
			$output .= "	'rotate': {$rotate},\n";
			$output .= "	'chartCursor': {\n";
			$output .= "	'categoryBalloonEnabled': false,\n";
			$output .= "	'cursorAlpha': 0,\n";
			$output .= "	'zoomable': false\n";
			$output .= "	},\n";
			$output .= "	'categoryField': '{$this->categoryField}',\n";
			$output .= "	'categoryAxis': {\n";
			$output .= "	'gridPosition': 'start',\n";
			$output .= "	'title':'{$this->categoryAxisTitle}',\n";
			$output .= "	'labelRotation': {$this->labelRotation},\n";
			$output .= "	}\n";
			$output .= "});\n";
			$output .= "});";
			$output .= "</script>\n";
		}
		return $output;
	}


	public function getCategoryField()
	{
		return $this->categoryField;
	}


	public function setCategoryField($categoryField)
	{
		$this->categoryField = $categoryField;
		return $this;
	}


	public function getValueField()
	{
		return $this->valueField;
	}


	public function setValueField($valueField)
	{
		$this->valueField = $valueField;
		return $this;
	}


	public function getOrientation()
	{
		return $this->orientation;
	}


	public function setOrientation($orientation)
	{
		$this->orientation = $orientation;
		return $this;
	}


	public function getValueAxisTitle()
	{
		return $this->valueAxisTitle;
	}


	public function setValueAxisTitle($valueAxisTitle)
	{
		$this->valueAxisTitle = $valueAxisTitle;
		return $this;
	}


	public function getCategoryAxisTitle()
	{
		return $this->categoryAxisTitle;
	}


	public function setCategoryAxisTitle($categoryAxisTitle)
	{
		$this->categoryAxisTitle = $categoryAxisTitle;
	}


	public function getBalloonText()
	{
		return $this->balloonText;
	}


	public function setBalloonText($balloonText)
	{
		$this->balloonText = $balloonText;
		return $this;
	} 


	public function getTitle()
	{
		return $this->title;
	}


	public function setTitle($title)
	{
		$this->title = $title;
		return $this;
	}
	
	
	public static function createFromTopResults($elementIdentifier, $categoryField, $valueField, $numRecords, MM_ReportResponse $resultObject, $directives=array())
	{
		if (!MM_ReportResponse::isSuccess($resultObject))
		{
			return null;
		}
		$bar = new MM_ReportBarChart($elementIdentifier,$directives);
		
		//create and configure the data model
		$model = MM_ReportCategoryValueModel::createFromTopResults($resultObject->message, $categoryField, $valueField, $numRecords);
		$bar->setModel($model);
		return $bar;
	}
	
	
	public function getCurrencyValues() 
	{
		return $this->currencyValues;
	}
	
	
	public function setCurrencyValues($valuesAreCurrency) 
	{
		$this->currencyValues = $valuesAreCurrency;
	}


	public function getLabelRotation()
	{
		return $this->labelRotation;
	}


	public function setLabelRotation($labelRotation)
	{
		$this->labelRotation = $labelRotation;
	}
	
	
}
