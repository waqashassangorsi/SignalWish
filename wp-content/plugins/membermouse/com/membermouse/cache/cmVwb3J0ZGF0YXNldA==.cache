/**
*
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
* 
* MM_ReportDataset is a container for one or more generated datasets used by the reporting modules
* Sometimes when generating data, it is cheaper to generate multiple datasets and cache them (vs only the one requested)
* so this object allows multiple datasets to be transported, and has methods to designate which dataset is the one that was
* requested as well as which additional datasets were generated that should be cached
*/

class MM_ReportDataset extends MM_ReportResponse 
{
	public $datasetType;
	
	protected $primaryDataset;
	protected $additionalDatasets;
	
	public static $SINGLE_DATASET = "single_dataset";
	public static $COMPOUND_DATASET = "compound_dataset";
	
	
	public function __construct($msg="", $type="success")
	{
		parent::__construct($msg,$type);
		$this->datasetType = self::$SINGLE_DATASET; //default
	}
	
	//factory methods
	public static function createSingleReportDataset($params="", $data="")
	{
		$dataset = new MM_ReportDataset();
		$dataset->setPrimaryDataset($params, $data);

		return $dataset;
	}
	
	
	public static function createCompoundReportDataset($primaryDatasetParams="", $primaryDatasetData="")
	{
		$dataset = new MM_ReportDataset();
		$dataset->datasetType = self::$COMPOUND_DATASET;
		$dataset->setPrimaryDataset($primaryDatasetParams, $primaryDatasetData);
	
		return $dataset;
	}
	
	
	/**
	 * Sets the primary dataset
	 * 
	 * @param String $params The params string that was used to create the data
	 * @param mixed $data The data. Usually an array
	 */
	public function setPrimaryDataset($params, $data)
	{
		if (!($this->primaryDataset instanceof stdClass))
		{
			$this->primaryDataset = new stdClass();
		}
		$this->primaryDataset->params = $params;
		$this->primaryDataset->data = $data;
	}
	
	
	/**
	 * Returns the primary dataset
	 * 
	 * @return object with attributes 'params' and 'data'
	 */
	public function getPrimaryDataset()
	{
		return $this->primaryDataset;
	}
	
	
	/**
	 * Adds an addtional dataset
	 *
	 * @param String $params The params string that was used to create the data
	 * @param mixed $data The data. Usually an array
	 */
	public function addAdditionalDataset($params, $data)
	{
		if (!is_array($this->additionalDatasets))
		{
			$this->additionalDatasets = array();
		}
		$newDataset = new stdClass();
		$newDataset->params = $params;
		$newDataset->data = $data;
		$this->additionalDatasets[] = $newDataset;
	}
	
	
	/**
	 * Returns an array of any additional datasets
	 * 
	 * @return array of objects (of type stdClass), each having attributes 'params' and 'data'
	 */
	public function getAdditionalDatasets()
	{
		return $this->additionalDatasets;
	}
}