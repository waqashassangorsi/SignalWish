/**
 * 
 * @author Ben Daughtry, MemberMouse LLC
 * This is an implementation of the Email Service Provider interface for GetResponse. The GetResponse API is a 
 * REST api which is documented at https://apidocs.getresponse.com/v3
 * An API key is used for authentication, and requests are sent to the endpoint at the URL below in $GETRESPONSE_DEFAULT_URL
 * The highest level of GetResponse account is the GetResponse360 account, and these accounts have custom api urls, so this parameter is
 * configurable
 *
 */
class MM_GetResponseEmailServiceProvider extends MM_AbstractEmailServiceProvider 
{
	protected $apiKey;
	protected $apiUrl;
	protected $is360 = false;
	private $customFieldPrefix = "mm";
	
	//the default API url
	protected static $GETRESPONSE_DEFAULT_URL = "https://api.getresponse.com/v3";
	
	//Custom fields have to be pre-defined before they can be added to a customer, and this array represents the remote state of the custom fields
	//the format is key=membermouse short name, value= getresponse custom field id
	protected $syncedCustoms = array();
	
	/**
	 *
	 * The GetResponse api requires an apiKey so this is a required parameter for 
	 * the constructor
	 * 
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info)
	{
		$additional_data = (is_object($provider_info) && isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (!empty($provider_info->api_key))
		{
			parent::__construct($provider_info);
			 
			$this->apiKey = $provider_info->api_key;
			$this->is360 = isset($additional_data['is360'])?(bool)$additional_data['is360']:false;
			$this->apiUrl = isset($additional_data['apiUrl'])?$additional_data['apiUrl']:MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL;
			$this->syncedCustoms = isset($additional_data['syncedCustoms'])?$additional_data['syncedCustoms']:$this->syncedCustoms;
		}
	}
	 
	
	/**
	 * Adds a member to a list and syncs custom field data with first name, last name, and product bundle status
	 * 
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * 
	 * @return MM_Response indicating success or failure
	 */ 
	public function addMemberToList($email,$listId,$includeBundleInfo=true)
	{ 
	    if (empty($listId))
	    {
	        //no list supplied, nothing to do... return success 
	        return new MM_Response();
	    }
	     
	    $member = MM_User::findByEmail($email); 
	    if (!$member->isValid())
	    { 
	        return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
	    } 
	    
	    $customFieldValues = $this->getCustomFieldValues($email, true); 
	    if($customFieldValues instanceof MM_Response)
	    {
	        return $customFieldValues;
	    }
	    
	    //returned message is an object formatted as required by the custom fields format specifier. 
	    $jsonObject = new stdClass();
	    $jsonObject->name = $member->getFullName();
	    $jsonObject->campaign = new stdClass();
	    $jsonObject->campaign->campaignId = $listId;
	    $jsonObject->email = $email;
	    $jsonObject->dayOfCycle = 0;
	    $jsonObject->ipAddress = MM_Utils::getClientIPAddress();
	    $jsonObject->customFieldValues = $customFieldValues; 
	    $jsonData = json_encode($jsonObject);
	     
	    $endpointUrl = "/contacts";
	    $callResponse = $this->callApi($endpointUrl,"POST",$jsonData);
	     
	    if (MM_Response::isError($callResponse))
	    {
	        //TODO: retrieve friendly name for listId?
	        return new MM_Response("Error adding {$email} to list with id {$listId}: {$callResponse->message}",MM_Response::$ERROR);
	    } 
	    return new MM_Response();
	}
	
	/**
	 *
	 * Gets the custom fields and values to associate with a member. Then map them to the field references from GetResponse.
	 *
	 * @param String $email The email address of the member
	 * @param boolean $includeBundleInfo indicates if bundle information should be passed
	 * @return array of objects that contain the customFieldId and value keys as required by the GetResponse API.
	 */
	private function getCustomFieldValues($email, $includeBundleInfo)
	{
	    /// First sync the custom fields with GR if appropriate.
	    $response = $this->syncCustomFields($email,true);
	    if(MM_Response::isError($response))
	    {
	        return $response;
	    }
	    
	    /// Second, map the GR fields with our local custom fields.
	    $customValues = array(); 
	    $customFields = $this->getMemberCustomFields($email, false, $includeBundleInfo);
	   
	    if(isset($customFields->message) && is_array($customFields->message) && count($customFields->message)>0)
	    {  
	        foreach($customFields->message as $key=>$val)
	        {
	           $key = $this->formatLocalField($key); 
	           $keyId = array_search ($key, $this->syncedCustoms);
	           if($keyId!==false)
	           {
    	           $entry = new stdClass();
    	           $entry->customFieldId = $keyId;
    	           $entry->value = array($val);
    	           $customValues[] = $entry;
	           }
	        } 
	    }  
	    return $customValues;
	}
	
	
	/**
	 *
	 * Gets the custom fields to associate with a member. Currently this is first_name, last_name, email, and any access tags
	 * 
	 * @param String $email The email address of the member
	 * @param boolean $structured (optional) Determines whether or not to structure the fields in the custom fields format required by GetResponse
	 * @param boolean $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response containing an array of merge data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	protected function getMemberCustomFields($email,$structured=true,$includeBundleInfo=true)
	{
		$user = MM_User::findByEmail($email);
		
		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}
	
		$customs = array();
		$firstName = $user->getFirstName();
		$lastName = $user->getLastName();
		
		if(!empty($firstName))
		{
			$customs['firstname'] = $firstName;
		}
		
		if(!empty($lastName))
		{
			$customs['lastname'] = $lastName;
		}
		
		if($includeBundleInfo)
		{
			//set all access tags false to start
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = str_replace("_","",strtoupper($reqTag));
				$customs[$reqTag] = "FALSE";
			}
		
			//now set the ones the user has equal to true
			$appliedBundles = $user->getAppliedBundles();
			
			foreach ($appliedBundles as $appliedBundle)
			{
				$bundle = $appliedBundle->getBundle();
					
				if($bundle->isValid())
				{
					$shortName = str_replace("_","",strtoupper($bundle->getShortName()));
					$customs[$shortName] = "TRUE";
				}
			}
		}
		
		if ($structured)
		{
			return new MM_Response($this->transformCustomFieldStructure($customs));
		}
		else
		{
			return new MM_Response($customs);
		}
	}
	
	
	/**
	 * Reformats a key/value array into the nested array structure used by GetResponse for custom fields
	 * 
	 * @param array $customs A key/value array of the custom field data
	 * @param boolean $reverse If $reverse is true, this takes the GetResponse format and outputs it as a key/value array
	 * @return array An array containing the nested arrays in a format acceptable for transit to GetResponse
	 */
	protected function transformCustomFieldStructure($customs,$reverse=false)
	{
	    if ($reverse === true)
	    {
	        $reversed = array();
	        if (is_array($customs))
	        {
	            foreach ($customs as $customsObj)
	            {
	                if (isset($customsObj->customFieldId) && isset($customsObj->value))
	                {
	                    $k = $customsObj->customFieldId;
	                    $v = $customsObj->value;
	                    $reversed[$k] = $v;
	                }
	            }
	        }
	        return $reversed;
	    }
	    else 
	    {
	        $structuredArray = array();
    		foreach ($customs as $k=>$v)
    		{
    			$structuredArray[] = (object)array("customFieldId"=>$k,"value"=>array($v));
    		}
    		return $structuredArray;
	    }
	}	
	
	
	/**
	 * Changes a members list subscription based on a change in membership level. 
	 * GetResponse allows a one-operation move
	 * 
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The member type id of the member's new member type
	 * 
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType) 
	{  
		//step 1: get the member's current information
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid()) 
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		} 
		
		//get the old list
		$oldListId = $member->getSubscribedListId();
		
		//get the new list
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			return new MM_Response($newListId->message,MM_Response::$ERROR);
		}
		$newListId = $newListId->message;
		
		if (empty($oldListId))
		{ 
			//the member was previously not subscribed to a list, so this is a simple add operation - fulfills condition a.
			return $this->addMemberToList($email, $newListId);
		}
		
		if (empty($newListId))
		{ 
			//there is an oldListId, but not a destination (newListId), which means its a simple remove operation - fulfills condition b
			return $this->removeMemberFromList($email, $oldListId);
		}
		
		if ($oldListId == $newListId)
		{ 
			//list is the same, update member and return - condition d.
			return $this->updateMember($email, $oldListId);
		}
		
		$oldListExists = true;
		$newListExists = true;
		
		try 
		{
			//retrieve the lists
			$listsResponse = $this->getLists();
			if ($listsResponse->type == MM_Response::$ERROR)
			{
				//error retrieving the campaigns (a basic op).. something is wrong, so report it
				return $listsResponse;
			}
			//now test to make sure the lists still exist
			$lists = $listsResponse->message;
			if (!array_key_exists($oldListId, $lists))
			{
				$oldListExists = false;
			}
			
			if (!array_key_exists($newListId, $lists))
			{
				$newListExists = false;
			}
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
		
		
		if (!$oldListExists && $newListExists)
		{ 
			return $this->addMemberToList($email, $newListId);  //source list was [probably] deleted, making this condition a
		}
		
		if ($oldListExists && !$newListExists)
		{  
			return $this->removeMemberFromList($email, $oldListId); //destination list was [probably] deleted making this condition b
		}
		
		try 
		{
			//if execution reaches here, there is a oldListId and a newListId, so find (and update) the contact and process the move - fulfills condition c.
			$contactId_response = $this->getContactId($email, $oldListId);
			if ($contactId_response->type == MM_Response::$ERROR)
			{ 
				return $contactId_response; //error retrieving the contact id
			}
			$contactId = $contactId_response->message; //an array
			if (empty($contactId))
			{ 
				//contact was not found on the old list, try it as a simple add
				return $this->addMemberToList($email, $newListId);
			} 
			$this->updateMemberWithContactId($contactId,$email,"",$newListId); //sync any custom field changes 
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Configures the GetResponse provider in order to do the initial connect
	 * 
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param An array containing the values posted from the form rendered by renderOptionsDialog
	 * @return MM_Response indicating success or failure
	 */
	public function configureFromOptions($optionData) 
	{
		if (isset($optionData['getresponse_api_key']) && !empty($optionData['getresponse_api_key'])) 
		{
			$this->setAPIKey($optionData['getresponse_api_key']);
			if (isset($optionData['is360']) && ((bool)$optionData))
			{
				$this->setGetResponse360(true);
				$this->setApiUrl($optionData['custom_api_url']);
			}
			else
			{
				$this->setGetResponse360(false);
				$this->setApiUrl(MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL);
			}
			$this->client = new MM_jsonRPCClient($this->getApiUrl());
			return new MM_Response();
		}
		else
		{
			return new MM_Response("Please enter a valid API key to use GetResponse",MM_Response::$ERROR);
		}
		
	}
	
	
	/**
	 *
	 * Return the lists (campaigns) associated with the configured apiKey, in an array keyed by id with the values being list names
	 * @return MM_Response containing lists as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getLists() 
	{
	    try 
	    {
	        $endpointUrl = "/campaigns";
	        $callResponse = $this->callApi($endpointUrl,"GET");
	        if (MM_Response::isError($callResponse))
	        {
	            throw new Exception("There was an error connecting to GetResponse. Please check your configuration settings");
	        }
	        $decodedLists = json_decode($callResponse->message);
	        if ($decodedLists === false)
	        {
	            throw new Exception("GetResponse returned an invalid response; Please check your configuration settings and try again");
	        }
	        $lists = array();
	        if (is_array($decodedLists))
	        {
	            foreach ($decodedLists as $aList)
	            {
	                if (isset($aList->campaignId))
	                {
	                    $lists[$aList->campaignId] = isset($aList->name)?$aList->name:"(No name configured)";
	                }
	            }
	        } 
	        return new MM_Response($lists,MM_Response::$SUCCESS);
	    } 
	    catch (Exception $e) 
	    {
	        return new MM_Response($e->getMessage(),MM_Response::$ERROR);
	    }		
	}	
	
	/**
	 * Gets the custom fields currently registered on GetResponse and syncs local class member. 
	 * @return MM_Response object with the synced array or error message.
	 */
	public function getCustomFields()
	{  
	    $this->syncedCustoms = (is_array( $this->syncedCustoms ))? $this->syncedCustoms:array();
	    try
	    {
	        $endpointUrl = "/custom-fields"; 
	        $callResponse = $this->callApi($endpointUrl,"GET");
	        
	        if (MM_Response::isError($callResponse))
	        {
	            throw new Exception("There was an error connecting to GetResponse. Please check your configuration settings");
	        }
	      
	        $cfs = json_decode($callResponse->message); 
	        if ($cfs === false)
	        { 
	            throw new Exception("GetResponse returned an invalid response; Please check your configuration settings and try again");
	        }  
	        
	        if (is_array($cfs))
	        { 
	            foreach ($cfs as $customField)
	            {  
	                if (isset($customField->customFieldId))
	                {
	                    $this->syncedCustoms[$customField->customFieldId] = isset($customField->name)?$customField->name:"(No name configured)";
	                }
	            }
	        }
	        return new MM_Response($this->syncedCustoms,MM_Response::$SUCCESS);
	    }
	    catch (Exception $e)
	    {
	        return new MM_Response($e->getMessage(),MM_Response::$ERROR);
	    }
	}	
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && (isset($optionData['getresponse_api_key'])) && !empty($optionData['getresponse_api_key']))
		{
			//make sure there is a custom api url if they selected that this is a getresponse360 account
			if (isset($optionData['is360']) && ($optionData['is360'] == true) && (!isset($optionData['custom_api_url']) || empty($optionData['custom_api_url'])))
			{
				return new MM_Response("Error: No custom url supplied. For GetResponse360 accounts, a custom API url is required. This can be obtained from your GetResponse account manager",MM_Response::$ERROR);
			}
			
			$provider_token = $optionData['provider_token'];
			$api_key = $optionData['getresponse_api_key'];
			$prospect_list_id = $optionData['prospect_list_id'];
			$cancellation_list_id = $optionData['cancellation_list_id'];
				
			$this->setAPIKey($api_key);
			if (isset($optionData['is360']))
			{
				$this->setGetResponse360($optionData['is360']);
			}
			else
			{
				$this->setGetResponse360(false);
			}
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid())
			{
				//first write the provider's configuration options
				$provider_entity->setAPIKey($api_key);
				if ($this->isGetResponse360())
				{
					$provider_entity->setConfigOption("is360", true);
					$provider_entity->setConfigOption("apiUrl", $optionData['custom_api_url']);
				}
				else
				{
					$provider_entity->setConfigOption("is360", false);
				}
				$provider_entity->setActive(true);
				$provider_entity->setProspectListID($prospect_list_id);
				$provider_entity->setCancellationListID($cancellation_list_id);
				$commit_response = $provider_entity->commitData();
				if ($commit_response->type == MM_Response::$ERROR)
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the list mappings
				if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings']))
				{
					$provider_id = $provider_entity->getId();
					return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
				}
			}
			else
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else
		{
			//optionData is not an array, or the api key was not sent
			return new MM_Response("Failed to save settings: Incorrect options format or API Key not sent",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Removes a member from a list
	 * 
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * 
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)  
	{ 
		if (empty($listId)) 
		{ 
			return new MM_Response();
		}
	
		try 
		{
			$getContactResponse = $this->getContactId($email, $listId);
			if (MM_Response::isError($getContactResponse))
			{ 
			    throw new Exception($getContactResponse->message);
			}
			$contactId = $getContactResponse->message;
			if (empty($contactId))
			{ 
				//contact is not on the list, return success
				return new MM_Response();
			}
			
			
			$endpointUrl = "/contacts/{$contactId}";
			$callResponse = $this->callApi($endpointUrl,"DELETE");
			if (MM_Response::isSuccess($callResponse))
			{ 
				return new MM_Response(); //remote side returned expected success message
			}
			else
			{ 
				return new MM_Response("GetResponse removal request sent, but remote side did not return expected message",MM_Response::$ERROR);
			}
		}
		catch (Exception $e)
		{ 
			return new MM_Response("Error removing {$email} from list:".$e->getMessage(),MM_Response::$ERROR);
		} 
		return new MM_Response();
	}
	
	
	/**
	 * Takes an email address and retrieves the GetResponse contactId for that contact. 
	 * Returns the first id if multiple values are returned (shouldn't happen), returns empty string if contact is not found
	 * All return values are wrapped in an MM_Response
	 * Returns an error if the api returns an error condition
	 * 
	 * @param String $email The email of the contact
	 * @param String $listId The CampaignId of the campaign to search for the contact in 
	 * 
	 * @return MM_Response An MM_Response object containing a contact id in the message on success, or an error on failure 
	 */
	protected function getContactId($email,$listId)
	{
	    if (empty($email))
	    {
	        return new MM_Response("Unable to return GetResponse contactId: no email was supplied");
	    }
	    
		if (empty($listId))
		{
			return new MM_Response("Unable to return GetResponse contactId for {$email} because no campaign was supplied");
		}
		
		try 
		{
		    $endpointUrl = "/contacts?query[email]={$email}&query[campaignId]={$listId}";
		    $callResponse = $this->callApi($endpointUrl,"GET");
		    if (MM_Response::isError($callResponse))
		    {
		        return($callResponse);
		    }
		    $decodedResponse = json_decode($callResponse->message);
		    if (!is_array($decodedResponse) || (count($decodedResponse) == 0))
		    {
		        return new MM_Response("");
		    }
		    
		    //received an array, return the first item
		    $firstContact = reset($decodedResponse);
		    $contactId = isset($firstContact->contactId)?$firstContact->contactId:"";
		    return new MM_Response($contactId);
		}
		catch (Exception $e)
		{
			return new MM_Response("Error retrieving contactId for $email",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Takes a contactId and retrieves contact details
	 * 
	 * @param String $contactId
	 * @return MM_Response The contact object on success, or error message on fail
	 */
	protected function getContact($contactId)
	{
	    if (empty($contactId))
	    {
	        return new MM_Response("Unable to return GetResponse contact: no contactId was supplied");
	    }
	    
	    $endpointUrl = "/contacts/{$contactId}";
	    $callResponse = $this->callApi($endpointUrl,"GET");
	    if (MM_Response::isError($callResponse))
	    {
	        return($callResponse);
	    }
	    $decodedObj = json_decode($callResponse->message);
	    if (!is_object($decodedObj))
	    {
	        return new MM_Response("Unable to return GetResponse contact: no contact returned for supplied contactId");
	    }
	    
	    return new MM_Response($decodedObj);
	}
	
	
	/**
	 * Updates a members information attached to a subscribed list
	 * 
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 * @return MM_Response indicating success or failure 
	 */
	public function updateMember($email,$listId,$newEmail="") 
	{
		$contactIdResponse = $this->getContactId($email, $listId);
		if (MM_Response::isError($contactIdResponse))
		{
			return $contactIdResponse;
		}
		$contactId = $contactIdResponse->message;
		return $this->updateMemberWithContactId($contactId, $email,$newEmail);
	}
	
	
	/**
	 * This method allows a member to be updated based on their GetResponse contact id. Placing this logic here instead of
	 * in updateMember eliminates the need to make a duplicate call to retrieve the contact id if you already have it
	 * 
	 * @param String $contactId - The id of the contact, which is unique to a campaign
	 * @param String $currentEmail - The current email address of the contact
	 * @param String $newEmail (optional) - If changing email addresses, this is the new email
	 */
	protected function updateMemberWithContactId($contactId, $currentEmail, $newEmail="", $listId="")
	{ 
		try
		{
			if(empty($contactId))
			{ 
				return new MM_Response("Contact ID is required while attempting to update information",MM_Response::$ERROR);
			}  
			 
			$customValues = $this->getCustomFieldValues($currentEmail,true);
			if($customValues instanceof MM_Response)
			{
			    return $customValues;
			}
			
			$jsonObj = new stdClass();
			$jsonObj->customFieldValues = $customValues;
			$jsonObj->email = empty($newEmail)?$currentEmail:$newEmail;
			if(!empty($listId))
			{
			    $jsonObj->campaign = new stdClass();
			    $jsonObj->campaign->campaignId = $listId;
			}
			$jsonData = json_encode($jsonObj); 
			$endpointUrl = "/contacts/{$contactId}";
			$callResponse = $this->callApi($endpointUrl,"POST",$jsonData); 
			if (MM_Response::isError($callResponse))
			{ 
			    return($callResponse);
			}
			$decodedObj = json_decode($callResponse->message);
			if (!is_object($decodedObj))
			{ 
			    return new MM_Response("Unable to update GetResponse contact: unintelligible result returned from update operation");
			}
			return new MM_Response();
			
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * GetResponse has multiple account types. The highest account level (GetResponse360) uses a custom api url to connect to the api.
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post)
	{
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		
		$api_key_value  = ($provider_entity->isValid())?$provider_entity->getAPIKey():"";
		$api_url_value  = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiUrl"):"";
		$is360 = ($provider_entity->isValid())?$provider_entity->getConfigOption("is360"):"";
		$getresponse360 = ($is360 == true)?"checked":""; //this variable only determines whether the checkbox starts off as checked
		$gr360_style = (isset($getresponse360))?"display:none;":"";
		$custom_api_url = ((bool)$is360 === true)?$api_url_value:"";
		
		$form = new MM_EmailServiceProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">
			<label style="float:left; width:16em;">API Key</label>
			<input type="text" name="getresponse_api_key" id="getresponse_api_key" size="37" value="{$api_key_value}"/><br/>
			<label style="float:left; width:16em;">GetResponse360 Account</label>
			<input type="checkbox" name="is360" value="true" {$getresponse360} onClick="jQuery('#gr360').toggle();"/><br/>
			<span id='gr360' style='{$gr360_style}'>
				<label style="float:left; width:16em;">Custom API URL</label>
				<input type="text" name="custom_api_url" value="{$custom_api_url}" size="37" />
			</span>
			<br/>
			<br/>
		</div>
OPTIONS;
		return $form;
	}
	
	
	/**
	 * Returns the configured API key
	 * 
	 * @return The API key
	 */
	public function getApiKey()
	{
		return $this->apiKey;
	}
	
	
	/**
	 * Sets the API key
	 * 
	 * @param String $apiKey
	 */
	public function setApiKey($apiKey)
	{
		$this->apiKey = $apiKey;
	}
	
	
	/**
	 * Returns the configured API url. For non-GetResponse360 accounts, this should always be the default
	 * 
	 * @return The API url 
	 */
	public function getApiUrl()
	{
		return (empty($this->apiUrl))?MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL:$this->apiUrl;
	}
	
	
	/**
	 * Set the API url
	 * 
	 * @param String $apiUrl
	 */
	public function setApiUrl($apiUrl)
	{
		$this->apiUrl = $apiUrl;
	}
	
	
	/**
	 * Sets whether or not the account being connected to is a GetResponse360 account
	 * 
	 * @param boolean true or false
	 */
	public function setGetResponse360($is360)
	{
		$this->is360 = (bool)$is360;
	}
	
	
	/**
	 * Returns whether or not the account being connected to is a GetResponse360 account
	 * 
	 * @return boolean true or false
	 */
	public function isGetResponse360()
	{
		return (bool)$this->is360;
	}
	
	
	
	/**
	 * Takes the output from a wp_remote_request() call and returns an MM_Response object containing a status recognized by MemberMouse as well as any response returned from the api
	 *
	 * @param array $apiResponse The output of a wp_remote_request() call
	 * @return MM_Response of type success if the http response code indicates a successful operation, error otherwise. The message field of the MM_Response contains the call output
	 */
	protected function translateResponse($apiResponse)
	{
	    $responseCode = intval(wp_remote_retrieve_response_code($apiResponse));
	    
	    if (($responseCode >= 200) && ($responseCode < 300)) //if response code is in the HTTP success code range (2xx)
	    {
	        if (isset($apiResponse['body']))
	        {
	           return new MM_Response($apiResponse['body']);
	        }
	        else 
	        {
	            return new MM_Response();
	        }
	    }
	    else
	    {
	        MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "GetResponse API returned error:".print_r($apiResponse,true));
	        $mmResponse = new MM_Response("",MM_Response::$ERROR);
	        if (isset($apiResponse['body']))
	        {
	            $body = json_decode($apiResponse['body']);
	            if (($body !== false) && isset($body->codeDescription))
	            {
	                $mmResponse->message = $body->codeDescription;
	            }
	            else
	            {
	                $mmResponse->message = wp_remote_retrieve_response_message($apiResponse);
	            }
	        }
	        else
	        {
	            $mmResponse->message = wp_remote_retrieve_response_message($apiResponse);
	        }
	    }
	    return $mmResponse;
	} 
	
	
	/**
	 * Returns array of headers containing the authentication headers needed for the GetResponse v3 api
	 *
	 * @return array of headers
	 */
	protected function getHeaders()
	{
	    $headerArray = array('X-Auth-Token' => "api-key {$this->apiKey}"); 
	    return $headerArray;
	}
	
	
	/**
	 * Call the GetResponse v3 api and return the response
	 *
	 * @param string $endpoint The resource to call, relative to the base api url
	 * @param string $method The HTTP Verb to use
	 * @param string $data Any data that needs to be sent to the remote url
	 * @param array $headers Any custom headers that need to be set for the call
	 *
	 * @return MM_Response with state success or error. On success, the message contains the response, on error it will contain a descriptive error message
	 *
	 */
	protected function callApi($endpoint, $method="GET", $data="", $headers=array())
	{
	    if (count($headers) == 0)
	    {
	        $headers = $this->getHeaders();
	    }
	    
	    $callUrl = $this->apiUrl."{$endpoint}";  
	    
	    switch ($method)
	    {
	        case "POST": 
	            $apiResponse = wp_remote_request($callUrl, array('method'  => 'POST',
	            'headers' => array("Content-Type" => "application/json") + $headers,
	            'body'    => $data));  
	            return $this->translateResponse($apiResponse);
	            break;
	        case "DELETE":
	            $apiResponse = wp_remote_request($callUrl, array('method'  => 'DELETE',
	            'headers' => $headers)); 
	            return $this->translateResponse($apiResponse);
	            break;
	        case "PUT":
	            //currently unused
	            $apiResponse = wp_remote_request($callUrl, array('method'  => 'PUT',
	            'headers' => $headers,
	            'body'    => $data)); 
	            return $this->translateResponse($apiResponse);
	            break;
	        case "PATCH":
	            $apiResponse = wp_remote_request($callUrl, array('method'  => 'PATCH',
	            'headers' => $headers,
	            'body'    => $data)); 
	            return $this->translateResponse($apiResponse);
	            break;
	        case "GET":
	        default:
	            $apiResponse = wp_remote_request($callUrl, array('method'  => 'GET',
	            'headers' => $headers)); 
	            return $this->translateResponse($apiResponse);
	            break;
	    }  
	}
	
	
	/**
	 * GetResponse only allows alpha characters for customfieldvalues.  Additionally, they reject firstname & lastname as field names.
	 * We account for this and also provide a 'mm' prefix to all keys to avoid any reserved custom field values.
	 * 
	 * @param string $fieldName is the unformatted field name as provided by MemberMouse.
	 * @return string of the formatted GetResponse key name.
	 */
	private function formatLocalField($fieldName)
	{
	    $key = strtolower($this->customFieldPrefix.$fieldName);
	    $key = preg_replace("/[^a-zA-Z]+/","",$key);
	    return $key;
	}
	  
	
	/**
	 * The custom fields sent when creating a contact must be predefined in GetResponse, otherwise the add will fail. In order to make sure 
	 * as few HTTP calls are made as possible, and that all of the fields needed have been defined ahead of time, this method tracks what has been sent
	 * 
	 * @param String $email The email of the member
	 * @param boolean $includeBundleInfo
	 */
	protected function syncCustomFields($email,$includeBundleInfo=true)
	{   
	    $this->getCustomFields(); 
	     
        $checkboxes = array(); 
        $myCustomFields = array();
        $customFieldsLocal = $this->getMemberCustomFields($email,false,$includeBundleInfo);
        
        if(isset($customFieldsLocal->message))
        {
            foreach($customFieldsLocal->message as $k=>$v)
            {
                $key = $this->formatLocalField($k);
                if(strlen($key)>0)
                {
                    $v = trim($v);
                    if(preg_match("/^(true|false)$/",strtolower($v)))
                    {
                        $checkboxes[$key] = 1;
                    }
                    $myCustomFields[$key] = $v;
                }
            }
        }
        
	    $memberCustoms = array_keys($myCustomFields);  
	    $needToSync = array_diff($memberCustoms,$this->syncedCustoms);
	     
	    foreach ($needToSync as $customFieldName)
	    {
	        $customFieldType = "text";
	        $customFieldFormat = "text";
	        if(isset($checkboxes[$customFieldName]) && $checkboxes[$customFieldName]=="1")
	        {
	            $customFieldType = "checkbox";
	            $customFieldFormat = "checkbox";
	        }
	        
	        $jsonObj = (object)["name"=>$customFieldName, "type"=>$customFieldType, "fieldType"=>$customFieldFormat, "hidden"=>"true"];
	       
	        if ($customFieldType == "checkbox")
	        {
	            $jsonObj->values = array("TRUE","FALSE");
	        }
	        else if($customFieldType=="text")
	        {
	            $jsonObj->values = array();
	        }  
	        
	        $data = json_encode($jsonObj);  
	        $apiResponse = $this->callApi("/custom-fields","POST",$data); 
	        if(MM_Response::isError($apiResponse))
	        {
	            return $apiResponse;
	        }
	    } 
	    return new MM_Response();
	}
}
