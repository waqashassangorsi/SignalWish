class MM_DefaultAffiliateProvider extends MM_AbstractAffiliateProvider {
		public function __construct($provider_info) {
			parent::__construct($provider_info);
		}
	
		/**
		 * Report the features that default affiliate providers supports
		 *
		 * @param integer $featureConst a const as defined in MM_AffiliateProviderFeatures
		 * @return boolean true if supported, false if not supported
		 */
		public function supportsFeature($featureConst)
		{
			$supported[] = MM_AffiliateProviderFeatures::CUSTOM_REBILL_COMMISSIONS;
			return in_array($featureConst,$supported,true);
		}
		
		/**
		 * Returns an empty array, since no profiles can be configured using the default provider
		 */
		public function getPayoutProfiles() {
			return new MM_Response(array());
		}
		
		/**
		 * Returns an object capable of rendering the default options dialog
		 * @param Array $post Any data posted necessary to draw the options dialog
		 * @return Object of type MM_AffiliateProviderDialog representing the dialog to draw
		 */
		public function renderOptionsDialog($post) {
			$form = new MM_AffiliateProviderDialog();
			$form->controls = '<button id="affiliate-provider-save" class="mm-ui-button blue" onClick="mmjs.providerOptionsSave(\'\'); return false;" style="cursor:pointer;">Save Settings</button>';
			return $form;
		}
		
		/**
		 * Responds to data collected from the form rendered by renderOptionsDialog
		 * @see MM_AbstractAffiliateProvider::handleOptionsDialog()
		 * @param $optionData Array containing the posted values
		 * @return MM_Response object indicating success or failure
		 */
		public function handleOptionsDialog($optionData) 
		{
			if (is_array($optionData)) 
			{
				$provider_token = $optionData['provider_token'];
				
				$provider_entity = new MM_AffiliateProvider();
				$provider_entity->setToken($provider_token);
				$provider_entity->getData();
				if ($provider_entity->isValid()) 
				{
					//first write the provider's configuration options
					$provider_entity->setActive(true);
					$commit_response = $provider_entity->commitData();
					if ($commit_response->type == MM_Response::$ERROR) 
					{
						//pass through errors committing to the database
						return $commit_response;
					}
					else 
					{
						return new MM_Response("The default affiliate provider has been configured successfully",MM_Response::$SUCCESS);	
					}
				}
				else 
				{
					//failed to load entity from table
					return new MM_Response("Failed to save settings",MM_Response::$ERROR);
				}
			}
		}
		
	}
