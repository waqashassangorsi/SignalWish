/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_ReportVisualElement
{
	protected $container = "";
	
	//data model
	protected $model;
	
	//rendering directives
	protected $directives;
	
	//a shared pool of RGB color values that can be used to color components of implementing graphs (ie, bars in bar chart, lines in linechart);
	protected $colorPool = array("#629AC8","#B3C641","#59B6BA","#D73657","#ECD137","#C12632","#DA6196","#46C7DA",
			"#70BF3B","#D8C249","#556270","#4ECEC4","#C7F464","#FF6B6B","#C44D58","#D1655D",
			"#637BB6","#0000FF","#FFFF00","#FF00FF","#C0C0C0","#CC0033");
	
	
	/**
	 * Creates an instance of the class representing the visual element
	 * 
	 * @param string $container The id of the container (usually a div) that the element is being rendered into
	 */
	public function __construct($container="", $directives="")
	{
		if (!empty($container))
		{
			$this->container = $container;
		}

        if (!empty($directives) && is_array($directives))
        {
            $this->setDirectives($directives);
        }
	}
	
	
	/**
	 * 
	 * @param $model The model class appropriate for the visual element
	 */
	public function setModel($model)
	{
		$this->model = $model;
	}
	
	
	public function getModel()
	{
		return $this->model;
	}
	
	
	public static function getJavascriptDependencies()
	{
		return array();
	}
	
	
	public static function getCSSDependencies()
	{
		return array();
	}
	
	
	public static function getDependencies($elementName)
	{
		//TODO: Elementname is a required parameter, because in < 5.2 there is no way to reference the dependency methods in the called class, 
		//which will be a subclass of this one. When support for PHP 5.2 is dropped, clean this up using late static binding
		
		$cssDependencies = call_user_func(array($elementName,"getCSSDependencies"));
		$jsDependencies  = call_user_func(array($elementName,"getJavascriptDependencies"));
		return array("css"=>$cssDependencies,
					 "js" =>$jsDependencies
		);
	}
	
	
	public function getDirectives()
	{
		return $this->directives;
	}
	
	
	public function setDirectives($directives)
	{
		$this->directives = $directives;
	}
	
	
	protected function getColorForPosition($position)
	{
		$position = intval($position);
		if (!isset($this->colorPool[$position]))
		{
			$position = rand(0,count($this->colorPool)-1);
		}
	
		return $this->colorPool[$position];
	}
	
}