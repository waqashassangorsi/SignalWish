class MM_ActiveCampaignEmailServiceProvider extends MM_AbstractEmailServiceProvider 
{
	protected $wrapper;

	/**
	 * 
	 * The activecampaign api requires an API Url and Key for access, so it is a required parameter for the constructor
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info) 
	{
		$apiUrl = null;
		$apiKey = null;
		parent::__construct($provider_info);
		if (is_object($provider_info) && (isset($provider_info->api_key)) && !empty($provider_info->api_key)
			&& (isset($provider_info->additional_data)) && !empty($provider_info->additional_data)) {
			if (($additional_data = unserialize($provider_info->additional_data)) && isset($additional_data['url']) && !empty($additional_data['url'])) {
				$apiUrl = $additional_data['url'];
				$apiKey = $provider_info->api_key;
			}
		}
		$this->wrapper = new MM_ACAPI($apiUrl, $apiKey);
	}

	/**
	 * 
	 * Return the lists associated with the configured apiKey, keyed by id with the values being list names
	 * @return MM_Response containing lists as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getLists($filters=array(), $start=0, $limit=100) 
	{
		$retval = $this->wrapper->lists($filters, $start, $limit);

		if ($this->wrapper->getErrorCode())
		{
			return $this->getError("unable to load lists");
		} 
		else 
		{
			$lists = array();
			foreach ($retval as $id => $name) 
			{
				$lists[$id] = $name;
			}
			return new MM_Response($lists,MM_Response::$SUCCESS);
		}
	}

	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post) 
	{
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();

		$api_url_value = '';
		$api_key_value = '';
		if ($provider_entity->isValid()) {
			$api_url_value = $provider_entity->getConfigOption('url');
			$api_key_value = $provider_entity->getAPIKey();
		}
		$form = new MM_EmailServiceProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">
			<label style="float:left; width:8em;">API URL</label>
			<input type="text" name="activecampaign_api_url" id="activecampaign_api_url" size="37" value="{$api_url_value}"/><br/>

			<label style="float:left; width:8em;">API Key</label>
			<input type="text" name="activecampaign_api_key" id="activecampaign_api_key" size="37" value="{$api_key_value}"/><br/>
		</div>
OPTIONS;
		return $form;
	}

	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && (isset($optionData['activecampaign_api_url'])) && !empty($optionData['activecampaign_api_url'])
				&& (isset($optionData['activecampaign_api_key'])) && !empty($optionData['activecampaign_api_key'])) 
		{
			$provider_token = $optionData['provider_token'];
			$api_url = $optionData['activecampaign_api_url'];
			$api_key = $optionData['activecampaign_api_key'];
			$prospect_list_id = $optionData['prospect_list_id'];
			$cancellation_list_id = $optionData['cancellation_list_id'];

			$this->wrapper->setApiUrl($api_url);
			$this->wrapper->setApiKey($api_key);
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid()) 
			{
				//first write the provider's configuration options
				$provider_entity->setAPIKey($api_key);
				$provider_entity->setConfigOption('url', $api_url);
				$provider_entity->setActive(true);
				$provider_entity->setProspectListID($prospect_list_id);
				$provider_entity->setCancellationListID($cancellation_list_id);
				$commit_response = $provider_entity->commitData();
				if ($commit_response->type == MM_Response::$ERROR) 
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the list mappings
				if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings'])) 
				{
					$provider_id = $provider_entity->getId(); 
					return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
				}
			}
			else 
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else 
		{
			//optionData is not an array, or the api key was not sent
			return new MM_Response("Failed to save settings: Incorrect options format or API Key not sent",MM_Response::$ERROR);
		}
	}

	/**
	 * Configures the activecampaign provider in order to do the initial connect
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param $optionData Array The values posted from the form rendered by renderOptionsDialog
	 */
	public function configureFromOptions($optionData) 
	{
		if (!isset($optionData['activecampaign_api_url']) || !isset($optionData['activecampaign_api_key']))
		{
			return new MM_Response("There was an error connecting to ActiveCampaign. Please make sure you have entered a URL and API Key",MM_Response::$ERROR);
		}

		$this->wrapper->setApiUrl($optionData['activecampaign_api_url']);
		$this->wrapper->setApiKey($optionData['activecampaign_api_key']);
		return new MM_Response();
	}

	/**
	 * Adds a member to a list
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response indicating success or failure
	 */
	public function addMemberToList($email,$listId,$includeBundleInfo=true) 
	{
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$this->addRequiredMergeVars($listId,$includeBundleInfo);
		$merge_vars_response = $this->getMemberDataToMerge($email,$includeBundleInfo);
		if ($merge_vars_response->type == MM_Response::$ERROR) 
		{
			return $merge_vars_response;
		}
		$retval = $this->wrapper->listSubscribe($listId, $email, $merge_vars_response->message, true);
		if ($this->wrapper->getErrorCode())
		{
			$listName = "";
			$listFriendlyNames = $this->getLists();
			if(isset($listFriendlyNames->message[$listId])){
				$listName = ($listFriendlyNames->type != MM_Response::$ERROR)?"{$listFriendlyNames->message[$listId]} ({$listId})":$listId;
			}
			return $this->getError("Error adding {$email} to list {$listName} ");
		}
		return new MM_Response();
	}

	/**
	 * Removes a member from a list
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)  
	{
		if (empty($listId)) 
		{
			return new MM_Response();
		}
	
		$retval = $this->wrapper->listUnsubscribe($listId,$email,true);
		if ($this->wrapper->getErrorCode())
		{
			//try to get the list name, but if not (we are already in an error status) just use the id
			$listFriendlyNames = $this->getLists();
			$listName = (($listFriendlyNames->type != MM_Response::$ERROR)&&isset($listFriendlyNames->message[$listId]))?"{$listFriendlyNames->message[$listId]} ({$listId})":$listId;
			return $this->getError("Error removing {$email} from list {$listName}");
		}
		else
		{
			return new MM_Response();
		}
	}

	/**
	 * Changes a members list subscription based on a change in membership level. 
	 * Performs a remove, looks up the list (if any) for the new membership level, and then performs an add
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The member type id of the member's new member type
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType) 
	{
		$overall_success = true;
		$overall_status = "";
		$listFriendlyNames = $this->getLists();
		
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid()) 
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$oldListId = $member->getSubscribedListId();
		if (!empty($oldListId))
		{
			$oldRemoveResult = $this->removeMemberFromList($email,$oldListId);
			if ($oldRemoveResult == MM_Response::$ERROR)
			{
				$overall_success = false;
				$overall_status .= "{$oldRemoveResult->message}\n";
			}
		}
		
		//continue on despite state of remove
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			$overall_status.=$newListId->message;
			return new MM_Response($overall_status,MM_Response::$ERROR);
		}
		
		$newListId = $newListId->message;
		if (empty($newListId))
		{
			//no list to add to, so success
			return new MM_Response();
		}
		
		$newAddResult = $this->addMemberToList($email, $newListId);
		if ($newAddResult == MM_Response::$ERROR)
		{
			$overall_success = false;
			$overall_status .= "{$newAddResult->message}\n";
			return new MM_Response($overall_status,MM_Response::$ERROR);
		}
		else 
		{
			//success
			if (!$overall_success)
			{
				return new MM_Response("Operation succeeded, but the following errors were encountered: {$overall_status}",MM_Response::$ERROR);
			}
			else 
			{
				return new MM_Response("Operation was successful");	
			}
		}
	}

	/**
	 * Updates a members information attached to a subscribed list
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 */
	public function updateMember($email, $listId,$newEmail="") 
	{
		if (empty($listId))
		{
			return new MM_Response(); //no list was passed in, so success
		}
		$this->addRequiredMergeVars($listId);
		$merge_vars_response = $this->getMemberDataToMerge(empty($newEmail)?$email:$newEmail);
		if ($merge_vars_response->type == MM_Response::$ERROR)
		{
			return $merge_vars_response;
		}
		$merge_vars = $merge_vars_response->message;
		if (!empty($newEmail))
		{
			$merge_vars['NEW-EMAIL'] = $newEmail;
		}
		$retval = $this->wrapper->listUpdateMember($listId, $email, $merge_vars);
		if ($this->wrapper->getErrorCode())
		{
			$listFriendlyNames = $this->getLists();
			$listName = (($listFriendlyNames->type != MM_Response::$ERROR) && isset($listFriendlyNames->message[$listId]))?"{$listFriendlyNames->message[$listId]} ({$listId})":$listId;
			return $this->getError("Error updating information for {$email} on list {$listName} ");
		}
		else
		{
			return new MM_Response();
		}
	}

	/**
	 * 
	 * Gets the member data to merge. Currently this is first_name, last_name, email, and any access tags
	 * @param String $email The email address of the member
	 * @return MM_Response containing an array of merge data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	private function getMemberDataToMerge($email,$includeBundleInfo=true)
	{
		$user = MM_User::findByEmail($email);
		
		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}
	
		$merge_vars = array("FNAME"=>$user->getFirstName(), "LNAME"=>$user->getLastName());
		
		if($includeBundleInfo)
		{
			//set all bundles false to start
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$merge_vars[$reqTag] = false;
			}
			
			//now set the ones the user has equal to true
			$appliedBundles = $user->getAppliedBundles();
			
			foreach ($appliedBundles as $appliedBundle)
			{
				$bundle = $appliedBundle->getBundle();
					
				if($bundle->isValid())
				{
					$shortName = $bundle->getShortName();
					$merge_vars[$shortName] = true;
				}
			}
		}
		
		return new MM_Response($merge_vars);
	}

	/**
	 * 
	 * Adds merge variables to the list if they are not already present. This is crucial, because trying to update a merge var that isn't
	 * currently attached to the list will cause an error. Currently used to add access tags
	 * @param String $listId The id of the list to add the merge vars to
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 */
	private function addRequiredMergeVars($listId,$includeBundleInfo=true)
	{
		$mvCache = $this->getListMergeVars($listId);
		if ($mvCache->type == MM_Response::$ERROR)
		{
			return $mvCache;
		}
		$mvCache = $mvCache->message;
		
		if($includeBundleInfo)
		{
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				if (!isset($mvCache[$reqTag]))
				{
					//add this mergeVar to the list
					$retval = $this->wrapper->listMergeVarAdd($listId, $reqTag, $reqName,array("default_value"=>"FALSE"));
					if (($retval === false) || ($this->wrapper->getErrorCode()))
					{
						return $this->getError("Error adding $reqTag merge_var to the list");
					}
				}
			}
		}
	}

	/**
	 * Returns the merge_vars in essentially the same format that activecampaign does, except this time they are keyed by the tag
	 * @param String $listId The id of the list to retrieve merge_vars for
	 */
	private function getListMergeVars($listId)
	{
		$mvCache = array();
		$mvs = $this->wrapper->listMergeVars($listId);
		if ($this->wrapper->getErrorCode())
		{
			return $this->getError("Error retrieving list merge vars");
		}
		else
		{
			foreach ($mvs as $i=>$mergeVar)
			{
				$mvCache[$mergeVar['tag']] = $mergeVar;
			}
			return new MM_Response($mvCache);
		}
	}

	/**
	 * 
	 * This is a convenience method meant to be used when api calls fail. It takes the supplied error string, and 
	 * add the api failure code and message, and wraps the entire string in a MM_Response object with an Error status
	 * @param String $errorString
	 */
	private function getError($errorString) 
	{
		$errorString .= " (Code={$this->wrapper->getErrorCode()}, Message={$this->wrapper->getErrorMessage()}";
		return new MM_Response($errorString, MM_RESPONSE::$ERROR);
	}

}