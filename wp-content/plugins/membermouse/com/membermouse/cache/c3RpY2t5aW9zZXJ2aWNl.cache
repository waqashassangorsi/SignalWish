/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_Stickyio is an implementation of the MM_PaymentService interface using Sticky.io CRM (www.stickyiocrm.com)
 */
class MM_StickyioService extends MM_PaymentService
{ 
	public static $LOG_LEVEL_ERROR = 3;
	public static $LOG_LEVEL_WARNING = 2;
	public static $LOG_LEVEL_INFO = 1;
	
	protected $token = "STICKYIO"; 

	protected $url = "";
	protected $apiUsername = "";	
	protected $apiPassword = "";	
	
	protected $supportedCurrencies = array("USD","EUR","GBP","CAD","AUD","ZAR","JPY","DKK","NOK","SEK","BRL","CLP","MXN","KRW",
		"NZD","PLN","SGD","HKD","ARS","COP","PEN");
	
	public function __construct()
	{
		parent::__construct();
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_STICKYIO_PRODUCTS." (\n".
				"id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n".
				"membermouse_product_id BIGINT(20) NOT NULL,\n".
				"stickyio_product_id BIGINT(20) NOT NULL,\n".
				"stickyio_offer_id BIGINT(20) NULL,\n".
				"stickyio_offer_name VARCHAR(200) NOT NULL,\n".
				"stickyio_billing_model_id BIGINT(20) NULL,\n".
				"stickyio_billing_model_name VARCHAR(200) NOT NULL,\n".
				"stickyio_product_name VARCHAR(200) NOT NULL,\n".
				"stickyio_campaign_id BIGINT(20) NOT NULL,\n".
				"stickyio_campaign_name VARCHAR(200) NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"UNIQUE KEY stickyio_to_mm_product_idx (membermouse_product_id,stickyio_campaign_id),\n".
				"UNIQUE KEY stickyio_campaign_product_idx (stickyio_product_id,stickyio_campaign_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql .= "CREATE TABLE ".MM_TABLE_STICKYIO_SHIPPING_METHODS." (\n".
				"id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,\n".
				"membermouse_shipping_option_key varchar(255) COLLATE utf8_bin NOT NULL,\n".
				"stickyio_shipping_method_id BIGINT(20) NOT NULL,\n".
				"stickyio_shipping_method_name VARCHAR(200) NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"UNIQUE KEY stickyio_to_mm_shipping_idx (membermouse_shipping_option_key),\n".
				"UNIQUE KEY stickyio_shipping_idx (stickyio_shipping_method_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_STICKYIO_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id bigint(20),\n".
				"subscription_id VARCHAR(100),\n".
				"campaign_id bigint(20),\n".
				"product_id bigint(20),\n".
				"shipping_id bigint(20),\n".
				"customer_id bigint(20),\n".
				"amount decimal(10,2) NOT NULL,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_stickyio_charge_charge_id_idx (charge_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql .= "CREATE TABLE ".MM_TABLE_STICKYIO_IPN_LOG." (\n".
		  		"id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n".
		  		"mm_order_id BIGINT(20) UNSIGNED NULL,\n".
				"order_id BIGINT(20) UNSIGNED NOT NULL,\n".
				"order_status INT(11),\n".
				"order_total decimal(10,2) NOT NULL,\n".
				"refund_amount decimal(10,2) NOT NULL,\n".
				"email VARCHAR(100) NOT NULL,\n".
				"customer_id BIGINT(20) UNSIGNED NOT NULL,\n".
				"campaign_id BIGINT(20) UNSIGNED NOT NULL,\n".
				"product_ids VARCHAR(100) NOT NULL,\n".
				"shipping_id INT(11) UNSIGNED NOT NULL,\n".
				"subscriptions_active VARCHAR(100) NOT NULL,\n".
				"subscription_ids TEXT NOT NULL,\n".
				"action_id VARCHAR(30),\n".
				"affiliate_id VARCHAR(100),\n".
				"subaffiliate_id VARCHAR(100),\n".
				"ip_address VARCHAR(40),\n".
				"message VARCHAR(355) NULL,\n".
				"log_level INT(11) UNSIGNED NULL,\n".
				"date_received DATETIME NOT NULL,\n".
				"PRIMARY KEY  (id)".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Sticky.io service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::TRANSACTION_PAGE_ACTIONS;
		return in_array($featureConst,$supported,true);
	} 
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Sticky.io
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{ 
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/stickyio_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Processes information from the settings screen prior to the payment service settings being saved. Allows for
	 * data to be retrieved from ClickBank using ajax during the configuration process
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS containing any requested data as the message, or a MM_Response of type ERROR on failure
	 */
	public function processIntermediateAction($post)
	{ 
        $this->install();
        $config = isset($post['payment_service']['stickyio'])?$post['payment_service']['stickyio']:array();
        
        $empty_errors = "";
        $requiredValues = array("url"=>"Sticky.io URL", "api_username"=>"API Username",
            "api_password"=>"API Password" );
        
        foreach ($requiredValues as $k=>$v)
        {
            if (empty($config[$k]))
            {
                $empty_errors .= "Sticky.io: Please enter a value for the {$v}\n";
            }
        }
        
        if ($empty_errors != "")
        {
            return new MM_Response($empty_errors,MM_Response::$ERROR);
        }
         
        //if here, that means the required values are present
        $this->setURL($config['url']);
        $this->setAPIUsername($config['api_username']);
        $this->setAPIPassword($config['api_password']);
         
        // validate credentials
        $response = $this->validateCredentials();
        
        if(MM_Response::isError($response))
        {
            return $response;
        } 
         
        $shippingMethodsHTML = $this->getDefaultShippingMethodsSelect();
	    return new MM_Response($shippingMethodsHTML);
	} 
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['stickyio'])?$post['payment_service']['stickyio']:array();
			
			$empty_errors = "";
			$requiredValues = array("url"=>"Sticky.io URL", "api_username"=>"API Username",
			    "api_password"=>"API Password", "default_shipping_id"=>"Default Shipping Method");
		     
			foreach ($requiredValues as $k=>$v)
			{
				if (empty($config[$k]))
				{
					$empty_errors .= "Sticky.io: Please enter a value for the {$v}\n";
				}
			} 
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means the required values are present
			$this->setURL($config['url']);
			$this->setAPIUsername($config['api_username']);
			$this->setAPIPassword($config['api_password']);
 
			MM_OptionUtils::setOption("mm-stickyio-shipping-id-override", $config["default_shipping_id"]);
			  
			// validate credentials
			$response = $this->validateCredentials();
			
			if(MM_Response::isError($response))
			{
				return $response;
			}
		}
		return new MM_Response();
	}
	
	
	/**
	 * Charge an order.
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt. In this case, it will always be an error object
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		parent::chargeOrder($order,$cardInfo,$validate);
		
		$tryCardOnFile = is_null($cardInfo);
	
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
			
			// place order
			$chargeResponse = $this->sendStickyioCharge($order, $cardInfo); 
		}
		else 
		{		
			$cardOnFileId = $this->lookupCardOnFile($order->getCustomer()->getId());
			
			if ($cardOnFileId === false)
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR); 
			}
			
			// place order with card on file
			$chargeResponse = $this->sendStickyioCharge($order, null, $cardOnFileId); 
		}
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{ 
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $chargeResponse;
		}
		
		$chargeResponse = $chargeResponse->getMessage();
		$chargeObject = $chargeResponse->message; 
		
		$productItems = $order->getProducts();
		$orderItemId = null;
		if (count($productItems) == 1)
		{
			$orderItem = reset($productItems);
			$orderItemId = $orderItem->getId();
		}
		
		// store order ID as card-on-file ID
		$this->updateCardOnFile($order, $chargeObject["order_id"]);
		
		// update subscription links table
		$mmProduct = $chargeResponse->getData("mmProduct");
		$stickyioProduct = $chargeResponse->getData("llProduct");
		$stickyioShippingId = $chargeResponse->getData("llShippingId");
		if($mmProduct->isValid() && $mmProduct->isRecurring())
		{
			// update order item status
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
		}
		
		/*
		 * subscription_id":{"4":"77f599a3470a36ccf7e555f1b146b92e"},
		 */
		$pid = $stickyioProduct->getStickyioProductId();
		
		$subscriptionID = "";
		if(isset($chargeObject["subscription_id"]->$pid))
		{
		    $subscriptionID = $chargeObject["subscription_id"]->$pid;
		}
		else if(isset($chargeObject["subscription_id"][$pid]))
		{
		    $subscriptionID = $chargeObject["subscription_id"][$pid];
		}
		
		// update lime light charges table
		$stickyioChargeId = $this->logStickyioCharge($order, $orderItemId, $chargeObject["order_id"], $chargeObject["customerId"], 
		    $subscriptionID, $stickyioProduct->getStickyioCampaignId(), 
				$stickyioProduct->getStickyioProductId(), $stickyioShippingId, $order->getTotal());

		// now log the payment in the transactions table
		$transactionDate = MM_Utils::getCurrentTime();
		$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
		$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stickyioChargeId,$transactionDate);
		
		//reaching this point means that the order was placed successfully
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		return new MM_PaymentServiceResponse();
	}	
	
	
	/**
	 * Sends a charge to Sticky.io, and returns an object containing the unfiltered result.
	 * 
	 * @param MM_Order $order
	 * @param MM_CardInfo $cardInfo (optional) The credit card to charge. Either cardOnFileId or cardInfo should be supplied, but not both
	 * @param Number $cardOnFileId (optional) The cardOnFileId to charge which represents a Sticky.io order ID. Either cardOnFileId or cardInfo should be supplied, but not both
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the charge object returned by Sticky.io, on failure contains an error message
	 */
	protected function sendStickyioCharge($order, $cardInfo=null, $cardOnFileId=null)
	{
		if (is_null($cardOnFileId) && is_null($cardInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		// get the Sticky.io campaign ID, product ID and shipping ID associated with the MM product being purchased
		// and shipping method applied to the order
		$mmProduct = null;
		$stickyioShipping = new MM_StickyioShippingMethod();
		
		foreach($order->getProducts() as $orderItem)
		{
			$mmProduct = new MM_Product($orderItem->getItemId());
				
			if($mmProduct->isValid())
			{
				$stickyioProduct = MM_StickyioProduct::findByMMProductId($mmProduct->getId());
				
				if(!$stickyioProduct->isValid())
				{
					return new MM_PaymentServiceResponse("Unable to create charge: The product '{$mmProduct->getName()}' is not mapped to a product in Sticky.io.",MM_PaymentServiceResponse::$ERROR);
				}
					
				if($mmProduct->isShippable())
				{ 
					$shippingOptionKey = $order->getShippingOptionKey();
					
					if(!empty($shippingOptionKey))
					{
						$stickyioShipping = MM_StickyioShippingMethod::findByMMShippingOptionKey($shippingOptionKey);
			
						if(!$stickyioShipping->isValid())
						{
							return new MM_PaymentServiceResponse("Unable to create charge: The shipping method '{$order->getShippingOptionDescription()}' is not mapped to a shipping method in Sticky.io.",MM_PaymentServiceResponse::$ERROR);
						}
					}
				}
					
				break;
			}
		}
		
		// populate common charge data
		$chargeData = array();
		
		$chargeData['campaignId'] = $stickyioProduct->getStickyioCampaignId();
// 		$chargeData['productId'] = $stickyioProduct->getStickyioProductId();
		 
		$offer = new stdClass();
		$offer->offer_id = $stickyioProduct->getStickyioOfferId();
		$offer->product_id = $stickyioProduct->getStickyioProductId();
		$offer->billing_model_id = $stickyioProduct->getStickyioBillingModelId();
		$offer->quantity = 1;
		$offer->step_num = 1;
		
		$chargeData['offers'] = array(
		    $offer  
		); 
		
		if($stickyioShipping->isValid())
		{ 
			$chargeData['shippingId'] = $stickyioShipping->getStickyioShippingMethodId();
		}
		else 
		{
			// Sticky.io requires a shipping ID to be passed
			// TODO temporary code -- remove this once Sticky.io has fixed the issue on their end. Ultimately,
			// we will be able to pass a shipping ID of 0 or -1 to indicate that the default free shipping method 
			// should be used on the Sticky.io side
			// check for shipping override and use that if it exists
			$shippingIdOverride = MM_OptionUtils::getOption("mm-stickyio-shipping-id-override");
			
			if(!empty($shippingIdOverride))
			{
				$chargeData['shippingId'] = $shippingIdOverride;
			}
			else
			{
				$chargeData['shippingId'] = 0;
			}
		}
		
		$chargeData['ipAddress'] = $order->getIPAddress();  
		$chargeData['notes'] = "MemberMouse Order# {$order->getOrderNumber()}"; 
		$chargeData['AFID'] = $order->getAffiliateId();
		$chargeData['SID'] = $order->getSubAffiliateId();
		
		// retrieve the first coupon on the order and assign it as the promo code
		$orderItems = $order->getCoupons();
		
		foreach($orderItems as $orderItem)
		{
			$coupon = new MM_Coupon($orderItem->getItemId());
		
			if($coupon->isValid())
			{
				$chargeData['promoCode'] = $coupon->getCouponCode();
				break;
			}
		}
		
		if (!is_null($cardInfo))
		{
			$customer = $order->getCustomer();
			 
			$chargeData['firstName'] = $customer->getFirstName();
			$chargeData['lastName'] = $customer->getLastName();
			$chargeData['phone'] = $customer->getPhone();
			$chargeData['email'] = urlencode($customer->getEmail());
			
			$cardType = $cardInfo->getCardType();
			
			switch($cardType)
			{
				case MM_CardInfo::$CARD_TYPE_INVALID:
					// default invalid card types to VISA to cover the case where customers are using 
					// Sticky.io test credit card numbers
					$chargeData['creditCardType'] = MM_CardInfo::$CARD_TYPE_VISA;
					break;
					
				case MM_CardInfo::$CARD_TYPE_DINERS:
				case MM_CardInfo::$CARD_TYPE_JCB:
					return new MM_PaymentServiceResponse("Invalid credit card type of '{$cardType}'. Sticky.io only accepts VISA, Master Card, AMEX and Discover.",MM_PaymentServiceResponse::$ERROR);	
				
				default:
					$chargeData['creditCardType'] = $cardType;
					break;
			}
			
			$chargeData['creditCardNumber'] = $cardInfo->getCardNumber();
			$chargeData['expirationDate'] = $cardInfo->getExpirationMonth().substr($cardInfo->getExpirationYear(), -2);
			$chargeData['CVV'] = $cardInfo->getCVV();
			$chargeData['tranType'] = 'Sale'; 

			$chargeData['billingSameAsShipping'] = "NO";
			$billingAddress = $order->getBillingAddress();
			$shippingAddress = $order->getShippingAddress();
			 
			$chargeData['billingAddress1'] = $billingAddress->getAddressLine1();
			$chargeData['billingAddress2'] = $billingAddress->getAddressLine2();
			$chargeData['billingCity'] = $billingAddress->getCity();
			$chargeData['billingState'] = $billingAddress->getState();
			$chargeData['billingZip'] = $billingAddress->getPostalCode();
			$chargeData['billingCountry'] = $billingAddress->getCountry();
			
			$chargeData['shippingAddress1'] = $shippingAddress->getAddressLine1();
			$chargeData['shippingAddress2'] = $shippingAddress->getAddressLine2();
			$chargeData['shippingCity'] = $shippingAddress->getCity();
			$chargeData['shippingState'] = $shippingAddress->getState();
			$chargeData['shippingZip'] = $shippingAddress->getPostalCode();
			$chargeData['shippingCountry'] = $shippingAddress->getCountry();
			 
			$jsonData = json_encode($chargeData); 
			$chargeResult = $this->doHTTPRequest($this->getAPIUrlForEndpoint("new_order"), "POST", $jsonData);
		}
		else 
		{
			$chargeData["initializeNewSubscription"] = 1;
			$chargeData['previousOrderId'] = $cardOnFileId;
			 
			$jsonData = json_encode($chargeData);  
			$chargeResult = $this->doHTTPRequest($this->getAPIUrlForEndpoint("new_order_card_on_file"), "POST", $jsonData);
		}
		if(MM_Response::isSuccess($chargeResult))
		{
			$chargeResult->addData("mmProduct", $mmProduct);
			$chargeResult->addData("llProduct", $stickyioProduct);
			$chargeResult->addData("llShippingId", $chargeData['shippingId']);
			return new MM_PaymentServiceResponse($chargeResult);
		}
		else
		{
			$errorMsg = "Unable to create charge";
			
			if(isset($chargeResult->message) && (isset($chargeResult->message["errorMessage"]) || isset($chargeResult->message["declineReason"])))
			{
				if(isset($chargeResult->message["errorMessage"]))
				{
					$errorMsg .= ": {$chargeResult->message["errorMessage"]}";
				}
				else if(isset($chargeResult->message["declineReason"]))
				{
					$errorMsg .= ": {$chargeResult->message["declineReason"]}";
				}
			}
			
			return new MM_PaymentServiceResponse($errorMsg, MM_PaymentServiceResponse::$ERROR);
		}
	}	
	
	
	/**
	 * Looks up the Sticky.io card on file id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (string) Sticky.io card on file id if found, boolean false if not found or errored
	 */
	protected function lookupCardOnFile($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT payment_service_identifier from ".MM_TABLE_CARD_ON_FILE." WHERE user_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		return $row->payment_service_identifier;
	}	
	
	
	/**
	 * This method creates a card on file entry for the member if one doesn't exists and updates
	 * the card on file if it already exists
	 * 
	 * @param MM_Order $order the order associated with the card being stored
	 * @param String $cardOnFileId the ID of the card on file in Sticky.io
	 */
	protected function updateCardOnFile(MM_Order $order, $cardOnFileId)
	{
		global $wpdb;
		$doUpdate = false;
		
		// check if entry already exists for this user
		$sql = "SELECT id, count(*) as total FROM ".MM_TABLE_CARD_ON_FILE ." WHERE ";
		$sql .= "user_id='{$order->getCustomer()->getId()}' AND payment_service_id='{$order->getPaymentMethod()->getId()}'";
		$row = $wpdb->get_row($sql);
			
		if(isset($row->total) && intval($row->total) > 0)
		{
			$doUpdate = true;
		}

		$cofData = array("payment_service_identifier"=>$cardOnFileId, "original_order_id"=>$order->getId());
		
		if(!$doUpdate)
		{
			// create entry in card on file table
			$cofData["user_id"] = $order->getCustomer()->getId();
			$cofData["payment_service_id"] = $order->getPaymentMethod()->getId();
			$wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
		}
		else
		{
			// update existing entry in card on file table
			$whereClause = array("user_id"=>$order->getCustomer()->getId(), "payment_service_id"=>$order->getPaymentMethod()->getId());
			$wpdb->update(MM_TABLE_CARD_ON_FILE, $cofData, $whereClause);
		}
	}
	
	
	/** 
	 * This method logs a Sticky.io charge
	 * 
	 * @param MM_Order an instance of the MemberMouse order object
	 * @param string $orderItemId the MemberMouse order item ID
	 * @param string $llOrderId the ID associated with the Sticky.io order
	 * @param string $customerId the ID associated with the Sticky.io customer
	 * @param string $subscriptionId the Sticky.io subscription ID associated with the order
	 * @param string $campaignId the Sticky.io campaign ID associated with the order
	 * @param string $productId the Sticky.io product ID associated with the order
	 * @param string $shippingId the ID of the shipping method applied to the order
	 * @param string $orderTotal the total amount charged on the order
	 * 
	 */
	private function logStickyioCharge(MM_Order $order, $orderItemId, $llOrderId, $customerId, $subscriptionId, $campaignId, $productId, $shippingId, $orderTotal)
	{
		global $wpdb;

		$transactionDate = MM_Utils::getCurrentTime();
		$insertData = array( "order_id"	=> $order->getId(),
				"order_item_id"     	=> $orderItemId,
				"charge_id"     	 	=> $llOrderId,
				"subscription_id"		=> $subscriptionId,
				"customer_id"     	 	=> $customerId,
				"campaign_id"     	 	=> $campaignId,
				"product_id"     	 	=> $productId,
				"shipping_id"     	 	=> $shippingId,
				"amount"            	=> $orderTotal,
				"transaction_date"  	=> $transactionDate
		);
		$wpdb->insert(MM_TABLE_STICKYIO_CHARGES,$insertData);
		return $wpdb->insert_id;
	}
	
	
	/**
	 * Updates the payment gateway with new information, and updates the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$orderId = $this->lookupStickyioOrderFromOrderItemId($orderItem->getId());
		
		if (is_null($orderId))
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: Sticky.io order was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$actions = array("cc_payment_type", "cc_number", "cc_expiration_date", "billing_address1", 
				"billing_city", "billing_state", "billing_zip", "billing_country");
		$orderIds = new stdClass();
		$orderIds->order_id = new stdClass();
		
		$orderIds->order_id->$orderId = new stdClass();
		foreach($actions as $actionName)
		{ 
			switch($actionName)
			{
				case "cc_payment_type":
					$cardType = $cardInfo->getCardType();
					
					switch($cardType)
					{
						case MM_CardInfo::$CARD_TYPE_INVALID:
							// default invalid card types to VISA to cover the case where customers are using
							// Sticky.io test credit card numbers 
						    $orderIds->order_id->$orderId->payment_type = MM_CardInfo::$CARD_TYPE_VISA;
							break;
								
						case MM_CardInfo::$CARD_TYPE_DINERS:
						case MM_CardInfo::$CARD_TYPE_JCB:
							return new MM_PaymentServiceResponse("Unable to update subscription: Invalid credit card type of '{$cardType}'. Sticky.io only accepts VISA, Master Card, AMEX and Discover.",MM_PaymentServiceResponse::$ERROR);
					
						default:
							$orderIds->order_id->$orderId->payment_type = $cardType;
							break;
					}
					break;
					
				case "cc_number":
					$orderIds->order_id->$orderId->cc_number = $cardInfo->getCardNumber();
					break;
					
				case "cc_expiration_date":
				    $orderIds->order_id->$orderId->cc_expiration_date = $cardInfo->getExpirationMonth().substr($cardInfo->getExpirationYear(), -2);
					break;
					
				case "billing_address1":
				    $orderIds->order_id->$orderId->billing_address1 = $billingAddress->getAddressLine1();
					break;
					
				case "billing_city":
				    $orderIds->order_id->$orderId->billing_city = $billingAddress->getCity(); 
					break;
					
				case "billing_state":
				    $orderIds->order_id->$orderId->billing_state = $billingAddress->getState();  
					break;
					
				case "billing_zip":
				    $orderIds->order_id->$orderId->billing_zip = $billingAddress->getPostalCode();  
					break;
					
				case "billing_country":
				    $orderIds->order_id->$orderId->billing_country = $billingAddress->getCountry();   
					break;
			}
		}
		 
		$data = json_encode($orderIds); 
		
		$opResponse = $this->doHTTPRequest($this->getAPIUrlForEndpoint("order_update"), "POST", $data);
		
		if (MM_Response::isError($opResponse))
		{
			$opResponse->message = "Unable to update subscription. Please try updaing the subscription from the Sticky.io interface.";
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}

		// reset recurring billing in Sticky.io if the last rebill payment failed
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			$subscriptionId = $this->lookupSubscriptionFromOrderItemId($orderItem->getId());
			if (is_null($subscriptionId))
			{
				return new MM_PaymentServiceResponse("Unable to restart subscription: Subscription not found",MM_PaymentServiceResponse::$ERROR);
			}
			
			// reset subscription in Sticky.io
			$opResponse = $this->doHTTPRequest($this->getAPIUrlForEndpoint("subscription_order_update"), "POST", array("values"=>$subscriptionId,"actions"=>"start"));
			
			if (MM_Response::isError($opResponse))
			{
				if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
				{
					$opResponse->message = "Error restarting subscription. Invalid billing information.";
				}
				return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
		
		// status will be automatically changed to recurring when the next rebill payment comes in but
		// with Sticky.io it's possible that the next rebill won't happen immediately so we'll manually
		// set the status to recurring.
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();

			$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
			return MM_PaymentServiceResponse::translate(MM_AccessControlEngine::assignAccessFromOrderItems($user, array($orderItem)));
		}
		
		return new MM_PaymentServiceResponse();
	}
	 
	
	/**
	 *  ::: For testing :::
	 * 
	 * Cancels the user's subscription. With Stripe, this simply means canceling all of the scheduled payment events for this order item
	 * @see MM_PaymentService::cancelSubscription()
	 *
	 * @param MM_OrderItem $orderItem The product item whose subscription is being cancelled
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function forceCancelSubscription(MM_OrderItem $orderItem)
	{ 
	    //first, make sure this is a product. If not, something got messed up above
	    if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
	    {
	        return new MM_PaymentServiceResponse("Attempted to cancel a non-product item",MM_PaymentServiceResponse::$ERROR);
	    }
	    
	    //then make sure its not already cancelled
	    if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
	    {
	        return new MM_PaymentServiceResponse("Error cancelling subscription: The subscription has already been cancelled",MM_PaymentServiceResponse::$ERROR);
	    } 
	    
	    return $this->cancelSubscription($orderItem);
	}
	
	/**
	 * Cancels the user's subscription. 
	 * @see MM_PaymentService::cancelSubscription()
	 * 
	 * @param MM_OrderItem $orderItem The product item whose subscription is being cancelled
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function cancelSubscription(MM_OrderItem $orderItem) 
	{
		if (!$orderItem->isValid())
		{
			return new MM_PaymentServiceResponse("Could not cancel subscription: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//first, make sure this is a product. If not, something got messed up above
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to cancel a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		//then make sure its not already cancelled
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Error cancelling subscription: The subscription has already been cancelled",MM_PaymentServiceResponse::$ERROR);
		}
		 
		$llData = $this->lookupOrderIdAndProductIdFromOrderItemId($orderItem->getId());
		if (!isset($llData->charge_id) || !isset($llData->product_id))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
				
			return new MM_PaymentServiceResponse("Unable to cancel subscription: Subscription not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$llOrderId = $llData->charge_id;
		$llProductId = $llData->product_id;
		
		// cancel subscription in Sticky.io
		$opResponse = $this->doHTTPRequest($this->getAPIUrlForEndpoint("subscription_order_update"), "POST", json_encode(array('order_id'=>$llOrderId, 'product_id'=>$llProductId, 'status'=>'stop')));
		
		if (MM_Response::isError($opResponse))
		{
			if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
			{
				$opResponse->message = "Error cancelling subscription. Please try cancelling manually from the Sticky.io interface.";
			}
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}
		else
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		global $wpdb; 
		
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Could not refund transaction: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionLookupResponse = MM_TransactionLog::getTransactionInfo($transactionId);
		if (MM_Response::isError($transactionLookupResponse))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		$transactionRow = $transactionLookupResponse->message;
		
		//make sure it's not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$lookupSQL = "SELECT * from ".MM_TABLE_STICKYIO_CHARGES." WHERE id = %s";
				$stickyioChargeInfo = $wpdb->get_row($wpdb->prepare($lookupSQL,$transactionRow->payment_service_detail_id));
				$orderId = $stickyioChargeInfo->charge_id;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		$refundAmount = floatval(abs($transactionRow->amount));
		
		if($refundAmount > 0)
		{
			// issue refund
			$opResponse = $this->doHTTPRequest($this->getAPIUrlForEndpoint("order_refund"), "POST", json_encode(array('order_id'=>$orderId, 'amount'=>$refundAmount, 'keep_recurring'=>'1')));
			
			if (MM_Response::isError($opResponse))
			{
				return new MM_PaymentServiceResponse("Error refunding transaction. Please try attempting this refund manually from the Sticky.io interface.",MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		//refund was success for execution to reach this point, log it in the transaction table
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$refundTransactionResponse = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
				$transactionRow->order_item_id,
				$transactionRow->amount,
				$transactionRow->currency,
				$transactionDescription,
				MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
				false,
				$this->getId(),
				"",
				MM_Utils::getCurrentTime(),
				$transactionRow->id);
		
		if (MM_Response::isSuccess($refundTransactionResponse))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$refundTransactionResponse->message,$transactionRow->id));
		}
		
		return new MM_PaymentServiceResponse(); // successs
	}
	
	
	/**
	 * Returns the Sticky.io order ID linked to the order item
	 *
	 * @param int $orderItemId the id of the order item to look up
	 * @return string order ID on success, null on failure
	 */
	protected function lookupStickyioOrderFromOrderItemId($orderItemId)
	{
		global $wpdb;
	
		if (empty($orderItemId))
		{
			return null;
		}
	 
		$lookupQuery = "SELECT charge_id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE order_item_id=%s";
		
		$orderId = $wpdb->get_var($wpdb->prepare($lookupQuery,$orderItemId));
		return $orderId;
	}
	
	
	/**
	 * Returns the order item linked to the Sticky.io order ID provided
	 * 
	 * @param string $llOrderId the Sticky.io order ID to lookup
	 * @return MM_OrderItem if the lookup is successful, null if it fails
	 */
	protected function lookupOrderItemFromStickyioOrder($llOrderId)
	{
		global $wpdb;
		
		if (empty($llOrderId))
		{
			return null;
		}
		
		$orderItem = null;		
		$lookupQuery = "SELECT order_item_id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE charge_id=%s LIMIT 1;";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupQuery,$llOrderId));
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			if (!$orderItem->isValid())
			{
				return null;
			}
		}
		return $orderItem;
	}
	
	
	/**
	 * Returns the order item associated with the Sticky.io subscription ID
	 *
	 * @param int $orderItemId the id of the order item to look up
	 * @return MM_OrderItem if the lookup is successful, null if it fails
	 */
	protected function lookupOrderItemFromStickyioSubscription($subscriptionId)
	{
		global $wpdb;
	
		if (empty($subscriptionId))
		{
			return null;
		}
	
		$orderItem = null;
		$lookupQuery = "SELECT order_item_id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE subscription_id=%s LIMIT 1;";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupQuery,$subscriptionId));
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			if (!$orderItem->isValid())
			{
				return null;
			}
		}
		return $orderItem;
	} 
	
	
	protected function lookupOrderIdAndProductIdFromOrderItemId($orderItemId)
	{
	    global $wpdb;
	    
	    if (empty($orderItemId))
	    {
	        return null;
	    }
	    
	    $lookupQuery = "SELECT charge_id, product_id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE order_item_id=%s LIMIT 1;";
	    $row = $wpdb->get_row($wpdb->prepare($lookupQuery,$orderItemId));
	    return $row;
	}
	
	/**
	 * Returns the Sticky.io subscription ID linked to the order item
	 *
	 * @param int $orderItemId the id of the order item to look up
	 * @return string subscription ID on success, null on failure
	 */
	protected function lookupSubscriptionFromOrderItemId($orderItemId)
	{
		global $wpdb;
	
		if (empty($orderItemId))
		{
			return null;
		}
	
		$lookupQuery = "SELECT subscription_id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE order_item_id=%s LIMIT 1;";
		$subscriptionId = $wpdb->get_var($wpdb->prepare($lookupQuery,$orderItemId));
		return $subscriptionId;
	}
	
	
	/**
	 * Processes Sticky.io IPN notifications. Used to notify MemberMouse of sales, rebills, refunds, and cancellations, even those
	 * initiated from the Sticky.io side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request The $_POST superglobal, which will contain the IPN
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) 
	{
		$this->install();
		
		$request = $_REQUEST;
		
		if (!empty($request['op']) && ($request['op'] == "conf"))
		{
			// normalize data from success URL
			$normalizedRequest = array();
			
			$normalizedRequest["op"] = "conf";
			$normalizedRequest["order_id"] = $request["order_id"];
			$normalizedRequest["customer_id"] = $request["Customer_Id"];
			$normalizedRequest["first_name"] = $request["Bill_First"];
			$normalizedRequest["last_name"] = $request["Bill_Last"];
			$normalizedRequest["phone"] = $request["Bill_Phone"];
			$normalizedRequest["email"] = $request["e_mail"];
			$normalizedRequest["campaign_id"] = $request["Campaign_Id"];
			$normalizedRequest["product_ids"] = $request["Product_Id_CSV"];
			$normalizedRequest["subscription_ids"] = $request["Subscription_Id_CSV"];
			$normalizedRequest["action_id"] = "initial";
			$normalizedRequest["order_status"] = "1";
			$normalizedRequest["affiliate"] = (isset($request["Affiliate"])) ? $request["Affiliate"] : "";
			$normalizedRequest["sub_affiliate"] = (isset($request["Sub_Affiliate"])) ? $request["Sub_Affiliate"] : "";
			$normalizedRequest["shipping_address"] = $request["Ship_Address1"];
			$normalizedRequest["shipping_city"] = $request["Ship_City"];
			$normalizedRequest["shipping_state_desc"] = $request["Ship_State"];
			$normalizedRequest["shipping_zip"] = $request["Ship_Zip"];
			$normalizedRequest["shipping_country"] = $request["Ship_Country_ISO"];
			$normalizedRequest["billing_address"] = $request["Bill_Address1"];
			$normalizedRequest["billing_city"] = $request["Bill_City"];
			$normalizedRequest["billing_state_desc"] = $request["Bill_State"];
			$normalizedRequest["billing_zip"] = $request["Bill_Zip"];
			$normalizedRequest["billing_country"] = $request["Bill_Country_ISO"];
			$normalizedRequest["order_total"] = $request["amount"];
			$normalizedRequest["shipping_id"] = $request["ShippingId"];
			$normalizedRequest["ip_address"] = $request["ipAddress"];
			
			$request = $normalizedRequest;
		}
	
		//make sure required fields exist
		$required = array("order_id" => "order ID",
				"customer_id" => "customer ID",
				"first_name" => "first name",
				"last_name" => "last name",
				"phone" => "phone",
				"email" => "email",
				"campaign_id" => "campaign ID",
				"product_ids" => "product ID",
				"subscription_ids" => "subscription ID",
				"order_status" => "order status",
				"order_total" => "order total",
				"shipping_id" => "shipping ID",
				"ip_address" => "IP address",
				"action_id" => "action ID",
				"affiliate" => "affiliate",
				"sub_affiliate" => "sub-affiliate",
				"shipping_address" => "shipping address",
				"shipping_city" => "shipping city",
				"shipping_state_desc" => "shipping state",
				"shipping_zip" => "shipping zip code",
				"shipping_country" => "shipping country",
				"billing_address" => "billing address",
				"billing_city" => "billing city",
				"billing_state_desc" => "billing state",
				"billing_zip" => "billing zip code",
				"billing_country" => "billing country"
		);
		
		foreach ($required as $k=>$v)
		{
			if(!isset($request[$k]))
			{
				MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Sticky.io IPN: Missing required field {$required[$k]}");
				return new MM_PaymentServiceResponse("Cannot process Sticky.io notification without a {$v} ({$k})",MM_Response::$ERROR);
			}
		}
		
		// convert 3-alpha country codes to 2-alpha country codes
		if(isset($request['billing_country']))
		{
			$request['billing_country'] = MM_CountryUtils::convertISO3($request['billing_country']);
		}
		
		if(isset($request['shipping_country']))
		{
			$request['shipping_country'] = MM_CountryUtils::convertISO3($request['shipping_country']);
		}
		
		$actionId = $request['action_id'];
		
		// check for duplicate IPN before continuing on initial billings and rebills. we're not checking
		// for duplicates on cancellation or reactivation being issued because Sticky.io doesn't
		// provide sufficient data to be able distinguish between legitimate duplicate events of this type
		// on the same order.
		if($actionId == "initial" || $actionId == "rebill" || $actionId == "refund" || $actionId == "void")
		{
			$duplicateCheckResponse = $this->atomicDuplicateCheckAndLog($request);
			if (MM_Response::isError($duplicateCheckResponse))
			{
				if (!empty($request['op']) && ($request['op'] == "conf"))
				{
					$this->redirectToConfirmationPage($request);
				}
				else 
				{
					MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Sticky.io Process Notification (duplicate IPN detected)");
					return new MM_PaymentServiceResponse("Duplicate IPN detected",MM_Response::$ERROR);
				}
			}
		}
		
		switch ($actionId)
		{
			case "initial":
				// If the order originated from MM, Sticky.io will still send a notification. In this case, we
				// want to ignore the IPN
				$duplicateCheckResponse = $this->isDuplicateOrder($request);
				if($duplicateCheckResponse)
				{
					MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Sticky.io Process Notification: Ignore IPN (duplicate order detected)");
					return new MM_PaymentServiceResponse("Ignore IPN. Duplicate order detected.",MM_Response::$ERROR);
				}
				else 
				{
					$result = MM_PaymentServiceResponse::translate($this->createOrdersFromIPN($request));
					
					if (!empty($request['op']) && ($request['op'] == "conf"))
					{
						$this->redirectToConfirmationPage($request);
					}
					else 
					{
						return $result;
					}
				}
				break;
				
			case "rebill":
				return MM_PaymentServiceResponse::translate($this->processRebillNotification($request));
				break;
				
			case "cancel":
				return MM_PaymentServiceResponse::translate($this->processCancellationNotification($request));
				break;
				
			case "hold":
				return MM_PaymentServiceResponse::translate($this->processHoldNotification($request));
				break;
				
			case "reset_recurring":
				return MM_PaymentServiceResponse::translate($this->processUncancellationNotification($request));
				break;

			case "void":
			case "refund":
				return MM_PaymentServiceResponse::translate($this->processRefundNotification($request));
				break;
				
			default:
				break;	
		}
	}
	
	
	/**
	 * This function creates a database managed lock, checks to see if an IPN is a duplicate, logs the new IPN, and then unlocks the db
	 *
	 * @param string $request The IPN request, usually but not always the same as $_POST
	 *
	 * @return MM_Response with status success if the IPN is NOT a duplicate, error otherwise. The logged IPN's id is the message in both cases
	 */
	protected function atomicDuplicateCheckAndLog($request)
	{
		global $wpdb;

		$customer_id = isset($request['customer_id'])?$request['customer_id']:"";
		$order_id = isset($request['order_id'])?$request['order_id']:"";
		$action_id = isset($request['action_id'])?$request['action_id']:"";
		
		if(!empty($order_id) && !empty($action_id))
		{
			//wait up to 5 secs to acquire an ipn-specific lock
			$lockName = "mm_stickyio_ipn_lock-".md5("{$customer_id}|{$order_id}|{$action_id}");
			$lockAcquired = $wpdb->get_var("SELECT COALESCE(GET_LOCK('{$lockName}',10),0)");
			if ($lockAcquired != "1")
			{
				$isDuplicate = true;
			}
			else
			{
				//dupe check
				$isDuplicate = $this->isDuplicateOrderIPN($request);
			}
		
			//log the ipn
			$mmOrderId = null;
			if(isset($request["order_id"]))
			{
    			$mmOrderItem = $this->lookupOrderItemFromStickyioOrder($request["order_id"]);
    			if($mmOrderItem instanceof MM_OrderItem)
    			{ 
    			    $mmOrderId =  $mmOrderItem->getOrderId();
    			}
			}
			$ipnLogResponse = self::logIPN($request,null,"",$mmOrderId);
			$ipnLogId = MM_Response::isSuccess($ipnLogResponse)?$ipnLogResponse->message:false;
		
			//release the lock
			if ($lockAcquired == "1")
			{
				$wpdb->query("SELECT RELEASE_LOCK('{$lockName}')");
			}
		
			if ($isDuplicate)
			{
				//dupes cause this function to return an error response
				return new MM_Response($ipnLogId,MM_Response::$ERROR);
			}
			else
			{
				return new MM_Response($ipnLogId);
			}
		}
		
		return new MM_Response();
	}
	
	
	/**
	 * Detects whether this IPN has been received or not for this purchase payment
	 *
	 * @param array $request The IPN request. This is usually but not always the same as $_REQUEST
	 * @return boolean true if this is a duplicate, false otherwise
	 */
	protected function isDuplicateOrderIPN($request)
	{
		global $wpdb;
	
		$customer_id = isset($request['customer_id'])?$request['customer_id']:null;
		$order_id = isset($request['order_id'])?$request['order_id']:null;
		$action_id = isset($request['action_id'])?$request['action_id']:null;
		
		$dupeCheckSQL = "select count(*) from ".MM_TABLE_STICKYIO_IPN_LOG. " where (order_id = %s) and (customer_id = %s) and (action_id = '%s')";
		$numRecords = $wpdb->get_var($wpdb->prepare($dupeCheckSQL,$order_id,$customer_id,$action_id));
		return ($numRecords>0);
	}
	
	
	/**
	 * Detects whether a MemberMouse order has already been created for the associated Sticky.io order or not
	 *
	 * @param array $request The IPN request. This is usually but not always the same as $_REQUEST
	 * @return boolean true if this is a duplicate, false otherwise
	 */
	protected function isDuplicateOrder($request)
	{
		global $wpdb;
	
		$order_id = isset($request['order_id'])?$request['order_id']:null;
		
		$dupeCheckSQL = "select count(*) from ".MM_TABLE_STICKYIO_CHARGES. " where (charge_id = %s)";
		$numRecords = $wpdb->get_var($wpdb->prepare($dupeCheckSQL,$order_id));
		return ($numRecords>0);
	}
	
	
	/**
	 * Looks up the order then the user is redirected to the confirmation page for the referenced order
	 * 
	 * @param array $request The $_REQUEST superglobal, which will contains the IPN
	 */
	protected function redirectToConfirmationPage($request)
	{
		global $wpdb;

		$orderItem = $this->lookupOrderItemFromStickyioOrder($request["order_id"]);
		
		if($orderItem->isValid())
		{
			$userId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
			
			if($userId != -1)
			{
				$user = new MM_User($userId);
				
				if($user->isValid())
				{
					MM_Session::value(MM_Session::$KEY_LAST_USER_ID, $user->getId());
					$order = new MM_Order($orderItem->getOrderId());
					$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
					if ($confirmationUrl !== false)
					{
						wp_redirect($confirmationUrl);
						exit;
					}
				}
			}
		}
		
		exit;
	}
	
	
	/**
	 * Process notification of a rebill from Sticky.io
	 * 
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processRebillNotification($request)
	{
	    /*
	     * NEW ORDER
	     * {"service":"stickyio","order_id":"10012","customer_id":"10","first_name":"Joe","last_name":"Peshi","phone":"1231231234","email":"joe@pe222shi.com","campaign_id":"2","product_ids":"4","subscriptions_active":"1","subscription_ids":"31516178e377cb84186c7f6d5beea142","order_status":"1","action_id":"initial","affiliate":"","sub_affiliate":"","shipping_address":"addy","shipping_city":"city","shipping_state_desc":"NY","shipping_state_id":"NY","shipping_zip":"12311","shipping_country":"USA","billing_address":"addy","billing_city":"city","billing_state_desc":"NY","billing_state_id":"NY","billing_zip":"12311","billing_country":"US","order_total":"20.0000","shipping_id":"2","ip_address":"96.61.2.24","refund_amount":"0.0000"}
	     * 
	     * REBILL
	     * {"service":"stickyio","order_id":"10011","customer_id":"9","first_name":"Matthew","last_name":"Young","phone":"2523848075","email":"matthewlyou4535345ng@gmail.com","campaign_id":"2","product_ids":"4","subscriptions_active":"1","subscription_ids":"e15056174401aa0804ae2e5969c99c85","order_status":"1","action_id":"rebill","affiliate":"","sub_affiliate":"","shipping_address":"708 Chisholm Road","shipping_city":"Myrtle Beach","shipping_state_desc":"SC","shipping_state_id":"SC","shipping_zip":"29579","shipping_country":"USA","billing_address":"708 Chisholm Road","billing_city":"Myrtle Beach","billing_state_desc":"SC","billing_state_id":"SC","billing_zip":"29579","billing_country":"US","order_total":"20.0000","shipping_id":"","ip_address":"96.61.2.24","refund_amount":"0.0000"}
	     */
		global $wpdb;  
		$subscriptionId = "";
		$subscriptionIds = explode(",", $request['subscription_ids']);
		
		if($subscriptionIds !== false && is_array($subscriptionIds))
		{
			$subscriptionId = $subscriptionIds[0];
		}
		
		$productId = "";
		$productIds = explode(",", $request["product_ids"]);
		
		if($productIds !== false && is_array($productIds))
		{
			$productId = $productIds[0];
		}
		self::logIPN($request, "Request from StickyioCRM subscriptionId: ".$subscriptionId);
		
		$orderItem = $this->lookupOrderItemFromStickyioSubscription($subscriptionId);
		if (is_null($orderItem))
		{
			self::logIPN($request, "Unable to process Sticky.io recurring payment notification: could not find a matching order.", self::$LOG_LEVEL_WARNING); 
			return new MM_Response("Unable to process Sticky.io recurring payment notification: could not find a matching order",MM_Response::$ERROR);
		}
		
		$orderStatus = $request["order_status"];
		
		// rebill was declined, handle overdue subscription
		if($orderStatus != "1")
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			
			self::logIPN($request, "Rebill payment was declined.", self::$LOG_LEVEL_WARNING);
			MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Rebill payment was declined. Mark order item as overdue.");
			return new MM_Response();
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		self::logIPN($request, "Request from Sticky.io has been mapped to order: ".$order->getId().", order item: ".$orderItem->getId());
		
		// retrieve matching MemberMouse product
		$sql = "SELECT membermouse_product_id from ".MM_TABLE_STICKYIO_PRODUCTS." where (stickyio_campaign_id='0' OR stickyio_campaign_id=%s) AND stickyio_product_id=%s order by stickyio_campaign_id desc limit 1";
		$mmProductId = $wpdb->get_var($wpdb->prepare($sql,$request["campaign_id"],$productId));
		$product = new MM_Product($mmProductId);
		if (is_null($mmProductId) || !$product->isValid())
		{
			// skip processing rebill since product is not mapped
			self::logIPN($request, "Skip processing rebill because Sticky.io campaign ID {$request["campaign_id"]}, product ID {$productId} is not linked to a MemberMouse product", self::$LOG_LEVEL_WARNING);
			MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Skip processing rebill because Sticky.io campaign ID {$request["campaign_id"]}, product ID {$productId} is not linked to a MemberMouse product");
			return new MM_Response();
		}
		
		$productItems = $order->getProducts();
		$orderItemProductId = null;
		if (count($productItems) == 1)
		{
			$orderItem = reset($productItems);
			$orderItemProductId = $orderItem->getItemId();
		}
		
		if(is_null($orderItemProductId))
		{ 
			self::logIPN($request, "Skip processing rebill because a MemberMouse product could not be found on the original order item.", self::$LOG_LEVEL_WARNING);
			
			// skip processing rebill since product could not be found on original order item
			MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Skip processing rebill because a MemberMouse product could not be found on the original order item.");
			return new MM_Response();
		} 
		
		$data = MM_OrderUtils::getRebillAmounts($order);
		
		// update Sticky.io charges table
		$stickyioChargeId = $this->logStickyioCharge($order, $orderItem->getId(), $request["order_id"], $request["customer_id"], $subscriptionId,
				$request["campaign_id"], $productId, $request["shipping_id"], $data["rebill_total"]);
		
		self::updateMMOrderItemInIPNLog($request["order_id"], $order->getId());
		
		$transactionDate = MM_Utils::getCurrentTime();
		$transactionDescription = "Recurring payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $request["order_total"], $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$stickyioChargeId,$transactionDate);
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
			
			self::logIPN($request, "Previous order item has status set to STATUS_RECURRING_REBILL_FAILED. ".$transactionDescription, self::$LOG_LEVEL_WARNING);
			MM_AccessControlEngine::assignAccessFromOrderItems($order->getCustomer(), array($orderItem)); //reinstate access
		}
		
		if (MM_Response::isError($transactionLogResponse))
		{
			self::logIPN($request, "Failed writing transaction log : ".json_encode($transactionLogResponse), self::$LOG_LEVEL_WARNING);
			return $transactionLogResponse;
		} 
		return new MM_Response(); 
	} 
	
	/**
	 * Process notification of a un-cancellation from Sticky.io
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processUncancellationNotification($request)
	{
		$orderItem = $this->lookupOrderItemFromStickyioOrder($request['order_id']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process Sticky.io un-cancellation: could not find a matching order item",MM_Response::$ERROR);
		}
		
		if ($orderItem->isRecurring() && ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
			
		}
		$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
		return MM_AccessControlEngine::assignAccessFromOrderItems($user, array($orderItem));
	}
	
	
	/**
	 * Process notification of a cancellation from Sticky.io
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processCancellationNotification($request)
	{
		$orderItem = $this->lookupOrderItemFromStickyioOrder($request['order_id']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process Sticky.io cancellation: could not find a matching order item",MM_Response::$ERROR);
		}
		
		if ($orderItem->isRecurring() && ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		
		return MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
	}
	
	
	/**
	 * Process notification of a hold from Sticky.io
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processHoldNotification($request)
	{
		$orderItem = $this->lookupOrderItemFromStickyioOrder($request['order_id']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process Sticky.io cancellation: could not find a matching order item",MM_Response::$ERROR);
		}
		
		return MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
	}
	
	
	/**
	 * Process notification of a void or refund from Sticky.io
	 * 
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processRefundNotification($request)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT id FROM ".MM_TABLE_STICKYIO_CHARGES." WHERE charge_id=%s LIMIT 1";
		
		$originalIPNID = $wpdb->get_var($wpdb->prepare($lookupSQL,$request['order_id']));
		if (is_null($originalIPNID))
		{
			return new MM_Response("Unable to process refund: Could not find the Sticky.io order",MM_Response::$ERROR);
		}
		
		//find the matching transaction
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE payment_service_id=%s AND payment_service_detail_id=%s",$this->getId(),$originalIPNID));
		if (is_null($transactionRow))
		{
			return new MM_Response("Unable to process refund: Could not find the matching transaction for the Sticky.io charge being refunded",MM_Response::$ERROR);
		}
		
		//if the transaction has already been refunded, bail
		if (!empty($transactionRow->refund_id))
		{
			return new MM_Response("Unable to process refund: the designated Sticky.io transaction has already been refunded",MM_Response::$ERROR);
		}
		
		//create a refund transaction
		$refundAmount = (isset($request["refund_amount"])) ? $request["refund_amount"]:$transactionRow->amount;
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$response = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
				$transactionRow->order_item_id,
				$refundAmount,
				$transactionRow->currency,
				$transactionDescription,
				MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
				false,
				$this->getId(),
				$originalIPNID,
				MM_Utils::getCurrentTime(),
				$transactionRow->id);
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionRow->id));
		}
		
		//if execution gets here, everything is probably ok
		return new MM_Response();
	}
	
	
	/**
	 * Creates an one or more orders from an incoming IPN request, if possible
	 * 
	 * @param array $request The IPN request to attempt to create an order from
	 * @return MM_Response indicating success or failure
	 */
	protected function createOrdersFromIPN($request)
	{
		global $wpdb;
		
		$orderStatus = $request['order_status'];
		
		if($orderStatus != "1")
		{
			// order was declined so ignore IPN
			return new MM_Response();
		} 
		
		$llOrderId = $request['order_id'];
		$customerId = $request['customer_id'];
		$campaignId = $request['campaign_id'];
		$productIds = explode(",", $request['product_ids']);
		$subscriptionIds = explode(",", $request['subscription_ids']);
		
		$firstName = $request['first_name'];
		$lastName  = $request['last_name'];
		$email = $request['email'];
		$phone = isset($request['phone']) ? $request["phone"]:"";
		$ipAddress = isset($request['ip_address']) ? $request["ip_address"]:"";
		
		$billingAddress1 = isset($request['billing_address']) ? $request["billing_address"]:"";
		$billingCity = isset($request['billing_city']) ? $request["billing_city"]:"";
		$billingState = isset($request['billing_state_id']) ? $request["billing_state_id"]:"";
		$billingState = (empty($billingState) && isset($request["billing_state_desc"])) ? $request["billing_state_desc"] : $billingState;
		$billingZipCode = isset($request['billing_zip']) ? $request["billing_zip"]:"";
		$billingCountry = isset($request['billing_country']) ? $request["billing_country"]:"";
		$billingAddress = new MM_CustomerAddress($firstName,$lastName,$billingAddress1,"",$billingCity,$billingState,$billingZipCode,"",$billingCountry);
		
		$shippingId = isset($request['shipping_id']) ? $request["shipping_id"]:"";
		$shippingAddress1 = isset($request['shipping_address']) ? $request["shipping_address"]:"";
		$shippingCity = isset($request['shipping_city']) ? $request["shipping_city"]:"";
		$shippingState = isset($request['shipping_state_id']) ? $request["shipping_state_id"]:"";
		$shippingState = (empty($shippingState) && isset($request["shipping_state_desc"])) ? $request["shipping_state_desc"] : $shippingState;
		$shippingZipCode = isset($request['shipping_zip']) ? $request["shipping_zip"]:"";
		$shippingCountry = isset($request['shipping_country']) ? $request["shipping_country"]:"";
		$shippingAddress = new MM_CustomerAddress($firstName,$lastName,$shippingAddress1,"",$shippingCity,$shippingState,$shippingZipCode,"",$shippingCountry);
		
		$affiliateId = isset($request['affiliate']) ? $request["affiliate"]:"";
		$subaffiliateId = isset($request['sub_affiliate']) ? $request["sub_affiliate"]:"";
		
		// iterate over products in the order
		for($i = 0; $i < count($productIds); $i++)
		{
			$productId = $productIds[$i];
			$subscriptionId = $subscriptionIds[$i];
			$createResponse = $this->__createOrder($llOrderId, $customerId, $campaignId, $productId, $subscriptionId, $billingAddress, $shippingAddress, $shippingId, $firstName, $lastName, $email, $phone, $affiliateId, $subaffiliateId, $ipAddress);
			if (MM_Response::isError($createResponse))
			{
				MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Sticky.io IPN: error creating stickyio order# {$llOrderId}:".$createResponse->message);
				return $createResponse;
			}
		}
		
		MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Sticky.io IPN: completed IPN create method");
		return new MM_Response();
	}
	
	
	/**
	 * __createOrder() is an internal method that creates an order using Sticky.io-supplied parameters, logs the appropriate data
	 * and applies the appropriate access
	 * 
	 * @param string $llOrderId the ID associated with the Sticky.io order
	 * @param string $customerId the ID associated with the Sticky.io customer
	 * @param string $campaignId the Sticky.io campaign ID associated with the order
	 * @param string $productId the Sticky.io product ID associated with the order
	 * @param string $subscriptionId the Sticky.io subscription ID associated with the order
	 * @param MM_CustomerAddress $billingAddress the billing address associated with the order
	 * @param MM_CustomerAddress $shippingAddress the shipping address associated with the order
	 * @param string $shippingId the ID of the shipping method applied to the order
	 * @param string $firstName the customer's first name 
	 * @param string $lastName the customer's last name 
	 * @param string $email the customer's email address
	 * @param string $phone the customer's phone number
	 * @param string $affiliateId the affiliate ID associated with the order
	 * @param string $subaffiliateId the sub-affiliate ID associated with the order
	 * @param string $ipAddress the IP address associated with the order
	 * 
	 * 
	 * @return MM_Response containing the MM_Order object on success or a descriptive error message on error
	 */
	private function __createOrder($llOrderId, $customerId, $campaignId, $productId, $subscriptionId, $billingAddress, $shippingAddress, $shippingId, $firstName, $lastName, $email, $phone, $affiliateId, $subaffiliateId, $ipAddress)
	{
		global $wpdb;
		
		// retrieve matching MemberMouse product
		$sql = "SELECT membermouse_product_id from ".MM_TABLE_STICKYIO_PRODUCTS." where (stickyio_campaign_id = '0' OR stickyio_campaign_id=%s) AND stickyio_product_id=%s";
		$mmProductId = $wpdb->get_var($wpdb->prepare($sql,$campaignId,$productId));
		$product = new MM_Product($mmProductId);
		if (is_null($mmProductId) || !$product->isValid())
		{
			// skip creating order since product is not mapped
			MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Skip creating order because Sticky.io campaign ID {$campaignId}, product ID {$productId} is not linked to a MemberMouse product");
			return new MM_Response();
		}
		
		$user = MM_User::findByEmail($email);
		if (!$user->isValid()) //this is a new customer
		{
			$user->setFirstName($firstName);
			$user->setLastName($lastName);
			$user->setEmail($email);
			$user->setPhone($phone);
			$user->setFullBillingAddress($billingAddress);
			$user->setFullShippingAddress($shippingAddress);
			$user->commitData();
		}
		
		$order = new MM_Order();
		$order->setCustomer($user);
		$order->setIPAddress($ipAddress);
		$order->addProduct($product);

		$order->setCurrency("USD"); // Sticky.io only supports USD
		
		$order->setBillingAddress($billingAddress);
		if ($product->isShippable())
		{
			$order->setShippable(true);
			$order->setShippingAddress($shippingAddress);
			
			if(!empty($shippingId))
			{
				// retrieve matching MemberMouse shipping method
				$sql = "SELECT membermouse_shipping_option_key from ".MM_TABLE_STICKYIO_SHIPPING_METHODS." where stickyio_shipping_method_id=%s";
				$mmShippingOptionKey = $wpdb->get_var($wpdb->prepare($sql,$shippingId));
				
				if ($mmShippingOptionKey)
				{
					$order->setShippingMethodFromKey($mmShippingOptionKey);
				}
			}
		}
		$order->setPaymentMethod($this);
		
		//add affiliate info
		if (!empty($affiliateId))
		{
			$order->setAffiliateId($affiliateId);
		}
		
		if (!empty($subaffiliateId))
		{
			$order->setSubAffiliateId($subaffiliateId);
		}
		
		$order->setOrderStatus(MM_ORDER::$PAID_COMPLETE);
		$orderCreationResponse = $order->commitData();
		
		if (MM_Response::isError($orderCreationResponse))
		{
			return $orderCreationResponse;
		}
		
		$productItems = $order->getProducts();
		$orderItemId = null;
		if (count($productItems) == 1)
		{
			$orderItem = reset($productItems);
			$orderItemId = $orderItem->getId();
		}
		
		// store order ID as card-on-file ID
		$this->updateCardOnFile($order, $llOrderId);
		
		// mark order item as recurring
		if($product->isValid() && $product->isRecurring())
		{
			//in other services this is done after payment is received, however with Sticky.io, payment happens prior to order creation so we set the status in this process
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
		} 
		
		// update lime light charges table
		$stickyioChargeId = $this->logStickyioCharge($order, $orderItemId, $llOrderId, $customerId, $subscriptionId, 
				$campaignId, $productId, $shippingId, $order->getTotal());
		
		// now log the payment in the transactions table
		$transactionDate = MM_Utils::getCurrentTime();
		$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
		$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$stickyioChargeId,$transactionDate);
		
		self::updateMMOrderItemInIPNLog($llOrderId, $order->getId());
		
		//now assign any access granted by the order
		$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
		if (MM_Response::isError($accessResponse))
		{
			$accessResponse->message = "Error assigning access order with order id {$order->getId()}: {$accessResponse->message}";
			return $accessResponse;
		}
		
		return new MM_Response($order);
	}
	
	
	private static function updateMMOrderItemInIPNLog($llOrderId, $mmOrderId)
	{
	    global $wpdb;
	    
	    $sql ="update ".MM_TABLE_STICKYIO_IPN_LOG." set mm_order_id='{$mmOrderId}' where order_id='{$llOrderId}'";
	    $wpdb->query($sql);
	}
	
	
	/**
	 * Logs a Sticky.io IPN request.
	 *
	 * @param array $request This is an array containing the IPN variables, typically identical to $_POST
	 * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
	 */
	private static function logIPN($request, $message=null, $logLevel="", $mmOrderId=null)
	{
		global $wpdb;
		
		if ($logLevel == "")
		{
		    $logLevel = self::$LOG_LEVEL_INFO;
		}
		
		$ipnData = array("order_id"      		=> $request['order_id'],
						 "order_status"     	=> $request['order_status'],
						 "order_total"       	=> $request['order_total'],
						 "refund_amount"       	=> isset($request['refund_amount']) ? $request["refund_amount"] : "",
						 "email"       			=> $request['email'],
						 "customer_id"    		=> $request['customer_id'],
						 "campaign_id"        	=> $request['campaign_id'],
						 "product_ids"        	=> $request['product_ids'],
						 "shipping_id" 			=> $request['shipping_id'],
						 "subscriptions_active"	=> isset($request['subscriptions_active']) ? $request['subscriptions_active'] : "",
						 "subscription_ids"   	=> $request['subscription_ids'],
						 "action_id"      		=> $request['action_id'],
						 "affiliate_id"         => $request['affiliate'],
						 "subaffiliate_id"   	=> $request['sub_affiliate'],
						 "ip_address"         	=> $request['ip_address'],
						 "log_level"			=> $logLevel
		);
		
		if(!is_null($mmOrderId) && intval($mmOrderId)>0)
		{
		    $ipnData["mm_order_id"] = intval($mmOrderId);
		}
		
		if(!is_null($message)){
			$ipnData["message"] = $message;
		}
		else{
			$ipnData["message"] = "Order (".$request['order_id'].") callback for action ".$request['action_id'];
		}
		
		$ipnData['date_received'] = MM_Utils::getCurrentTime();
		$result = $wpdb->insert(MM_TABLE_STICKYIO_IPN_LOG,$ipnData);
		if ($result === false)
		{
			return new MM_Response("Could not log Sticky.io IPN to the database",MM_Response::$ERROR);
		}
		return new MM_Response($wpdb->insert_id);
	}
	
	/** 
	 * This method returns the customs actions to add to each row of the transactions page.
	 * 
	 * @param $transactionId the ID associated with the transaction
	 * 
	 * @see MM_PaymentService::getTransactionPageActions()
	 */
	public function getTransactionPageActions($transactionId) 
	{ 
		$transactionLookupResponse = MM_TransactionLog::getTransactionInfo($transactionId);
		if (MM_Response::isError($transactionLookupResponse))
		{
			// couldn't locate transaction
			return "";
		}
		
		$transactionRow = $transactionLookupResponse->message;
		
		// lookup Sticky.io order ID
		global $wpdb;
		$lookupSQL = "SELECT * from ".MM_TABLE_STICKYIO_CHARGES." WHERE id = %s";
		$stickyioChargeInfo = $wpdb->get_row($wpdb->prepare($lookupSQL,$transactionRow->payment_service_detail_id));
				
		if($stickyioChargeInfo)
		{
			$url = $this->getURL();
			$url .= "/admin/orders.php?show_details=show_details=show_details&show_folder=view_all&fromPost=1&act=&page=0&show_by_id=";
			$url .= $stickyioChargeInfo->charge_id;
			
			return "<a href=\"{$url}\" target=\"_blank\" title=\"View order in Sticky.io\">".MM_Utils::getIcon('share-square', 'blue', '1.3em', '1px')."</a>";
		}
		
		return "";
	}
	
	public function getLoggingOrderUrl($orderId)
	{
		$url = $this->getURL();
		$url .= "/admin/orders.php?show_details=show_details=show_details&show_folder=view_all&fromPost=1&act=&page=0&show_by_id=".$orderId;
		return "<a href=\"{$url}\" target=\"_blank\" title=\"View order in Sticky.io\">".$orderId."</a>";		
	}
	
	
	public function getLoggingCustomerUrl($customerId)
	{
		$url = $this->getURL();
		$url .= "/admin/customers/details.php?id=".$customerId;
		return "<a href=\"{$url}\" target=\"_blank\" title=\"View customer in Sticky.io\">".$customerId."</a>";		
	}
	
	public function getAPIUsername()
	{
		return $this->apiUsername;
	}
	
	
	public function setAPIUsername($apiUsername)
	{
		$this->apiUsername = $apiUsername;
	}
	
	
	public function getURL()
	{
		return $this->url;
	}
	
	
	public function setURL($url)
	{  
		if(substr($url, -1) == "/")
		{
			$this->url = substr($url, 0, strlen($url)-1);
		}
		else
		{
			$this->url = $url;
		}
		
		// make sure URL is secure
		if(stripos($this->url, "https") === false)
		{
			$this->url = preg_replace("/(http\:)/", "https:", $this->url);
		}
	}
	
	public function getAPIUrlForEndpoint($apiCall)
	{
	    return $this->getURL()."/api/v1/".$apiCall;
	}
	
	public function getAPIUrlForCampaignView()
	{
	    return $this->getURL()."/api/v1/campaign_view";
	}
	
	public function getAPIUrlForCampaigns()
	{
	    return $this->getURL()."/api/v1/campaign_find_active";
	}
	
	public function getAPIUrlForValidation()
	{
	    return $this->getURL()."/api/v1/validate_credentials";
	} 
	
	public function getAPIPassword()
	{
		return $this->apiPassword;
	}
	
	
	public function setAPIPassword($apiPassword)
	{
		$this->apiPassword = $apiPassword;
	} 
	
	/**
	 * @see MM_PaymentService::doHTTPRequest()
	 */
	protected function doHTTPRequest($remoteUrl, $method="POST", $data="", $options=array())
	{	
		// passing an empty array for $options instead of passing the options through because we're
		// overriding the options array to be used to indicate if there are any JSON fields in the results
	    $response = parent::doHTTPRequest($remoteUrl,$method,$data,
	        array(CURLOPT_USERPWD=>$this->apiUsername.":".$this->apiPassword, 
	            CURLOPT_HTTPHEADER=>array("Content-Type: application/json")));

        $opStatus = MM_Response::isSuccess($response); 
		$opStatus = ($opStatus && (($response instanceof MM_Response) && ($response->getData("http_code") != "403"))); //forbidden status is a failure, but returns a result 
		
		if(!$opStatus)
		{
			$response->type = MM_Response::$ERROR;
			return $response;
		}
		
		$jsonFields = array();
		if(isset($options["json_fields"]))
		{
			$jsonFields = explode(",", $options["json_fields"]);
		}
		
		// Sticky.io returns data as a string of name/value pairs separated by &.
		// Parse this string to turn it into an array keyed by the parameter names.
		$rawData = $response->message;  
		$rawDecode = json_decode($rawData); 
		
		$processedData = array(); 
		if(json_last_error() == JSON_ERROR_NONE && isset($rawDecode->response_code))
		{
		    foreach($rawDecode as $k=>$v)
		    {
		        $processedData[$k] = $v;
		    }
		}
		else if(preg_match("/[\&]+/", $rawData))
		{ 
			$item = explode("&",$rawData);
				
			for($i=0; $i<count($item); $i++)
			{
				$params = explode("=", $item[$i]);
				
				if(isset($params[1]))
				{
					if(in_array($params[0], $jsonFields))
					{
						$processedData[$params[0]] = json_decode($params[1]);
					}
					else if(preg_match("/[\,]+/", $params[1]))
					{
						// has commas, could ruin even pairing if botched.
						$processedData[$params[0]] = MM_Utils::explode(",", $params[1]);
					}
					else
					{
						$processedData[$params[0]] = urldecode($params[1]);
					}
				}
				else
				{
					$processedData[$params[0]] = "";
				}
			}
		}
		else if(preg_match("/(\=)/", $rawData))
		{ 
			$params = explode("=", $rawData);
		
			if(in_array($params[0], $jsonFields))
			{
				$processedData[$params[0]] = json_decode($params[1]);
			}
			else if(preg_match("/[\,]+/", $params[1]))
			{
				// has commas, could ruin even pairing if botched.
				$processedData[$params[0]] = MM_Utils::explode(",", $params[1]);
			}
			else
			{
				$processedData[$params[0]] = urldecode($params[1]);
			}
		} 
		else if(preg_match("/[0-9]+/", trim($rawData)))
		{ 
			$processedData = array("response_code"=>$rawData);
		}
		else
		{ 
			$processedData = false;
		}
		
		if (!$this->stickyioCallSuccessful($processedData))
		{
			$response->type = MM_Response::$ERROR;
		} 
		$response->message = $processedData;
		
		return $response;
	}
	
	
	/**
	 * 
	 * API CALL CONVENIENCE METHODS
	 * 
	 */

	protected function validateCredentials()
	{
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("validate_credentials"));

		if(MM_Response::isError($result))
		{
			return new MM_Response("Error connecting to Sticky.io. Invalid credentials.", MM_Response::$ERROR);
		}
	
		return new MM_Response();
	}
	
	/**
	 * This method returns an array of campaigns (id as the key, name as the value)
	 * 
	 * @return Array
	 */
	public function getCampaigns()
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("campaign_find_active"));
		 
		if(MM_Response::isError($result))
		{
			return array("0"=>"Error retrieving Sticky.io campaigns");
		} 
		
		$campaigns = array();
		if(isset($result->message["campaigns"]))
		{
		    foreach($result->message["campaigns"] as $id=>$row)
		    { 
		        $campaigns[$row->campaign_id] = $row->campaign_name;
		    }
		} 
		asort($campaigns);
		return $campaigns;
	} 
	
	public function getProductsByOffer($campaignId, $offerId)
	{
	    $result = $this->getoffer($offerId);  
	    if(MM_Response::isError($result))
	    { 
	        return array("0"=>"Error retrieving Sticky.io products.");
	    } 
	    
	    $products = array(); 
        if(isset($result->message["data"]))
        {
            if(isset($result->message["data"][0])){ 
                if(isset($result->message["data"][0]->products))
                {
                    foreach($result->message["data"][0]->products as $id=>$productName)
                    {
                        if(!empty($id))
                        {
                            $products[$id] = $productName;
                        }
                    }
                }
            }  
        } 
        if(count($products)<=0)
        {
            return array("0"=>"No products mapped to this offer.");
        }
        asort($products); 
	    return $products;
	}
	
	
	public function getoffer($offerId)
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("offer_view"), "POST", json_encode(array("offer_id"=>$offerId)));
	     
	    if(MM_Response::isError($result))
	    {
	        return new MM_Response("Error retrieving Sticky.io offer", MM_Response::$ERROR);
	    }
	    
	    return $result;
	}
	
	/**
	 * This method returns an array of products (id as the key, name as the value)
	 * 
	 * @return Array
	 */
	public function getProductsByCampaign($campaignId)
	{
		// process results
		$products = array();
		if(is_array($campaignId)){
			$existingProducts = array();
			foreach($campaignId as $id){
				if(intval($id)>0){
					$newProducts = $this->getCampaignProducts($id); 
					 
					if(count($existingProducts)<=0)
					{
						$existingProducts = $newProducts;
					}
					else
					{
						if(count($newProducts)>0)
						{
							$similarProducts = array();
							foreach($newProducts as $key=>$product)
							{
								foreach($existingProducts as $key2=>$product2)
								{
									if($key==$key2)
									{
										$similarProducts[$key] = $product2;
									}
								}  
							}
							$existingProducts = $similarProducts;
						}
					} 
				}
			} 
			$products = $existingProducts;
		}
		else{
			$products = $this->getCampaignProducts($campaignId);
		}
		asort($products);
		return $products;
	} 
	
	public function getBillingModels($offerId)
	{ 
	    $bms = array(); 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("billing_model_view"), "POST", json_encode(array("offer_id"=>$offerId)));
        
        if(MM_Response::isError($result))
        {
            return array("0"=>"Error retrieving Sticky.io billing models");
        }
        
        // process results
        if(is_array($result->message["data"]))
        {
            foreach($result->message["data"] as $row)
            {
                $bms[$row->id] = $row->name;
            } 
        }
        if(count($bms)<=0)
        {
            return array("0"=>"No billing models setup for this offer.");
        }
	    return $bms;
	}
	
	public function getOffers($campaignIds)
	{
	    if(!is_array($campaignIds))
	    {
	        $campaignIds = array($campaignIds);
	    }
	     
	    $offers = array();
	    foreach($campaignIds as $campaignId)
	    { 
    	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("offer_view"), "POST", json_encode(array("campaign_id"=>$campaignId)));
 
    	    if(MM_Response::isError($result))
    	    {
    	        return array("0"=>"Error retrieving Sticky.io products");
    	    }
    	    
    	    // process results
    	    if(is_array($result->message["data"]))
    	    {
    	        foreach($result->message["data"] as $row)
    	        {
    	            $offers[$row->id] = $row->name;
    	        }
    	    }
    	    if(count($offers)<=0)
    	    {
    	        return array("0"=>"There are no offers mapped to this campaign.");
    	    }
	    }
	    return $offers;
	}
	
	private function getCampaignProducts($campaignId)
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("campaign_view"), "POST", array("campaign_id"=>$campaignId));
		  
		if(MM_Response::isError($result))
		{
			return array("0"=>"Error retrieving Sticky.io products");
		}
		
		// process results
		$products = array();
		if(is_array($result->message["products"]))
		{
		    foreach($result->message["products"] as $row)
		    {
		        $products[$row->product_id] = $row->product_name;
		    }
		}
		else if(isset($result->message->product_id))
		{
		    $products[$result->message->product_id] = $result->message->product_name;
		}
		
		return $products;
	}
	
	
	/**
	 * This method returns a Sticky.io product
	 * 
	 * @param $productId the ID of the Sticky.io product
	 *
	 * @return MM_Response
	 */
	public function getProduct($productId)
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("product_index"), "POST", json_encode(array("product_id"=>$productId)));

		if(MM_Response::isError($result))
		{
			return new MM_Response("Error retrieving Sticky.io product", MM_Response::$ERROR);
		}
		
		return $result;
	}
	
	
	/**
	 * This method returns a Sticky.io product description
	 * 
	 * @param $productId the ID of the Sticky.io product
	 * 
	 * @return MM_Response
	 */
	public function getProductDescription($productId, $offerId)
	{
		$result = $this->getProduct($productId);
	
		if(MM_Response::isError($result))
		{
			return new MM_Response("Error retrieving Sticky.io product information", MM_Response::$ERROR);
		}
		
		$offer = $this->getoffer($offerId);
		if(!isset($offer->message))
		{
		    return new MM_Response("Error retrieving Sticky.io product & offer information", MM_Response::$ERROR);
		}
		 
		if(isset($offer->message["data"]) && isset($offer->message["data"][0]))
		{
		    $data = $offer->message["data"][0];
		    // process results
		    $productDescription = "";
		    foreach($result->message["products"] as $productId=>$row)
		    {
		        $productDescription .= "Name: {$row->product_name}\n";
		        
		        if($row->product_description != "")
		        {
		            $productDescription .= "Description: {$row->product_description}\n";
		        }
		        
		        $productDescription .= "SKU: {$row->product_sku}\n\n";
		        $productDescription .= "Price: "._mmf($row->product_price, "USD")."\n\n";
		        
		        $productDescription .= "Subscription: ";
		        $productDescription .= $data->recurring_type;
		        $productDescription .= "\n";
		        
		        $productDescription .= "Has Trial: ";
		        $productDescription .= ($data->trial_flag == "1") ? "Yes" : "No";
		        $productDescription .= "\n";
		        
		        $productDescription .= "Is Shippable: ";
		        $productDescription .= ($row->product_is_shippable == "1") ? "Yes" : "No";
		    }
		    
		    
		    return new MM_Response($productDescription);
		}
		else
		{ 
		    return new MM_Response("Error retrieving a valid Sticky.io product & offer information", MM_Response::$ERROR);
		}
		
	}
	
	
	public function getDefaultShippingMethodsSelect()
	{ 
	    $html = "<option value='0'>No Shipping Methods Found</option>";
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("shipping_method_find"), "POST", json_encode(array("criteria"=>"all","campaign_id"=>"all","return_type"=>"all","return_type"=>"shipping_method_view")), array("json_fields"=>"data"));
	    $defaultShippingID = MM_OptionUtils::getOption("mm-stickyio-shipping-id-override");
	    if(!MM_Response::isError($result))
	    { 
	        if(count($result->message["shipping_id"])>0)
	        {
	            $html = "<option value='0'>No Default Shipping Method Set</option>";
        	    for($i = 0; $i < count($result->message["shipping_id"]); $i++)
        	    {
        	        $shippingId = $result->message["shipping_id"][$i];
        	        $shippingData = $result->message["data"]->$shippingId;
        	        $initialAmount = floatval($shippingData->initial_amount);
        	        $subscriptionAmount=0.00;
                    if(isset($shippingData->subscription_amount))
                    {
        	           $subscriptionAmount = floatval($shippingData->subscription_amount);
                    }
                    
                    if($initialAmount<=0 && $subscriptionAmount<=0)
                    {
                       $sel = "";
                       if($defaultShippingID==$shippingId)
                       {
                            $sel = "selected";
                       }
                       $html.="<option value='{$shippingId}' {$sel}>{$shippingData->name}</option>";
                    }
        	    }
	        }
	    }
	    return $html;
	}
	
	
	/**
	 * This method returns an array of shipping methods (id as the key, name as the value)
	 * 
	 * @return Array
	 */
	public function getShippingMethods()
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("shipping_method_find"), "POST",  json_encode(array("campaign_id"=>"all","return_type"=>"shipping_method_view")), array("json_fields"=>"data"));
	   
	    if(MM_Response::isError($result))
		{
			return array("0"=>"Error retrieving Sticky.io shipping methods");
		} 
		
		// process results
		$shippingMethods = array();
			
		for($i = 0; $i < count($result->message["shipping_id"]); $i++)
		{
			$shippingId = $result->message["shipping_id"][$i];
			$shippingData = $result->message["data"]->$shippingId;
			$shippingMethods[$shippingId] = urldecode($shippingData->name);
		}
		
		return $shippingMethods;
	}
	
	
	/**
	 * This method returns a Sticky.io shipping method
	 * 
	 * @param $shippingId the ID of the Sticky.io product
	 *
	 * @return MM_Response
	 */
	public function getShippingMethod($shippingId)
	{ 
	    $result = $this->doHTTPRequest($this->getAPIUrlForEndpoint("shipping_method_view"), "POST", json_encode(array("shipping_id"=>$shippingId)));
		 
		if(MM_Response::isError($result))
		{
			return new MM_Response("Error retrieving Sticky.io shipping method", MM_Response::$ERROR);
		}
		
		return $result;
	}
	

	/**
	 * This method returns a Sticky.io shipping method description
	 * 
	 * @param $shippingId the ID of the Sticky.io shipping method
	 *
	 * @return MM_Response
	 */
	public function getShippingDescription($shippingId)
	{
		$result = $this->getShippingMethod($shippingId);
		
		if(MM_Response::isError($result))
		{
			return new MM_Response("Error retrieving Sticky.io shipping method information", MM_Response::$ERROR);
		}
	
		// process results
		$shippingDescription = "";
			
		$shippingDescription .= "Name: {$result->message["name"]}\n";
		$shippingDescription .= "Description: {$result->message["description"]}\n\n";
	
		$shippingDescription .= "Group Name: {$result->message["group_name"]}\n";
		$shippingDescription .= "Code: {$result->message["code"]}\n\n";
		
		$shippingDescription .= "Initial Price: "._mmf(floatval($result->message["initial_amount"]), "USD")."\n";
		$shippingDescription .= "Subscription Price: "._mmf(floatval($result->message["subscription_amount"]), "USD");
	
		return new MM_Response($shippingDescription);
	}
	
	
	private function stickyioCallSuccessful($result)
	{
		if(!$result) 
		{
			return false;
		}
		
		if(isset($result->response_code))
		{
		    if(preg_match("/(100|200|911|800)/", $result->response_code))
		    {
		      return true;
		    }
		}
		
		if(isset($result["response_code"]))
		{
		    if(preg_match("/(100|200|911|800)/", $result["response_code"]))
		    {
		        return true;
		    }
		}
	
		if(!isset($result["response"]) && !isset($result["responseCode"]) && !isset($result["response_code"])) 
		{
			return false;
		}
	
		if(isset($result["response"]) && strpos($result["response"], "100") === false) 
		{
			return false;
		}
	
		if(isset($result["responseCode"]) && strpos($result["responseCode"], "100") === false) 
		{
			return false;
		}
	
		if(isset($result["response_code"])) 
		{
			if(is_array($result["response_code"]))
			{
				foreach($result["response_code"] as $resultItem)
				{
					if($resultItem != "100" && $resultItem != "343")
					{
						return false;
					}
				}
			}
			else if(strpos($result["response_code"], "100") === false && strpos($result["response_code"], "343") === false)
			{
				return false;
			}
		}
	
		return true;
	}
}