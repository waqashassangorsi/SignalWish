/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_AffiliateIntegrationView extends MM_RBACAdminView
{
	public static $MM_JSACTION_SHOW_ADDITIONAL_OPTIONS_DIALOG = "showAdditionalOptionsDialog";
	public static $MM_JSACTION_SHOW_PROVIDER_OPTIONS = "showProviderOptions";
	public static $MM_JSACTION_SAVE_PROVIDER_OPTIONS = "saveProviderOptions";
 	
	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SHOW_PROVIDER_OPTIONS:
					return $this->getProviderOptions($post);
					
				case self::$MM_JSACTION_SHOW_ADDITIONAL_OPTIONS_DIALOG:
					return $this->generateAdditionalOptionsDialog($post);
					
				case self::$MM_JSACTION_SAVE_PROVIDER_OPTIONS:
					return $this->saveProviderOptions($post);
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}

	public function generateAdditionalOptionsDialog($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$config_response = $provider->configureFromOptions($post);
			if ($config_response->type == MM_Response::$ERROR)
			{
				return $config_response;
			}
			
			// generate HTML
			$additional_options_output = "<div style=\"width:500px;\">";
			
			$additional_options_output .= $provider->renderAdditionalOptions();
			
			if($provider->supportsFeature(MM_AffiliateProviderFeatures::AFFILIATE_ACCOUNT_CREATION))
			{
				$profiles_response = $provider->getPayoutProfiles();
				
				if ($profiles_response->type == MM_Response::$ERROR)
				{
					return $profiles_response;
				}
				else if (is_array($profiles_response->message) && (count($profiles_response->message) == 0))
				{
					return new MM_Response("This affiliate provider has no payout profiles configured.");
				}
				$profiles = array(""=>"None") + $profiles_response->message;
					
				$encode = null;
				if (version_compare(phpversion(),"5.4",">="))
				{
					$encode = function(&$key,$val){$key=htmlentities($key,ENT_COMPAT | ENT_HTML401, "UTF-8"); $val=htmlentities($val,ENT_COMPAT | ENT_HTML401, "UTF-8");};
				}
				else
				{
					$encode = create_function('&$key,$val', '$key=htmlentities($key,ENT_COMPAT | ENT_HTML401, "UTF-8"); $val=htmlentities($val,ENT_COMPAT | ENT_HTML401, "UTF-8");');
				}
				
				array_walk($profiles,$encode); //encode html_entities so funky user data doesn't/can't break the interface
				
				// add affiliate account creation section
				$membership_mappings = $this->getCurrentMappings($provider_token);
				$membershipLvlMappingDesc = "You can optionally instruct MemberMouse to create an affiliate account when new members sign up for a particular membership level. For each membership level, select a specific payout level and when members sign up for that membership level, an affiliate account will be created with that payout level. Setting the payout level to None indicates that an affiliate account should not be created for that membership level.";
				$additional_options_output .= "<p class=\"mm-section-header\" style=\"margin-top:20px; margin-bottom:10px;\">Automatic Affiliate Account Creation ".MM_Utils::getInfoIcon($membershipLvlMappingDesc)."</p>";
				
				$dataGrid = new MM_DataGrid();
				$dataGrid->showPagingControls = false;
				$dataGrid->width = "500px;";
				$rows = array();
				
				$headers = array
				(
					'membership'=> array('content' => 'Membership Level'),
					'profile'	=> array('content' => 'Payout Level')
				);
				
				foreach ($membership_mappings as $membership_id=>$membership_data) 
				{
					$rows[] = array
					(
						array( 'content' => $membership_data['membership_name']),
						array( 'content' => "<select name='membership_level_mappings[{$membership_id}]'>".MM_HtmlUtils::generateSelectionsList($profiles, $membership_data['payout_profile_id'])."</select>"),
					);
				}
				
				$dataGrid->setHeaders($headers);
				$dataGrid->setRows($rows);	
				$additional_options_output .= $dataGrid->generateHtml();
				
				// add send affiliate welcome email section
				$additional_options_output .= "<script>
function insertWelcomeEmailTemplate()
{
	var str = 'Welcome to Our Affiliate Program';
	jQuery('#idevaffiliate-send-affiliate-welcome-email-subject').val(str);

	var str = 'Hi [MM_Member_Data name=\'firstName\'],\\n\\n';

	str += 'Thank you for joining our affiliate program.\\n\\n';
	str += 'You can login with the following credentials:\\n';
	str += '<a href=\"[MM_Affiliate_Data name=\'url\']\">[MM_Affiliate_Data name=\'url\']</a>\\n';
	str += 'Username: [MM_Affiliate_Data name=\'username\']\\n';
	str += 'Password: [MM_Affiliate_Data name=\'password\']\\n\\n';
	str += 'If you have any questions, please contact us at [MM_Employee_Data name=\'email\'].\\n\\n';
	str += 'Thanks,\\n[MM_Employee_Data name=\'displayName\']';
	
	jQuery('#idevaffiliate-send-affiliate-welcome-email-body').val(str);
}</script>";
				
				$additional_options_output .= "<p style='width:700px;'>If you've configured MemberMouse to automatically create affiliate accounts then you can also indicate that a welcome email
						be sent to these affiliates and include the username and password associated with their new affiliate account.</p>";
						
				$additional_options_output .= "<p><input type='checkbox' name='idevaffiliate_send_affiliate_welcome_email' id='idevaffiliate_send_affiliate_welcome_email' ";
				
				$send_affiliate_welcome_email = $provider->getSendAffiliateWelcomeEmail();;
				$affiliate_welcome_email_subject = $provider->getAffiliateWelcomeEmailSubject();
				$affiliate_welcome_email_body = $provider->getAffiliateWelcomeEmailBody();
				
				if($send_affiliate_welcome_email == "1")
				{
					$additional_options_output .= "checked";
				}
				
				$additional_options_output .= " onchange='mmjs.setSendAffiliateEmailSectionState();'/> Send Welcome Email when Affiliate Accounts are Created</p>";
				
				$additional_options_output .= "<div id='idevaffiliate_send_affiliate_welcome_email_section' ";
				
				if($send_affiliate_welcome_email != "1")
				{
					$additional_options_output .= "style='display:none;'";
				}
				
				$additional_options_output .= ">";
				
				$additional_options_output .= "<a href='javascript:insertWelcomeEmailTemplate();' class='mm-ui-button' style='font-size:10px; padding: 2px 5px;'>Use Deafult Email Template</a>";
				
				$additional_options_output .= '<div style="margin-top: 10px; margin-bottom: 15px;">';
				$additional_options_output .= '<div style="margin-top:5px">Subject*';
				$additional_options_output .= '<input id="idevaffiliate-send-affiliate-welcome-email-subject" name="idevaffiliate-send-affiliate-welcome-email-subject" type="text" ';
				$additional_options_output .= 'style="width:454px; font-family:courier; font-size: 11px;" value="'.$affiliate_welcome_email_subject.'"/></div>';
					
				$additional_options_output .= '<div style="margin-top:5px">';
				$additional_options_output .= 'Body*'.MM_SmartTagLibraryView::smartTagLibraryButtons("idevaffiliate-send-affiliate-welcome-email-body");
				 
				$validSmartTags = "Only the following SmartTags can be used here:\n";
				$validSmartTags .= "[MM_Access_Decision] (you must provide an ID)\n";
				$validSmartTags .= "[MM_Content_Data] (you must provide an ID)\n";
				$validSmartTags .= "[MM_Content_Link] (you must provide an ID)\n";
				$validSmartTags .= "[MM_CorePage_Link]\n";
				$validSmartTags .= "[MM_CustomField_Data]\n";
				$validSmartTags .= "[MM_Employee_Data]\n";
				$validSmartTags .= "[MM_Member_Data]\n";
				$validSmartTags .= "[MM_Member_Decision]\n";
				$validSmartTags .= "[MM_Member_Link]\n";
				$validSmartTags .= "[MM_Purchase_Link]";
						
				$additional_options_output .= '<span style="font-size:11px; color:#666666; margin-left: 5px;"><em>Note: Only certain SmartTags can be used here</em></span>';
				$additional_options_output .= MM_Utils::getInfoIcon($validSmartTags);
				$additional_options_output .= '<div style="font-size:11px; color:#666666; margin-top:5px;"><em>The following SmartTags are recommended:</em> <strong><code>[MM_Affiliate_Data name="url"]</code> <code>[MM_Affiliate_Data name="username"]</code> <code>[MM_Affiliate_Data name="password"]</code></strong></div>';
				$additional_options_output .= "</div>";
					
				$additional_options_output .= '<div style="margin-top:5px">';
				$additional_options_output .= '<textarea id="idevaffiliate-send-affiliate-welcome-email-body" name="idevaffiliate-send-affiliate-welcome-email-body" '; 
				$additional_options_output .= 'style="width:500px; height:180px; font-family:courier; font-size: 11px;">';
				$additional_options_output .= htmlentities($affiliate_welcome_email_body, ENT_QUOTES, 'UTF-8', true);
				$additional_options_output .= '</textarea>';
				$additional_options_output .= '</div>';
				
				$additional_options_output .= "</div>";
			}

			$additional_options_output .= "</div>";
			
			return new MM_Response($additional_options_output);
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
	}
	
	private function getCurrentMappings($provider_token) 
	{
		global $wpdb;
		$mappings = array();
		
		//first get provider id
		$sql = "select id from ".MM_TABLE_AFFILIATE_PROVIDERS." where provider_token='%s'";
		$provider_id = $wpdb->get_col($wpdb->prepare($sql,$provider_token));
		
		//then cleanup mappings for deleted membership levels
		$sql = "delete from ".MM_TABLE_AFFILIATE_PROVIDER_MAPPINGS." where membership_level_id NOT IN (select id from ".MM_TABLE_MEMBERSHIP_LEVELS.")";
		$wpdb->query($sql);
		
		//now get membership levels
		$sql = "select id, name from ".MM_TABLE_MEMBERSHIP_LEVELS." order by name";
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$membership_level)
		{
			$mappings[$membership_level['id']]['membership_name'] = $membership_level['name'];
			$mappings[$membership_level['id']]['payout_profile_id'] = "";
		}
		
		//now update with any mappings present in the table
		$sql = "select membership_level_id, payout_profile_id from ".MM_TABLE_AFFILIATE_PROVIDER_MAPPINGS.
				" where affiliate_provider_id='%s'";
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$single_mapping) 
		{
			$membership_id = $single_mapping['membership_level_id'];
			$mappings[$membership_id]['payout_profile_id'] = $single_mapping['payout_profile_id'];
		}
		return $mappings;		
	}
	
	public function getProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$call_response = $provider->renderOptionsDialog($post);
			//if call_response is an MM_Response object, return it, otherwise wrap it in an MM_Response and return it
			return ($call_response instanceof MM_Response)?$call_response:(new MM_Response($call_response,MM_Response::$SUCCESS));
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
	}
	
	public function saveProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to save provider options: no token was supplied",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			return $provider->handleOptionsDialog($post);
		}
		else 
		{
			return new MM_Response("Unable to save provider configuration for unknown provider {$provider_token}",MM_Response::$ERROR);
		}
	}
 	
}
