class MM_ACAPI
{
	protected $version = '1.0';
	protected $errorCode;
	protected $errorMessage;

	/**
	 * API location on the server
	 */
	protected $apiUrl;

	/**
	 * User API Key so we only have to log in once per client instantiation
	 */
	protected $apiKey;

	/**
	 * Default to a 300 second timeout on server calls
	 */
	protected $timeout = 300; 

	/**
	 * Connect to the ActiveCampaign API for a given list.
	 * 
	 * @param string $apiUrl Your ActiveCampaign api url
	 * @param string $apiKey Your ActiveCampaign API key
	 * @param int $timeout seconds timeout on server calls
	 */
	public function __construct($apiUrl = null, $apiKey = null, $timeout = null)
	{
		if ($apiUrl !== null)
			$this->setApiUrl($apiUrl);
		if ($apiKey !== null)
			$this->setApiKey($apiKey);
		if ($timeout !== null)
			$this->setTimeout($timeout);
	}

	public function getVersion()
	{
		return $this->version;
	}

	public function setVersion($version)
	{
		$this->version = $version;
		return $this;
	}

	public function getErrorCode()
	{
		return $this->errorCode;
	}

	public function setErrorCode($errorCode)
	{
		$this->errorCode = $errorCode;
		return $this;
	}

	public function getErrorMessage()
	{
		return $this->errorMessage;
	}

	public function setErrorMessage($errorMessage)
	{
		$this->errorMessage = $errorMessage;
		return $this;
	}

	public function getApiUrl()
	{
		return $this->apiUrl;
	}

	public function setApiUrl($apiUrl)
	{
		$this->apiUrl = $apiUrl;
		return $this;
	}

	public function getApiKey()
	{
		return $this->apiKey;
	}

	public function setApiKey($apiKey)
	{
		$this->apiKey = $apiKey;
		return $this;
	}

	public function getTimeout()
	{
		return $this->timeout;
	}

	public function setTimeout($timeout)
	{
		$this->timeout = (int)$timeout;
		return $this;
	}

	/**
	 * Get user info from ActiveCampaign
	 *
	 * @link http://www.activecampaign.com/api/example.php?call=contact_view_email
	 *
	 * @param string $email Email address
	 * @return mixed
	 */
	public function getContact($email)
	{
		static $response = array();
		if (!isset($response[$email]))
			$response[$email] = $this->callServer('contact_view_email', array('email' => $email));
//error_log("CONTACT[{$email}]: ".print_r($response[$email], true));
		return $response[$email];
	}

	/**
	 * Remove tags
	 *
	 * @link http://www.activecampaign.com/api/example.php?call=contact_tag_remove
	 *
	 * @param string $email Email address
	 * @param mixed $tags List of tags
	 */
	public function tagRemove($email, $tags)
	{
		$tags = !is_array($tags) ? explode(',', $tags) : $tags;
		$result = $this->getContact($email);
		$cleanTags = array();
		if ($result && isset($result['tags'])) {
			// remove only those tags attached to user
			foreach ($result['tags'] as $tag) {
				if (in_array($tag, $tags))
					$cleanTags[] = $tag;
			}
		}

		if (!$cleanTags)
			return false;

		$params = array(
			'email' => $email,
			'tags' => implode(', ', $cleanTags),
		);
		return $this->callServer('contact_tag_remove', $params, true);
	}

	/**
	 * Retrieve all of the lists defined for your user account
	 *
	 * @link http://www.activecampaign.com/api/example.php?call=list_list
	 *
	 * @param array $filters a hash of filters to apply to this query - all are optional:
		string ids optional - A comma-separated list of subscription form ID's of lists you wish to view. Pass "all" to view all lists. Default: "all"
		string filters optional - Filter: Perform a pattern match (LIKE) for List Name.
		boolean global_fields optional - Whether or not to include global custom fields. (set to true for yes, and false for no). Default: false
		boolean full optional - Whether or not to return ALL data, or an abbreviated portion (set to 1 for ALL data, and 0 for abbreviated). Default: false
	 * @param int $start optional - control paging of lists, start results at this list #, defaults to 1st page of data  (page 0)
	 * @param int $limit optional - control paging of lists, number of lists to return with each call, defaults to 25 (max=100)
	 * @return array an array with keys listed in Returned Fields below
	 * @returnf int total the total number of lists which matched the provided filters
	 * @returnf array data the lists which matched the provided filters
	 */
	public function lists($filters = array(), $start = 0, $limit = 25)
	{
		$params = array();
		$params['ids'] = isset($filters['ids']) ? $filters['ids'] : 'all';
		//$params['start'] = $start;
		//$params['limit'] = $limit;
		$lists = array();
		if ($result = $this->callServer('list_list', $params)) {
			foreach ($result as $key => $value) {
				if (!is_numeric($key)) 
					continue;
				$lists[$value['id']] = $value['name']; 
			}
		}
		return $lists;
	}

	/**
	 * Subscribe the provided email to a list.
	 *
	 * @link http://www.activecampaign.com/api/example.php?call=contact_sync
	 *
	 * @param string $id the list id to connect to. Get by calling lists()
	 * @param string $email the email address to subscribe
	 * @param array $vars optional merges for the email (FNAME, LNAME, etc.) (see examples below for handling "blank" arrays). Note that a merge field can only hold up to 255 bytes. Also, there are a few "special" keys:
	 * @param bool $update_existing optional flag to control whether a existing subscribers should be updated instead of throwing and error, defaults to false

	 * @return boolean true on success, false on failure.
	 */
	public function listSubscribe($id, $email, $vars = null, $update_existing = false)
	{
		$params = array(
			'email' => $email,
			'p['.$id.']' => $id,
			'status['.$id.']' => 1, // 1 = active, 2 unsubscribed
		);
		if ($update_existing) {
			$params = $this->mergeVars($params, $vars);
			if ($params['untags']) {
				$this->tagRemove($email, $params['untags']);
//error_log('UNTAGS: '.print_r($params['untags'],true));
				unset($params['untags']);
			}
		}
		return $this->callServer('contact_sync', $params, true);
	}

	protected function mergeVars(Array $data, Array $vars)
	{
		if (isset($vars['FNAME'])) {
			$data['first_name'] = $vars['FNAME'];
			unset($vars['FNAME']);
		}
		if (isset($vars['LNAME'])) {
			$data['last_name'] = $vars['LNAME'];
			unset($vars['LNAME']);
		}

		$data['tags'] = array();
		$data['untags'] = array();
		foreach ($vars as $key => $value) {
			$prefix = ($value) ? '' : 'un';
			$data[$prefix.'tags'][] = $key;
		}

		return $data;
	}

	/**
	 * Unsubscribe the given email address from the list
	 *
	 * @link http://www.activecampaign.com/api/example.php?call=contact_sync
	 *
	 * @param string $id the list id to connect to. Get by calling lists()
	 * @param string $email the email address to unsubscribe  OR the email "id" returned from listMemberInfo, Webhooks, and Campaigns
	 * @param boolean $delete_member flag to completely delete the member from your list instead of just unsubscribing, default to false
	 * @return boolean true on success, false on failure.
	 */
	public function listUnsubscribe($id, $email, $delete_member = false)
	{
		$result = $this->getContact($email);
		if (!$result || !isset($result['lists'][$id])) {
			return false;
		}

		$params = array(
			'email' => $email,
			'p['.$id.']' => $id,
			'status['.$id.']' => 2, // 1 = active, 2 unsubscribed
		);
		return $this->callServer('contact_sync', $params, true);
	}

	/**
	 * Edit the email address, merge fields, and interest groups for a list member. If you are doing a batch update on lots of users, 
	 *
	 * @param string $id the list id to connect to. Get by calling lists()
	 * @param string $email the current email address of the member to update OR the "id" for the member returned from listMemberInfo, Webhooks, and Campaigns
	 * @param array $vars array of new field values to update the member with.  See vars in listSubscribe() for details.
	 * @return boolean true on success, false on failure.
	 */
	public function listUpdateMember($id, $email, $vars)
	{
		return $this->listSubscribe($id, $email, $vars, true);
	}

	/**
	 * Add a new merge tag to a given list
	 *
	 * @param string $id the list id to connect to. Get by calling lists()
	 * @param string $tag The merge tag to add, e.g. FNAME
	 * @param string $name The long description of the tag being added, used for user displays
	 * @param array $options optional Various options for this merge var. <em>note:</em> for historical purposes this can also take a "boolean"
			string field_type optional one of: text, number, radio, dropdown, date, address, phone, url, imageurl - defaults to text
			boolean req optional indicates whether the field is required - defaults to false
			boolean public optional indicates whether the field is displayed in public - defaults to true
			boolean show optional indicates whether the field is displayed in the app's list member view - defaults to true
			string default_value optional the default value for the field. See listSubscribe() for formatting info. Defaults to blank
			array choices optional kind of - an array of strings to use as the choices for radio and dropdown type fields

	 * @return bool true if the request succeeds, otherwise an error will be thrown
	 */
	public function listMergeVarAdd($id, $tag, $name, $options = array())
	{
		$params = array();
		return $params;
		$params['id'] = $id;
		$params['tag'] = $tag;
		$params['name'] = $name;
		$params['options'] = $options;
		return $this->callServer('listMergeVarAdd', $params);
	}

	/**
	 * Get the list of merge tags for a given list, including their name, tag, and required setting
	 *
	 * @param string $id the list id to connect to. Get by calling lists()
	 * @return array list of merge tags for the list
	 */
	public function listMergeVars($id)
	{
		$params = array();
		return $params;
		$params['id'] = $id;
		return $this->callServer('listMergeVars', $params);
	}

	/**
	 * Actually connect to the server and call the requested methods, parsing the result
	 * You should never have to call this function manually
	 */
	protected function callServer($method, $params, $isPost = false)
	{
//error_log($method.' = '.print_r($params, true));
		$query = array(
			'api_key' => $this->getAPIKey(),
			'api_action' => $method,
			'api_output' => 'serialize', // json
		);
		$postData = $query;

		foreach ($params as $key => $value) {
			if ($isPost)
				$postData[$key] = $value;
			else
				$query[$key] = $value;
		}

		$this->setErrorMessage('');
		$this->setErrorCode('');

		$url = $this->getAPIURL();
		// clean up the url
		$url = rtrim($url, '/ ');

		if (!function_exists('curl_init')) {
			$this->setErrorMessage('CURL not supported. (introduced in PHP 4.0.2)');
			$this->setErrorCode('405');
			return false;
		}

		// define a final API request - GET
		$api = $url . '/admin/api.php';
		if (!$isPost)
			$api .= '?' . http_build_query($query);

		$request = curl_init($api); // initiate curl object
		curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
		curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
		if ($isPost) {
			// This section takes the input data and converts it to the proper format
			curl_setopt($request, CURLOPT_POSTFIELDS, http_build_query($postData)); // use HTTP POST to send form data
		}

		curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
		$response = (string)curl_exec($request); // execute curl post and store results in $response
		curl_close($request); // close curl object

		if (!$response) {
			$this->setErrorMessage('Nothing was returned. Do you have a connection to Email Marketing server?');
			$this->setErrorCode('522');
			return false;
		}
		
		// check if response is json
		$jsonResponse = json_decode($response); 
		
		if (json_last_error() == JSON_ERROR_NONE)
		{
			if(isset($jsonResponse->result_message))
			{
				$this->setErrorMessage("Error message from ActiveCampaign: ".$jsonResponse->result_message);
				$this->setErrorCode('0');
				return false;
			}
			
			$this->setErrorMessage("Error message from ActiveCampaign: ".$response);
			$this->setErrorCode('0');
			return false;
		}
		
		return unserialize($response);
	}

}