/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_LimeLightProduct extends MM_Entity
{	
    private $mmProductId = "";
    private $limeLightOfferId = "";
    private $limeLightOfferName = "";
	private $limeLightProductId = "";
	private $limeLightProductName = "";
	private $limeLightCampaignId = "";
	private $limeLightCampaignName = "";
	
	private $lastLimeLightCampaignId = "";
	private $lastLimeLightProductId = "";
	
	private $limeLightBillingModelId = "";
	private $limeLightBillingModelName = "";
	
	public function getData() 
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_LIMELIGHT_PRODUCTS." WHERE id='".$this->id."';";
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else {
			parent::invalidate();
		}
	}
	
	public function setData($data)
	{
		try 
		{
			$this->mmProductId = $data->membermouse_product_id;
			$this->limeLightProductId = $data->limelight_product_id;
			$this->limeLightProductName = $data->limelight_product_name;
			$this->limeLightCampaignId = $data->limelight_campaign_id;
			$this->limeLightCampaignName = $data->limelight_campaign_name;
			$this->limeLightOfferId = $data->limelight_offer_id;
			$this->limeLightOfferName = $data->limelight_offer_name;
			$this->limeLightBillingModelId = $data->limelight_billing_model_id;
			$this->limeLightBillingModelName = $data->limelight_billing_model_name;
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public static function hasExistingProductMappings($limeLightProductId, $mmProductId, $mmCampaignId = null, $mappingId=0)
	{
		global $wpdb;
		
		$campaignFilterSql = "";
		if(!is_null($mmCampaignId) && intval($mmCampaignId)>0)
		{
			$campaignFilterSql = " ( limelight_campaign_id = '".intval($mmCampaignId)."' OR limelight_campaign_id = '0' ) AND ";
		}
		
		$sql = "select count(*) as total from ".MM_TABLE_LIMELIGHT_PRODUCTS."
					 where 
						limelight_product_id ='".$limeLightProductId."'  AND 
						membermouse_product_id !='".$mmProductId."'  AND 
						{$campaignFilterSql}
						id!='".$mappingId."' 
								";
						
		$row = $wpdb->get_row($sql);
		return $row->total>0;
	}
	
	public static function removeExistingProductMappings($limeLightProductId, $mappingId)
	{
		global $wpdb;
		$sql = "delete from ".MM_TABLE_LIMELIGHT_PRODUCTS." where limelight_product_id='".$limeLightProductId."' AND id!='".$mappingId."' "; 
		$wpdb->query($sql);
	}
	
	public function commitData()
	{	
		global $wpdb;
		
		if(!MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_LIMELIGHT))
		{
			return new MM_Response("ERROR: Lime Light is not active for this MemberMouse license", MM_Response::$ERROR);
		}
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		 
		MM_Transaction::begin();
		try
		{	
			// check if campaign/product pair is already set
			if(!$doUpdate || ((!empty($this->lastLimeLightCampaignId) && ($this->lastLimeLightCampaignId != $this->limeLightCampaignId))
				|| (!empty($this->lastLimeLightProductId) && ($this->lastLimeLightProductId != $this->limeLightProductId))))
			{
				$sql = "SELECT membermouse_product_id FROM ".MM_TABLE_LIMELIGHT_PRODUCTS." WHERE limelight_product_id='".$this->limeLightProductId."' AND ";
				$sql .= "limelight_campaign_id='".$this->limeLightCampaignId."';";
				$result = $wpdb->get_row($sql);
				
				if($result)
				{
					MM_Transaction::rollback();
					$product = new MM_Product($result->membermouse_product_id);
					$productName = ($product->isValid()) ? $product->getName() : "";
						
					$errorMsg = "The Lime Light product '{$this->limeLightProductName}' in campaign '{$this->limeLightCampaignName}'\n";
					$errorMsg .= "is already associated with MemberMouse product '{$productName}'";
					return new MM_Response($errorMsg, MM_Response::$ERROR);
				}
			}
			 
			$limeLightService = MM_PaymentServiceFactory::getPaymentService(MM_PaymentService::$LIMELIGHT_SERVICE_TOKEN);
			if(MM_PaymentServiceFactory::getOnsitePaymentService()->getToken() == $limeLightService->getToken())
			{ 
			    if(!$doUpdate)
			    {
			        $sql = "insert into ".MM_TABLE_LIMELIGHT_PRODUCTS." set " .
			 			        "	membermouse_product_id='%d'," .
			 			        "	limelight_product_id='%d'," . 
			 			        "	limelight_product_name='%s'," .
			 			        "	limelight_campaign_id='%d'," .
			 			        "	limelight_campaign_name='%s'" .
			 			        "";
			    }
			    else
			    {
			        $sql = "update ".MM_TABLE_LIMELIGHT_PRODUCTS." set " .
			 			        "	membermouse_product_id='%d'," .
			 			        "	limelight_product_id='%d'," . 
			 			        "	limelight_product_name='%s'," .
			 			        "	limelight_campaign_id='%d'," .
			 			        "	limelight_campaign_name='%s'" .
			 			        "	where id='{$this->id}'" .
			 			        "";
			    } 
			}
			else
			{ 
			    if(!$doUpdate)
			    {
			        $sql = "insert into ".MM_TABLE_LIMELIGHT_PRODUCTS." set " .
			 			        "	membermouse_product_id='%d'," .
			 			        "	limelight_product_id='%d'," .
			 			        "	limelight_offer_id='%d'," .
			 			        "	limelight_offer_name='%s'," .
			 			        "	limelight_billing_model_id='%d'," .
			 			        "	limelight_billing_model_name='%s'," .
			 			        "	limelight_product_name='%s'," .
			 			        "	limelight_campaign_id='%d'," .
			 			        "	limelight_campaign_name='%s'" .
			 			        "";
			    }
			    else
			    {
			        $sql = "update ".MM_TABLE_LIMELIGHT_PRODUCTS." set " .
			 			        "	membermouse_product_id='%d'," .
			 			        "	limelight_product_id='%d'," .
			 			        "	limelight_offer_id='%d'," .
			 			        "	limelight_offer_name='%s'," .
			 			        "	limelight_billing_model_id='%d'," .
			 			        "	limelight_billing_model_name='%s'," .
			 			        "	limelight_product_name='%s'," .
			 			        "	limelight_campaign_id='%d'," .
			 			        "	limelight_campaign_name='%s'" .
			 			        "	where id='{$this->id}'" .
			 			        "";
			    } 
			}
		 	$preparedSql = $wpdb->prepare($sql, $this->mmProductId, $this->limeLightProductId,  $this->limeLightOfferId, $this->limeLightOfferName, $this->limeLightBillingModelId, $this->limeLightBillingModelName, $this->limeLightProductName, 
		 										$this->limeLightCampaignId, $this->limeLightCampaignName);
		 	
		 	$result = $wpdb->query($preparedSql); 
			if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("Error creating product mapping", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) 
		 	{
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{
		 	MM_Transaction::rollback();
	 		return new MM_Response("Error creating product mapping", MM_Response::$ERROR);
		}
		 
		MM_Transaction::commit();
		
		return new MM_Response();
	} 
	
	public function delete()
	{	
		global $wpdb;
		
		$sql = "DELETE FROM ".MM_TABLE_LIMELIGHT_PRODUCTS." WHERE id='%d' LIMIT 1";
		$results = $wpdb->query($wpdb->prepare($sql, $this->id));
		
		if($results) 
		{
			return true;
		}
		
		return false;
	}
	
	
	/** HELPER METHODS **/
	
	public static function findByMMProductId($productId)
	{
		if (empty($productId))
		{
			return new MM_LimeLightProduct();
		}
		
		global $wpdb;
 		
		$sql = "SELECT id FROM ".MM_TABLE_LIMELIGHT_PRODUCTS." WHERE membermouse_product_id='%s' LIMIT 1;";
		$llProductIndex = $wpdb->get_var($wpdb->prepare($sql,$productId));
		
		if (!is_null($llProductIndex))
		{
			return new MM_LimeLightProduct($llProductIndex);
		}
		return new MM_LimeLightProduct(); //return an invalid entity if the product mapping could not be found
	}
	
	public static function getUnmappedProducts()
	{
		global $wpdb;
	
		$sql = "SELECT p.* from ".MM_TABLE_PRODUCTS." p LEFT JOIN ".MM_TABLE_LIMELIGHT_PRODUCTS." llp ON (p.id = llp.membermouse_product_id) where llp.membermouse_product_id IS NULL order by membermouse_product_id asc";
		$rows = $wpdb->get_results($sql);
	
		$products = array();
	
		foreach($rows as $row)
		{
			$products[$row->id] = $row->name;
		}
	
		return $products;
	}
	
	
	/** GETTERS/SETTERS **/
	
	public function setLimeLightBillingModelId($id)
	{
	    $this->limeLightBillingModelId = $id;
	}
	
	public function getLimeLightBillingModelId()
	{
	    return $this->limeLightBillingModelId;
	}
	
	public function setLimeLightBillingModelName($str)
	{
	    $this->limeLightBillingModelName = $str;
	}
	
	public function getLimeLightBillingModelName()
	{
	    return $this->limeLightBillingModelName;
	}
	 
	
	public function setMMProductId($id) 
	{
		$this->mmProductId = $id;
	}
	
	public function getMMProductId()
	{
		return $this->mmProductId;
	}
	
	public function setLimeLightOfferId($id)
	{ 
	    $this->limeLightOfferId = $id;
	}
	
	public function getLimeLightOfferId()
	{
	    return $this->limeLightOfferId;
	}
	
	public function setLimeLightOfferName($str)
	{
	    $this->limeLightOfferName = $str;
	}
	
	public function getLimeLightOfferName()
	{
	    return $this->limeLightOfferName;
	}
	
	public function setLimeLightProductId($id)
	{
		$this->lastLimeLightProductId = $this->limeLightProductId;
		$this->limeLightProductId = $id;
	}
	
	public function getLimeLightProductId()
	{
		return $this->limeLightProductId;
	}
	
	public function setLimeLightProductName($str)
	{
		$this->limeLightProductName = $str;
	}
	
	public function getLimeLightProductName()
	{
		return $this->limeLightProductName;
	}
	
	public function setLimeLightCampaignId($id)
	{
		$this->lastLimeLightCampaignId = $this->limeLightCampaignId;
		$this->limeLightCampaignId = $id;
	}
	
	public function getLimeLightCampaignId()
	{
		return $this->limeLightCampaignId;
	}
	
	public function setLimeLightCampaignName($str)
	{
		$this->limeLightCampaignName = $str;
	}
	
	public function getLimeLightCampaignName()
	{
		return $this->limeLightCampaignName;
	}
}