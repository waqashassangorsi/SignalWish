/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_BraintreeService is an implementation of the MM_PaymentService interface using Braintree (www.braintreepayments.com)
 */ 
class MM_BraintreeService extends MM_ScheduledPaymentService
{
	protected $token = "BRAINTREE";
	
	protected $testMerchantId = "";
	protected $testPublicKey = "";
	protected $testPrivateKey = "";
	
	protected $liveMerchantId = "";
	protected $livePublicKey = "";
	protected $livePrivateKey = "";
	
	protected $testMode = false;
	
	protected $hostedFieldsEnabled = false;
	
	protected $supportedCurrencies = array("AFA","ALL","DZD","ARS","AMD","AWG","AUD","AZN","BSD","BHD",
			"BDT","BBD","BYR","BZD","BMD","BOB","BWP","BRL","BND","BGN","BIF","KHR","CAD","CVE","KYD",
			"XAF","XPF","CLP","CNY","COP","KMF","BAM","CRC","HRK","CUP","CYP","CZK","DKK","DJF","DOP","XCD",
			"ECS","EGP","SVC","ERN","EEK","ETB","EUR","FKP","FJD","CDF","GMD","GEL","GHS","GIP","GTQ","GNF",
			"GWP","GYD","HTG","HNL","HKD","HUF","ISK","INR","IDR","IRR","IQD","ILS","JMD","JPY","JOD","KZT",
			"KES","KWD","AOA","KGS","KIP","LAK","LVL","LBP","LRD","LYD","LTL","LSL","MOP","MKD","MGF",
			"MGA","MWK","MYR","MVR","MTL","MRO","MUR","MXN","MDL","MNT","MAD","MZM","MMK","NAD","NPR","ANG",
			"PGK","TWD","TRY","NZD","NIO","NGN","KPW","NOK","PKR","PAB","PYG","PEN","PHP","PLN","QAR","OMR",
			"RON","RUB","RWF","WST","STD","SAR","RSD","SCR","SLL","SGD","SKK","SIT","SBD","SOS","ZAR","KRW",
			"LKR","SHP","SDD","SRD","SZL","SEK","CHF","SYP","TJS","TZS","THB","TOP","TTD","TND","TMM","UGX",
			"UAH","AED","GBP","USD","UYU","UZS","VUV","VEF","VND","XOF","YER","YUM","ZMK","ZWD");
	
	public function __construct($autoload=true)
	{
		parent::__construct($autoload);
		
		if($autoload)
		{
			$this->setupBraintree();
		}
	}
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/braintree/Braintree.php");
	}
	
	
	/**
	 * Initializes the Braintree environment
	 */
	private function setupBraintree()
	{	
		try 
		{
			if ($this->testMode && !empty($this->testMerchantId) && !empty($this->testPublicKey) && !empty($this->testPrivateKey))
			{
				Braintree_Configuration::environment('sandbox');
				Braintree_Configuration::merchantId($this->testMerchantId);
				Braintree_Configuration::publicKey($this->testPublicKey);
				Braintree_Configuration::privateKey($this->testPrivateKey);
			}
			else if (!empty($this->liveMerchantId) && !empty($this->livePublicKey) && !empty($this->livePrivateKey))
			{
				Braintree_Configuration::environment('production');
				Braintree_Configuration::merchantId($this->liveMerchantId);
				Braintree_Configuration::publicKey($this->livePublicKey);
				Braintree_Configuration::privateKey($this->livePrivateKey);
			}
		}
		catch (Exception $e) 
		{
			// do nothing
		}
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_BRAINTREE_CUSTOMER_LINKS." (\n".
				"braintree_customer_id VARCHAR(40) NOT NULL,\n".
				"membermouse_customer_id bigint(20) NOT NULL,\n".
				"UNIQUE KEY braintree_customer_id (braintree_customer_id),\n".
				"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_BRAINTREE_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(40),\n".
				"payment_token varchar(40),\n".
				"last_four varchar(4) NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_braintree_charge_charge_id_idx (charge_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Braintree service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
	    $supported = [ MM_PaymentServiceFeatures::ONSITE_SERVICE,
		               MM_PaymentServiceFeatures::CARD_ON_FILE,
		               MM_PaymentServiceFeatures::COUPONS,
		               MM_PaymentServiceFeatures::TOKEN_EXCHANGE,
		               MM_PaymentServiceFeatures::TEST_MODE,
		               MM_PaymentServiceFeatures::MODIFY_REBILL_DATE
		             ];
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * checkoutInit is called from the checkout form prior to the page being rendered.
	 *
	 * @see MM_PaymentService::checkoutInit()
	 */
	public function checkoutInit()
	{
	    return $this->BraintreeJSInit(array("braintreeClient","membermouse-checkout-form"));
	}	
	
	
	/**
	 * Load Braintree javascript on my account page to support the card update operation
	 *
	 * @see MM_PaymentService::myAccountInit()
	 */
	public function myAccountInit()
	{
	    //currently the my account init process for stripe.js is exactly the same as the checkout init process
	    return $this->BraintreeJSInit(array("braintreeClient","membermouse-myaccount-js"));
	}
	
	
	protected function BraintreeJSInit($bridgeDependencies=array())
	{
	    if ($this->hostedFieldsEnabled)
	    {
	        wp_enqueue_script("braintreeClient", "https://js.braintreegateway.com/web/3.50.1/js/client.min.js", array(), MemberMouse::getPluginVersion(), true);
	        wp_enqueue_script("braintreeHostedFields", "https://js.braintreegateway.com/web/3.50.1/js/hosted-fields.min.js", array(), MemberMouse::getPluginVersion(), true);
	        wp_enqueue_script("braintree3DSecure", "https://js.braintreegateway.com/web/3.50.1/js/three-d-secure.min.js", array(), MemberMouse::getPluginVersion(), true);
	        wp_enqueue_script("membermouse-braintreeJS", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-braintree-token-exchange.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
	        try 
	        {
    	        wp_localize_script('membermouse-braintreeJS', 'braintreeJSInfo', array('clientToken' => Braintree_ClientToken::generate(),
    	            'improperStripeResponseErrorMsg' => _mmt("An improper response was received from Braintree, please try again")));
	        }
	        catch (Exception $e)
	        {
	            MM_DiagnosticLog::logResponse(MM_DiagnosticLog::$MM_ERROR,"Braintree service cannot generate client token: ".$e->getMessage());
	            wp_localize_script('membermouse-braintreeJS', "braintreeClientTokenError", _mmt("Improper gateway configuration."));
	        }
	    }
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Braintree
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/braintree_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);

		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['braintree'])?$post['payment_service']['braintree']:array();
			$empty_errors = "";
			$config['test_mode'] = isset($config['test_mode'])?(bool)$config['test_mode']:false;
			$config['hosted_fields'] = isset($config['hosted_fields'])?(bool)$config['hosted_fields']:false;
			
			$this->setHostedFieldsEnabled($config['hosted_fields']);
			if ($config['test_mode'])
			{
				if(empty($config['test_merchant_id']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Test Merchant ID\n";
				}
				
				if(empty($config['test_public_key']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Test Public Key\n";
				}
				
				if(empty($config['test_private_key']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Test Private Key";
				}
			}
			
			if (!$config['test_mode'])
			{
				if(empty($config['live_merchant_id']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Live Merchant ID\n";
				}
				
				if(empty($config['live_public_key']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Live Public Key\n";
				}
				
				if(empty($config['live_private_key']))
				{
					$empty_errors .= "Braintree: Please enter a value for the Live Private Key";
				}
			}
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means they are all values are set
			$this->setTestMode($config['test_mode']);
			if ($this->testMode)
			{
				$this->setTestMerchantId($config['test_merchant_id']);
				$this->setTestPublicKey($config['test_public_key']);
				$this->setTestPrivateKey($config['test_private_key']);
			}
			else
			{
				$this->setLiveMerchantId($config['live_merchant_id']);
				$this->setLivePublicKey($config['live_public_key']);
				$this->setLivePrivateKey($config['live_private_key']);
			}
		}
		return new MM_Response();
	}

	
	/**
	 * Creates a customer in the Braintree System
	 * 
	 * @param MM_User $user The MemberMouse user
	 * @param MM_CustomerAddress $billingAddress The billing address of the customer credit card
	 * @param MM_CardInfo $cardInfo The customer's credit card information
	 * @param $originalOrderId (optional) The order id to link the local card on file information to
	 * 
	 * @return MM_Response indicating whether the customer was created in the Braintree system successfully
	 */
	public function createCustomer(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		try 
		{
			$customerData = array(
					'firstName' => $user->getFirstName(),
					'lastName' => $user->getLastName(),
					'email' => $user->getEmail(),
					'phone' => $user->getPhone(),
					'creditCard' => array(
							'cardholderName' => $user->getFullName(),
							'billingAddress' => array(
									'firstName' => $user->getFirstName(),
									'lastName' => $user->getLastName(),
									'streetAddress' => $billingAddress->getAddressLine1(),
									'extendedAddress' => $billingAddress->getAddressLine2(),
									'locality' => $billingAddress->getCity(),
									'region' => $billingAddress->getState(),
									'postalCode' => $billingAddress->getPostalCode(),
									'countryCodeAlpha2' => $billingAddress->getCountry()
							)
					)
			);
			
			if ($cardInfo instanceof MM_PaymentToken)
			{
			    $customerData['paymentMethodNonce'] = $cardInfo->getToken();
			}
			else 
			{
			    $rawPaymentData = array('number'         => $cardInfo->getCardNumber(),
			                            'expirationDate' => $cardInfo->getExpirationMonth()."/".$cardInfo->getExpirationYear(),
			                            'cvv'            => $cardInfo->getCVV());
			    
			    $customerData['creditCard'] += $rawPaymentData;
			}
			
			$braintreeCustomerResult = Braintree_Customer::create($customerData);
			
			if($braintreeCustomerResult->success)
			{
				//create link to braintree customer
				$result = $wpdb->insert(MM_TABLE_BRAINTREE_CUSTOMER_LINKS,array("braintree_customer_id"=>$braintreeCustomerResult->customer->id, "membermouse_customer_id"=>$user->getId()));
				if(!$result)
				{
					//TODO: do something if this fails in the future, ie log. Not a critical enough error to stop the process, but we would be interested to know it happened
				}
				
				//create entry in card on file table
				$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$braintreeCustomerResult->customer->id);
				if (!is_null($originalOrderId))
				{
					$cofData['original_order_id'] = $originalOrderId;
				}
				$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
				if(!$result)
				{
					//TODO: same deal as above: do something if this fails in the future, ie log. Not critical enough error to stop 
				}
				return new MM_Response($braintreeCustomerResult->customer->id);
			}
			else 
			{
				$errors = "";
				foreach($braintreeCustomerResult->errors->deepAll() AS $error) 
				{
					if(!empty($errors))
					{
						$errors .= ", ";
					}
					
	  				$errors .= $error->message;
				}
				
				if(!empty($errors))
				{
					return new MM_Response($errors, MM_Response::$ERROR);
				}
				else 
				{
					return new MM_Response("Unable to create customer", MM_Response::$ERROR);
				}
			}
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(), MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		parent::chargeOrder($order,$cardInfo,$validate);
		
		$tryCardOnFile = is_null($cardInfo);
		
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
		}			
					
		$braintreeCustomerId = $this->lookupCustomer($order->getCustomer()->getId());
		
		$productItems = $order->getProducts();
		if ($braintreeCustomerId === false)
		{
			if ($tryCardOnFile)
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR);
			}
			$ccResponse = $this->createCustomer($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{ 
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);
			}
			$braintreeCustomerId = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{ 
					$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
					return $updateResponse;
				}
			}
		}

		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{ 
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $createScheduledResult;
		}
		
		if ($order->getTotal() > 0.00)
		{
			$chargeResponse = $this->sendBraintreeCharge($order->getTotal(), $order->getOrderNumber(), $braintreeCustomerId);
			
			if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
			{
				$createdSubscriptions = $createScheduledResult->message;
				if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
				{
					$this->cancelScheduledSubscriptions($createdSubscriptions);
				}  
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return $chargeResponse;
			}
			
			//log to transactions tables
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}
			
			$chargeObject = $chargeResponse->getMessage();
			
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$lastFour = $chargeObject->transaction->creditCard["last4"];
			$lastFour = substr($lastFour, 0, 4);
			
			$insertData = array( "order_id"          => $order->getId(),
								 "order_item_id"     => $orderItemId,
								 "charge_id"     	 => $chargeObject->transaction->id,
								 "payment_token"     => $chargeObject->transaction->creditCard["token"],
								 "last_four"         => $lastFour,
								 "amount"            => $order->getTotal(),
								 "transaction_date"  => $transactionDate
			);
			$wpdb->insert(MM_TABLE_BRAINTREE_CHARGES,$insertData);
			$braintreeChargeId = $wpdb->insert_id;
			
			//now log the payment in the transactions table
			if ($this->testMode)
			{
				$res = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$braintreeChargeId,$transactionDate);
			}
			else 
			{
				$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$braintreeChargeId,$transactionDate);
			}
		}
		
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		return new MM_PaymentServiceResponse();
	}	
	
	
	/**
	 * Send a charge to Braintree, and returns an object containing the unfiltered result.
	 * 
	 * @param integer $amount The amount to charge in cents. If a amount is given that is a float, it is assumed to be dollars and multiplied by 100 to get the integer value
	 * @param string $orderNumber The order number to attach to the charge
	 * @param string $braintreeCustomerId (optional) The alphanumeric Braintree customer id to charge. Either customer or cardInfo should be supplied, but not both
	 * @param string $cardInfo (optional) The credit card to charge. Either customer or cardInfo should be supplied, but not both
	 * @param string $currency (optional) The currency designation to send. Defaults to "usd"
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the braintree charge object returned by the gateway, on failure contains an error message
	 */
	protected function sendBraintreeCharge($amount, $orderNumber, $braintreeCustomerId=null, $cardInfo=null, $billingAddress=null, $currency="usd")
	{
		if (is_null($braintreeCustomerId) && is_null($cardInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($braintreeCustomerId) && !is_null($cardInfo) && is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No billing address was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$chargeData = array("amount"=>$amount,
			"orderId"=>$orderNumber	
		);
		
		if (!is_null($cardInfo))
		{
			
			$chargeData['creditCard'] = array("number"   	=> $cardInfo->getCardNumber(),
								 		"expirationMonth" 	=> $cardInfo->getExpirationMonth(),
								 		"expirationYear"  	=> $cardInfo->getExpirationYear(),
										"cvv"       		=> $cardInfo->getCVV());
			
			$chargeData['billing'] = array("firstName" 		=> $billingAddress->getFirstName(),
    									"lastName" 			=> $billingAddress->getLastName(),
										"streetAddress"		=> $billingAddress->getAddressLine1(),
										"extendedAddress"   => $billingAddress->getAddressLine2(),
										"postalCode"	    => $billingAddress->getPostalCode(),
										"locality"			=> $billingAddress->getCity(),
										"region"    		=> $billingAddress->getState(),
										"countryCodeAlpha2" => $billingAddress->getCountry());
			
			$chargeData['options'] = array("submitForSettlement"				=> true,
    										"storeInVault" 						=> true,
											"addBillingAddressToPaymentMethod"	=> true);
			
		}
		else 
		{ 
			$chargeData['customerId'] = $braintreeCustomerId;
			$chargeData['options'] = array("submitForSettlement" => true);
		}
		
		try 
		{ 
			$chargeResult = Braintree_Transaction::sale($chargeData);
			
			if($chargeResult->success)
			{
				return new MM_PaymentServiceResponse($chargeResult);
			}
			else
			{
				$status = MM_PaymentServiceResponse::$FAILED;
				
				$errors = "";
				foreach($chargeResult->errors->deepAll() AS $error)
				{
					if(!empty($errors))
					{
						$errors .= ", ";
					}
						
					$errors .= $error->message;
				}
			
				if(!empty($errors))
				{
					return new MM_PaymentServiceResponse($errors, $status);
				}
				else
				{
					return new MM_PaymentServiceResponse("Unable to create charge", $status);
				}
			}
		}
		catch (Exception $e)
		{
			return new MM_PaymentServiceResponse("Unable to create charge", MM_PaymentServiceResponse::$ERROR);
		}
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber,$updatedPaymentInfo=null)
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		
		$mmUserId = MM_Order::getUserIdByOrderId($order->id);
		$braintreeCustomerId = $this->lookupCustomer($mmUserId);
		if ($braintreeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$mmUserId}",MM_Response::$ERROR);
		}

		$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$chargeResponse = $this->sendBraintreeCharge($orderItem->getRecurringAmount(), $order->getOrderNumber(), $braintreeCustomerId);
	
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		
		
		//log successful transaction
		$chargeObject = $chargeResponse->getMessage();
		$transactionDate = MM_Utils::getCurrentTime();
		$insertData = array( "order_id" => $order->getId(),
				"order_item_id"     => $orderItem->getId(),
				"charge_id"     	=> $chargeObject->transaction->id,
				"payment_token"     => $chargeObject->transaction->creditCard["token"],
				"last_four"         => $chargeObject->transaction->creditCard["last4"],
				"amount"            => $orderItem->getRecurringAmount(),
				"transaction_date"  => $transactionDate);
		
		$wpdb->insert(MM_TABLE_BRAINTREE_CHARGES,$insertData);
		$braintreeTableChargeId = $wpdb->insert_id;
		
		if ($this->testMode)
		{
			MM_TransactionLog::createTestTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$braintreeTableChargeId);
		}
		else 
		{
			MM_TransactionLog::createTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$braintreeTableChargeId);
		}

		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	/**
	 * Looks up the Braintree customer id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (string) Braintree customer id if found, boolean false if not found or errored
	 */
	protected function lookupCustomer($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT braintree_customer_id from ".MM_TABLE_BRAINTREE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		return $row->braintree_customer_id;
	}
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$braintreeCustomerId = $this->lookupCustomer($customerId);
		if ($braintreeCustomerId === false)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		try 
		{
		    $braintreeCustomer = Braintree_Customer::find($braintreeCustomerId);
		    $creditCardToken = $braintreeCustomer->creditCards[0]->token;
		    
		    $subscriptionUpdateData = array(
		        'billingAddress' 	    => array(
		            "streetAddress"		=> $billingAddress->getAddressLine1(),
		            "extendedAddress"   => $billingAddress->getAddressLine2(),
		            "postalCode"	    => $billingAddress->getPostalCode(),
		            "locality"			=> $billingAddress->getCity(),
		            "region"    		=> $billingAddress->getState(),
		            "countryCodeAlpha2" => $billingAddress->getCountry(),
		            'options' => array(
		                'updateExisting' => true
		            )
		        )
		    );
		    
		    if ($cardInfo instanceof MM_PaymentToken)
		    {
		        $subscriptionUpdateData += array('paymentMethodNonce' => $cardInfo->getToken());
		    }
		    else 
		    {
		        $subscriptionUpdateData += array('number' => $cardInfo->getCardNumber(),
                                		         'expirationDate' => $cardInfo->getExpirationMonth()."/".$cardInfo->getExpirationYear(),
                                		         'cvv' => $cardInfo->getCVV());
		    }
			$result = Braintree_CreditCard::update($creditCardToken,$subscriptionUpdateData);
			
			if($result->success)
			{
				parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
				if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
				{
					return $this->resumeSubscription($orderItem);
				}
				return new MM_PaymentServiceResponse();
			}
			else
			{
				$errors = "";
				foreach($result->errors->deepAll() AS $error)
				{
					if(!empty($errors))
					{
						$errors .= ", ";
					}
						
					$errors .= $error->message;
				}
				
				if(!empty($errors))
				{
					return new MM_PaymentServiceResponse($errors, MM_PaymentServiceResponse::$ERROR);
				}
				else
				{
					return new MM_PaymentServiceResponse("Unable to update credit card on subscription", MM_PaymentServiceResponse::$ERROR);
				}
			}
		}
		catch (Exception $e)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: ".$e->getMessage(), MM_PaymentServiceResponse::$ERROR);
		}
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Braintree and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Braintree api. If Braintree notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$braintreeChargeQuery = "SELECT * from ".MM_TABLE_BRAINTREE_CHARGES." WHERE id = %s";
				$braintreeChargeInfo = $wpdb->get_row($wpdb->prepare($braintreeChargeQuery,$transactionRow->payment_service_detail_id));
				$braintreeChargeId = $braintreeChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($braintreeChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			return $this->refundBraintreeChargeId($braintreeChargeId,$transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success*/
	}	
	
	
	/**
	 * Refunds a Braintree charge, and logs the refund in the transaction table
	 * 
	 * @param string $braintreeChargeId The Braintree identifier for the charge to be refunded
	 * @param int $originalTransactionId The identifier for the membermouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refundBraintreeChargeId($braintreeChargeId, $originalTransactionId)
	{
		global $wpdb;
		
		$alreadyRefunded = false;
		
		try 
		{
			// get the transaction from Braintree
			$transaction = Braintree_Transaction::find($braintreeChargeId);
			
			// check if transaction has already been refunded and if so, determine if transaction should be refunded or voided 
			// based on transaction status
			if(isset($transaction->refundIds) && is_array($transaction->refundIds) && count($transaction->refundIds) > 0)
			{
				$alreadyRefunded = true;
			}
			else if($transaction->status == "settled" || $transaction->status == "settling")
			{
				$result = Braintree_Transaction::refund($braintreeChargeId);
				
				if(!$result->success)
				{
					return new MM_PaymentServiceResponse("Error refunding transaction: {$result->errors}",MM_PaymentServiceResponse::$ERROR);
				}
			} 
			else if($transaction->status == "authorized" || $transaction->status == "submitted_for_settlement")
			{
				$result = Braintree_Transaction::void($braintreeChargeId);
				
				if(!$result->success)
				{
					return new MM_PaymentServiceResponse("Error refunding transaction: {$result->errors}",MM_PaymentServiceResponse::$ERROR);
				}
			}
		}
		catch (Exception $e)
		{
			return new MM_PaymentServiceResponse("Error refunding transaction: {$e->getMessage()}",MM_PaymentServiceResponse::$ERROR);
		}
			
		//get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		if (!$alreadyRefunded || ($alreadyRefunded && is_null($originalTransactionInfo->refund_id)))
		{
			$transactionDescription = "Refund for transaction# {$originalTransactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
			
			if ($this->testMode)
			{
				$response = MM_TransactionLog::createTestTransactionEntry($originalTransactionInfo->order_id,
						$originalTransactionInfo->order_item_id,
						$originalTransactionInfo->amount,
						$originalTransactionInfo->currency,
						$transactionDescription,
						MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
						false,
						$this->getId(),
						null,
						$transactionDate,
						$originalTransactionId);
			}
			else 
			{
				$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$originalTransactionInfo->amount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$originalTransactionId);
			}
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
			}
		}
		
		if ($alreadyRefunded)
		{
			return new MM_PaymentServiceResponse("This transaction was already refunded by Braintree. The database has been updated",MM_PaymentServiceResponse::$ERROR);
		}
		return new MM_PaymentServiceResponse();
	}
	
	
	public function getTestMerchantId()
	{
		return $this->testMerchantId;
	}
	
	
	public function setTestMerchantId($merchantId)
	{
		$this->testMerchantId = $merchantId;
	}
	
	
	public function getTestPublicKey()
	{
		return $this->testPublicKey;
	}
	
	
	public function setTestPublicKey($publicKey)
	{
		$this->testPublicKey = $publicKey;
	}
	
	
	public function getTestPrivateKey()
	{
		return $this->testPrivateKey;
	}
	
	
	public function setTestPrivateKey($privateKey)
	{
		$this->testPrivateKey = $privateKey;
	}
	
	
	public function getLiveMerchantId()
	{
		return $this->liveMerchantId;
	}
	
	
	public function setLiveMerchantId($merchantId)
	{
		$this->liveMerchantId = $merchantId;
	}
	
	
	public function getLivePublicKey()
	{
		return $this->livePublicKey;
	}
	
	
	public function setLivePublicKey($publicKey)
	{
		$this->livePublicKey = $publicKey;
	}
	
	
	public function getLivePrivateKey()
	{
		return $this->livePrivateKey;
	}
	
	
	public function setLivePrivateKey($privateKey)
	{
		$this->livePrivateKey = $privateKey;
	}
	
	
	public function setTestMode($testMode)
	{
		$testMode = (bool)$testMode;
		if ($this->testMode != $testMode)
		{
			$this->setupBraintree(); //attempt to catch programmatic mode changes and reinitialize Braintree
		}
		$this->testMode = $testMode;
	}
	
	
	public function getTestMode()
	{
		return $this->testMode;
	}
	
	
	/**
	 * @see MM_PaymentService::inTestMode()
	 */
	public function inTestMode()
	{
		return $this->getTestMode();
	}
	
	
	/**
	 * @see MM_PaymentService::switchToTestMode()
	 */
	public function switchToTestMode()
	{
		$this->testMode = true;
		return true;
	}
    /**
     * @return boolean
     */
    public function getHostedFieldsEnabled()
    {
        return $this->hostedFieldsEnabled;
    }

    /**
     * @param boolean $hostedFieldsEnabled
     */
    public function setHostedFieldsEnabled($hostedFieldsEnabled)
    {
        $this->hostedFieldsEnabled = $hostedFieldsEnabled;
    }
    
    
    public function tokenExchangeEnabled()
    {
        return $this->hostedFieldsEnabled;
    }

    /**
     * Important: this is the framework method that indicates if the service in its current configuration has payment fields that are hosted remotely.
     * There is another method to determine if Braintree's "Hosted Fields" technology is active. Currently, Hosted Fields must be enabled for this method to return true, 
     * but if in the future there is an additional hosted payment field technology that can optionally be enabled, this test will become more complicated
     * {@inheritDoc}
     * @see MM_PaymentService::hasHostedPaymentFields()
     * @return boolean true if there are payment fields hosted remotely (usually via iframes)
     */
    public function hasHostedPaymentFields()
    {
        return $this->hostedFieldsEnabled;
    }
    
    
    public function formFieldOverride($formType, $fieldName)
    {
        switch ($fieldName)
        {
            case 'ccnumber':
                return "<div id='mm_braintree_cc_number' class='mm-braintree-hosted-field'></div>\n";
                break;
            case 'ccexpirationdate':
                return "<div id='mm_braintree_cc_exp_month' class='mm-braintree-hosted-field'></div><div id='mm_braintree_cc_exp_year' class='mm-braintree-hosted-field'></div>\n";
                break;
            case 'ccsecuritycode':
                return "<div id='mm_braintree_cc_cvv' class='mm-braintree-hosted-field'></div>\n";
                break;
            default:
                return false;
        }
    }

	
	  
}