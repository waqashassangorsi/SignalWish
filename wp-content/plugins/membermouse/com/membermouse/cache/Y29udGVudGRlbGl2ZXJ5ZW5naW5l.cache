/**
 * 
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ContentDeliveryEngine
{
	private static function getPostsWithRestrictions()
	{
		global $wpdb;
		
		$sql = "select id from {$wpdb->posts} where post_status='publish'";
		$rows = $wpdb->get_results($sql);
		
		$posts = array();
		
		if(is_array($rows) && count($rows)>0)
		{
			foreach($rows as $row)
			{
				$posts[] = $row->id;
			}
		}
		
		return $posts;
	}
	
	private static function getAccessType($obj)
	{
		if($obj instanceof MM_MembershipLevel)
		{
			return "member_type";
		}
		else if($obj instanceof MM_Bundle)
		{
			return "access_tag";
		}
		
		return false;
	}
	
	private static function getSchedule($accessId, $accessType)
	{
		$whereEntries = array();
		$where = new stdClass();
		$where->access_id = $accessId;
		$where->access_type = $accessType;
		$whereEntries[] =$where;
		
		return self::getContentSchedule($whereEntries);
	}
	
	public static function copySchedule($fromObj, $toObj, $overwrite=false){
		global $wpdb;
		
		$fromAccessType = self::getAccessType($fromObj);
		if($fromAccessType ===false){
			return new MM_Response("invalid from object type", MM_Response::$ERROR);
		}
		
		$toAccessType = self::getAccessType($toObj);
		if($toAccessType ===false){
			return new MM_Response("invalid to object type", MM_Response::$ERROR);
		}
		
		if($overwrite)
		{
			$sql = "delete from ".MM_TABLE_POSTS_ACCESS." where access_id='".$toObj->getId()."' and access_type='{$toAccessType}'";
			$wpdb->query($sql);
		}
		
		$errors = "";
		$fromSchedule = self::getSchedule($fromObj->getId(), $fromAccessType);

		if(count($fromSchedule)>0){
			foreach($fromSchedule as $day=>$rows){
				foreach($rows as $row){
					$postElem = "mm_member_types_opt";
					if($toAccessType != "member_type")
						$postElem = "mm_access_tags_opt";
			
					$data = array(
						'post_ID'=>$row->post_id,
						'type'=>$toAccessType,
						'edit_id'=>0,
						'day'=>$day,
						$postElem=>$toObj->getId(),
					);
					
					$accessRights = new MM_AccessRightsView();
					$response = $accessRights->saveAccessRights($data);
					
					if($response->type == MM_Response::$ERROR){
						$errors .= "-\"{$row->post_title}\" on day {$day} |";
					}
				}
			}
			
			if(!empty($errors))
			{
				return new MM_Response("Schedule successfully copied.|Below are pages or posts we could not copy: |".$errors);
			}
			
			return new MM_Response("Schedule successfully copied");
		}
		return new MM_Response("No schedule found for ".$fromObj->getName(), MM_Response::$ERROR);
	}
	

	public static function getContentSchedule($whereEntries)
	{
		global $wpdb;
		
		if(empty($whereEntries))
		{
			return array();
		}
		
		$sql = "select pa.*, p.post_title from ".MM_TABLE_POSTS_ACCESS." pa, {$wpdb->posts} p 
					where  p.post_status='publish' and (";
		foreach($whereEntries as $entry)
		{
			if(!isset($entry->access_type) || !isset($entry->access_id))
			{
				return array();
			}
			
			$sql.= " pa.is_smart_content='0' and ( pa.access_type='{$entry->access_type}' and  pa.access_id='{$entry->access_id}') OR ";
		}
		
		$sql= preg_replace("/(OR )$/", ")", $sql); 
		$sql.=" AND pa.post_id=p.id ";	
		$sql.=" order by ABS(days) asc ";
		
		$returnArr = array();
		
		if(!empty($sql))
		{
			$rows = $wpdb->get_results($sql);
			
			if(is_array($rows) && count($rows)>0)
			{
				foreach($rows as $row)
				{
					$returnArr[$row->days][] = $row;
				}
				
				return $returnArr;
			}
		}
		
		return array();
	}
	
	/*
	 * @param $users is a id=>value assoc array 
	 */
	public static function getUserSchedules($users)
	{
		$newAccessArr = array();
		$dc = new MM_ProtectedContentEngine();
		
		if(is_array($users))
		{
			$posts = self::getPostsWithRestrictions();
			
			foreach($users as $userId=>$email)
			{
				$user = new MM_User($userId);
				
				foreach($posts as $postId)
				{
					$days = $dc->daysToAccess($postId, $userId);
					
					if($days!==false && $days===0)
					{
						$newAccessArr[$userId] = $postId;
					}
				}
			}
		}
		
		return $newAccessArr;
	}
}