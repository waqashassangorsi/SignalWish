class MM_DecisionTagProcessor_V1 extends MM_DecisionTagProcessor
{	
	public static function mm_member_decision($content, $atts, $code)
	{
		$user = MM_SmartTagUtil::getCurrentUser();
		
		$enableDebug = false;
		$debugStr = "";
		$attrStr = "";
		
		if(is_array($atts) && count($atts)>0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key=$v;
				$attrStr .= $key."=".$v.", ";
			}
		}
		
		$debugStr .= "<!-- --- -->";
		$debugStr .= "<!-- mm_member_decision: attributes: {$attrStr} -->";
		
		if($user->isValid())
		{
			$debugStr .= "<!-- mm_member_decision: user valid: true -->";
		
			$statusCheck = self::$IGNORE;
			$membershipCheck = self::$IGNORE;
			$bundleCheck = self::$IGNORE;
			$isFreeCheck = self::$IGNORE;
			$daysAsMember = 0;
			$daysAsMemberComparison = ">";
				
			// get number of days as member
			if(isset($daysasmember))
			{
				if(intval($daysasmember) < 0)
				{
					$daysAsMemberComparison = "<";
				}
					
				$daysAsMember = abs($daysasmember);
			}
				
			// check to see if the current member has the appropriate status
			if(isset($status))
			{
				$statusCheck = self::$FAIL;
				$negateResult = self::doNegateValue($status);
				if($negateResult)
				{
					$status = substr($status, 1);
				}
				
				if(preg_match("/(active|paused|overdue|locked|expired|canceled|pending_cancel)/", strtolower($status)))
				{
					if(strtolower($status) == "active")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$ACTIVE) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$ACTIVE) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "paused")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$PAUSED) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$PAUSED) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "canceled")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$CANCELED) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$CANCELED) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "expired")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$EXPIRED) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$EXPIRED) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "overdue")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$OVERDUE) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$OVERDUE) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "pending_cancel")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$PENDING_CANCELLATION) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$PENDING_CANCELLATION) ? self::$PASS : self::$FAIL;
						}
					}
					else if(strtolower($status) == "locked")
					{
						if($negateResult)
						{
							$statusCheck = ($user->getStatus() != MM_Status::$LOCKED) ? self::$PASS : self::$FAIL;
						}
						else
						{
							$statusCheck = ($user->getStatus() == MM_Status::$LOCKED) ? self::$PASS : self::$FAIL;
						}
					}
				}
			}
				
			// check to see if the current member has the appropriate membership level
			if(isset($membershipid))
			{
				$membershipCheck = self::$FAIL;
		
				$membershipArr = explode(",", $membershipid);
		
				for($i=0; $i<count($membershipArr); $i++)
				{
					if(intval($membershipArr[$i]) < 0)
					{
						if($user->getMembershipId() == abs($membershipArr[$i]))
						{
							if($membershipCheck == self::$FAIL)
							{
								$membershipCheck = self::$FAIL;
							}
						}
						else
						{
							$membershipCheck = self::$PASS;
							break;
						}
					}
					else if($user->getMembershipId() == $membershipArr[$i])
					{
						$membershipCheck = self::$PASS;
						break;
					}
				}
			}
			else
			{
				$membershipCheck = self::$IGNORE;
			}
				
			// check to see if the current member has the appropriate bundle
			if(isset($hasbundle))
			{
				$bundleCheck = self::$FAIL;
				$negateResult = false;
				$bundleArr = explode(",", $hasbundle);
				
				$compare = array();
				
				// get data from preview bar
				if(MM_Employee::isEmployee($user->getId()))
				{
					$compare = MM_Preview::getData()->getBundles();
				}
				else
				{
					$appliedBundles = $user->getAppliedBundles();
						
					foreach($appliedBundles as $appliedBundle)
					{
						$compare[] = $appliedBundle->getBundleId();
					}
					
					// get bundle applied to the member's account via their membership level
					$membership = $user->getMembershipLevel();
					$membershipBundles = $membership->getBundles();
						
					foreach($membershipBundles as $id=>$name)
					{
						$compare[] = $id;
					}
				}
				
				for($i=0; $i<count($bundleArr); $i++)
				{
					if(intval($bundleArr[$i]) < 0)
					{
						$negateResult = true;
						$bundleArr[$i] = abs(intval($bundleArr[$i]));
					}
					else
					{
						$negateResult = false;
					}
					
					if(in_array($bundleArr[$i], $compare))
					{
						if(!$negateResult)
						{
							$bundleCheck = self::$PASS;
							break;
						}
					}
					else if($negateResult)
					{
						$bundleCheck = self::$PASS;
						break;
					}
				}
			}
			else
			{
				$bundleCheck = self::$IGNORE;
			}
		
			// check to see if current member has the appropriate membership type (free or paid)
			if(isset($isfree))
			{
				$isFreeCheck = self::$FAIL;
					
				$memberType = new MM_MembershipLevel();
				$memberType->setId($user->getMembershipId());
				$memberType->getData();
						
				if($memberType->isValid())
				{
					$isFreeMember = $memberType->isFree();
		
					if((strtolower($isfree) == "true" && $isFreeMember == true) || (strtolower($isfree) == "false" && $isFreeMember == false))
					{
						$isFreeCheck = self::$PASS;
					}
					else
					{
						$isFreeCheck = self::$FAIL;
					}
				}
				else
				{
					$isFreeCheck = self::$PASS;
				}
			}
			else
			{
				$isFreeCheck = self::$IGNORE;
			}
		}
		else
		{
			$debugStr .= "<!-- mm_member_decision: user valid: false -->";
			$statusCheck = $membershipCheck = $bundleCheck = $isFreeCheck = self::$IGNORE;
			$daysAsMember = 0;
		}
		
		$debugStr .= "<!-- mm_member_decision: statusCheck: '{$statusCheck}' -->";
		$debugStr .= "<!-- mm_member_decision: membershipCheck: '{$membershipCheck}' -->";
		$debugStr .= "<!-- mm_member_decision: productBundleCheck: '{$bundleCheck}' -->";
		$debugStr .= "<!-- mm_member_decision: isFreeCheck: '{$isFreeCheck}' -->";
		
		// check to see if the current visitor is a member
		if(isset($ismember))
		{
			$isMemberCheck = self::$FAIL;
		
			if(($ismember == "true" && $user->isValid()) || ($ismember == "false" && !$user->isValid()))
			{
				$isMemberCheck = self::$PASS;
			}
			else
			{
				$isMemberCheck = self::$FAIL;
			}
		}
		else
		{
			$isMemberCheck = self::$IGNORE;
		}
		 
		$debugStr .= "<!-- mm_member_decision: isMemberCheck: '{$isMemberCheck}' -->";
		
		// render content if everything checks out
		if($user->isValid())
		{
			$debugStr .= "<!-- mm_member_decision: RENDER user is valid -->";
			if(self::pass($statusCheck) && self::pass($membershipCheck) && self::pass($bundleCheck)
				&& self::pass($isFreeCheck) && self::pass($isMemberCheck))
			{
				$debugStr .= "<!-- mm_member_decision: RENDER checks passed -->";
	
				if($user->isAdmin() || MM_Employee::isEmployee($user->getId()))
				{
					$preview_obj = MM_Preview::getData();
					$membershipId = $preview_obj->getMembershipId();
					$debugStr .= "<!-- mm_member_decision: RENDER user is admin, use membership level {$membershipId} -->";
				}
				else
				{
					$membershipId = $user->getMembershipId();
					$debugStr .= "<!-- mm_member_decision: RENDER use membership level {$membershipId} -->";
				}
		
				if(self::checkDaysWithAccess($user, MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP, $membershipId, $daysAsMember, $daysAsMemberComparison))
				{
					$debugStr .= "<!-- mm_member_decision: DO RENDER -->";
					return do_shortcode($content);
				}
			}
		}
		else if(self::pass($isMemberCheck, true))
		{
			$debugStr .= "<!-- mm_member_decision: user is not valid, DO RENDER -->";
			return do_shortcode($content);
		}
		
		if($enableDebug)
		{
			echo $debugStr;
		}
	}
	
	/**
	 * This function processes the MM_Order_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed. It can be
	 * used in the context of a checkout form or a confirmation page
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_order_decision($content, $atts, $code)
	{
		$outputStr = "";
	
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
		$order = MM_SmartTagUtil::getCurrentOrder();
		$productId = 0;
		$membershipId = 0;
		$isShippable = false;
		$isFree = false;
		$dataSet = false;
		
		if(isset($form) && !empty($form))
		{
			// get data from Checkout Form
			$dataSet = true;
			$productId = $form->productId;
			$membershipId = $form->membershipLevelId;
			$isFree = $form->isFree;
			$isShippable = $form->isShippable;
		}
		else if($order->isValid())
		{
			// get data from order
			$products = $order->getProducts();
			if(count($products) > 0)
			{
				$orderItem = array_pop($products); // currently assuming supporting 1 product per order
				if($orderItem->isValid())
				{
					$productId = $orderItem->getItemId();
					$product = new MM_Product($productId);
					
					if($product->isValid())
					{
						$dataSet = true;
						$isFree = false;
						$isShippable = $product->isShippable();
						$assocMembership = $product->getAssociatedMembership();
						
						if($assocMembership->isValid())
						{
							$membershipId = $assocMembership->getId();
						}
					}
				}
			}
		}
		else 
		{
			// if the form or order is not set then that means it was a free member sign up
			// confirm that this is a confirmation page and then populate the data from the 
			// user in the session
			global $post;
			
			if(isset($post->ID) && intval($post->ID)>0)
			{
				$postId = $post->ID;
			}
			else if(isset($post->data->ID) && intval($post->data->ID))
			{
				$postId = $post->data->ID;
			}
			
			if(MM_CorePageEngine::isConfirmationPage($postId))
			{
				$user = MM_SmartTagUtil::getCurrentUser();
				
				if($user->isValid())
				{
					$dataSet = true;
					$isFree = $user->getMembershipLevel()->isFree();
					$isShippable = false;
					$productId = 0;
					$membershipId = $user->getMembershipId();
				}
			}
		}
		
		if($dataSet)
		{
			$productCheck = self::$IGNORE;
			$membershipCheck = self::$IGNORE;
			$isFreeCheck = self::$IGNORE;
			$isShippableCheck = self::$IGNORE;
			
			// check for product
			if(isset($productid))
			{
				$productCheck = self::$FAIL;
			
				$productArr = explode(",", $productid);
			
				for($i = 0; $i < count($productArr); $i++)
				{
					if(intval($productArr[$i]) < 0)
					{
						if($productId == abs($productArr[$i]))
						{
							if($productCheck == self::$FAIL)
							{
								$productCheck = self::$FAIL;
							}
						}
						else
						{
							$productCheck = self::$PASS;
							break;
						}
					}
					else if($productId == $productArr[$i])
					{
						$productCheck = self::$PASS;
						break;
					}
				}
			}
			else
			{
				$productCheck = self::$IGNORE;
			}
			
			// check for membership
			if(isset($membershipid))
			{
				$membershipCheck = self::$FAIL;
					
				$membershipArr = explode(",", $membershipid);
					
				for($i = 0; $i < count($membershipArr); $i++)
				{
					if(intval($membershipArr[$i]) < 0)
					{
						if($membershipId == abs($membershipArr[$i]))
						{
							if($membershipCheck == self::$FAIL)
							{
								$membershipCheck = self::$FAIL;
							}
						}
						else
						{
							$membershipCheck = self::$PASS;
							break;
						}
					}
					else if($membershipId == $membershipArr[$i])
					{
						$membershipCheck = self::$PASS;
						break;
					}
				}
			}
			else
			{
				$membershipCheck = self::$IGNORE;
			}
			
		 	// check if membership is free
			if(isset($isfree))
	 		{
	 		 	$isFreeCheck = self::$FAIL;
	 			 	 
	 			if((strtolower($isfree) == "true" && $isFree == true) 
	 					|| (strtolower($isfree) == "false" && $isFree == false))
	 			{
	 				$isFreeCheck = self::$PASS;
	 			}
	 			else
	 			{
	 				$isFreeCheck = self::$FAIL;
	 			}
		 	}
		 	else
		 	{
		 		$isFreeCheck = self::$IGNORE;
		 	}
			
		 	// check if product is shippable
			if(isset($isshippable))
	 		{
	 		 	$isShippableCheck = self::$FAIL;
	 			 	 
	 			if((strtolower($isshippable) == "true" && $isShippable == true) 
	 					|| (strtolower($isshippable) == "false" && $isShippable == false))
	 			{
	 				$isShippableCheck = self::$PASS;
	 			}
	 			else
	 			{
	 				$isShippableCheck = self::$FAIL;
	 			}
		 	}
		 	else
		 	{
		 		$isShippableCheck = self::$IGNORE;
		 	}
		 	
		 	if(self::pass($productCheck) && self::pass($membershipCheck)
		 			&& self::pass($isFreeCheck) && self::pass($isShippableCheck))
		 	{
		 		return do_shortcode($content);
		 	}
		 	else
		 	{
		 		return "";
		 	}
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Affiliate_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed and the current 
	 * affiliate/subaffiliate values stored in cookies
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_affiliate_decision($content, $atts, $code)
	{
		if(self::checkCookies($atts))
		{
			return do_shortcode($content);
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Custom_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed and the current 
	 * values stored in cookies
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_custom_decision($content, $atts, $code)
	{
		if(self::checkCookies($atts))
		{
			return do_shortcode($content);
		}
		else
		{
			return "";
		}
	}
	
 	protected static function checkCookies($atts)
 	{
 		$testResults = array();
 		$checkCtr = 0;
 			
 		if(is_array($atts) && count($atts) > 0)
 		{	
 			foreach($atts as $key=>$checkValues)
 			{
 				$testResults[$checkCtr] = $cookiesCheck = self::$FAIL;
 				
 				// get value set in cookies for the current key
 				if(strtolower($key) == "affiliate")
 				{
 					$cookieValue = MM_Cookies::getAffiliateValue();
 				}
 				else if(strtolower($key) == "subaffiliate")
 				{
 					$cookieValue = MM_Cookies::getSubAffiliateValue();
 				}
 				else
 				{
 					$cookieValue = MM_Cookies::getCookie($key);
 				}
	
 				if(preg_match("/,/", $checkValues))
 				{
 					//echo "<!-- checkCookies: key: '{$key}' multiple values... -->";
 					//echo "<!-- checkCookies: cookie value: '{$cookieValue}' -->";
 					$checkValuesArr = explode(",", $checkValues);
 					
 					for($i=0; $i < count($checkValuesArr); $i++)
 					{
 						$crntValue = $checkValuesArr[$i];
 						
 						if(self::doNegateValue($crntValue))
 						{
 							$crntValue = substr($crntValue, 1);
 							//echo "<!-- checkCookies: key: '{$key}' value-{$i}: '{$crntValue}' -->";
 							if(strtolower($cookieValue) != strtolower($crntValue))
 							{
 								$testResults[$checkCtr] = self::$PASS;
 								break;
 							}
 							else if($testResults[$checkCtr] == self::$FAIL)
 							{
 								$testResults[$checkCtr] = self::$FAIL;
 							}
 						}
 						else 
 						{
	 						if(strtolower($cookieValue) == strtolower($crntValue))
	 						{
	 							$testResults[$checkCtr] = self::$PASS;
	 							break;
	 						}
	 						else if($cookiesCheck == self::$FAIL)
	 						{
	 							$testResults[$checkCtr] = self::$FAIL;
	 						}
 						}
 					}
 				}
 				else
 				{
 					$crntValue = $checkValues;
 					if(self::doNegateValue($crntValue))
 					{
 						$crntValue = substr($crntValue, 1);
 						if(strtolower($cookieValue) != strtolower($crntValue))
 						{
 							$testResults[$checkCtr] = self::$PASS;
 						}
 						else
 						{
 							$testResults[$checkCtr] = self::$FAIL;
 						}
 					}
 					else
 					{
 						if(strtolower($cookieValue) == strtolower($crntValue))
 						{
 							$testResults[$checkCtr] = self::$PASS;
 						}
 						else
 						{
 							$testResults[$checkCtr] = self::$FAIL;
 						}
 					}
 				}
 				
 				$checkCtr++;
 			}
 		}
 		
 		$testPassed = true;
 		for($i = 0; $i < count($testResults); $i++)
 		{
 			$testPassed = $testPassed && self::pass($testResults[$i]);
 		}
 		
 		return $testPassed;
 	}
 	
 	private static function doNegateValue($value)
 	{
 		if(strpos($value, "-") === 0)
 		{
 			return true;
 		}
 		else
 		{
 			return false;
 		}
 	}
}
