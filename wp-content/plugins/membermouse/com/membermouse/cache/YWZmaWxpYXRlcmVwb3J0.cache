/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_AffiliateReport extends MM_AdvancedReportBase 
{
	
	protected $visualElements = array("MM_ReportDataGrid");
	
	public static $AFFILIATE_REPORT_DATAGRID = "affiliate_report_datagrid";
	
	//query identifiers
	public static $AFFILIATE_REPORT_QUERY = "affiliate_report_query";
	public static $TEST_QUERY = "test_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$AFFILIATE_REPORT_DATAGRID:
				return $this->renderAffiliateReportDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderAffiliateReportDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData($this,self::$TEST_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		
		$gridHeaders = array("segment"       => array('label'=>"Segment"), 
						     "free_members"  => array('label'=>"Free Members"),
							 "paid_members"  => array('label'=>"Paid Members"),
							 "total_members" => array('label'=>"Total Members"),
							 "total_revenue" => array('label'=>"Total Revenue"),
								
		);
		$grid = MM_ReportDatagrid::createFromData(MM_AffiliateReport::$AFFILIATE_REPORT_DATAGRID, $gridHeaders, $dataResponse);
		$grid->setGridTitle("Affiliate Report");
		return new MM_ReportResponse($grid->render());
	}
	
	
	public static function testQuery($params)
	{
		global $wpdb;
		error_log("in test query");
		if (isset($params['affiliate_id']) && !empty($params['affiliate_id']))
		{
			$sql = "select distinct sub_affiliate_id as segment, '100' as free_members, '200' as paid_members, '300' as total_members, 400.00 as total_revenue from mm_orders where affiliate_id=%s";
			$sql = $wpdb->prepare($sql,$params['affiliate_id']);
			$results = $wpdb->get_results($sql,ARRAY_A);
		}
		else 
		{
			error_log("in section");
			$sql = "select distinct affiliate_id as segment, '100' as free_members, '200' as paid_members, '300' as total_members, 400.00 as total_revenue from mm_orders";
			$results = $wpdb->get_results($sql,ARRAY_A);
			foreach ($results as $k=>&$v)
			{
				$v['segment'] = "<a onClick='mmjs.navigate(\"".self::$AFFILIATE_REPORT_DATAGRID."\",{affiliate_id:\"{$v['segment']}\"});'>{$v['segment']}</a>";
			}
		}
		
		/*
		$results[1]['subrows']['columnAliases'] = array("segment"=>"subaffiliate_id");
		for ($i=1; $i<4; $i++) //3 test subrows
		{
			$subresults[] = array('subaffiliate_id'=>"sub{$i}", 'free_members'=>'100','paid_members'=>'200','total_members'=>'300','total_revenue'=>'400');
		}
		$dataset = MM_ReportDataset::createCompoundReportDataset($params,$results);
		$subparams = $params + array('subaffiliate_id'=>'foo');
		$dataset->addAdditionalDataset($subparams, $subresults);
		*/
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$results);
		return $dataset;
	}
	
	/**
	 * Generate the data for the Avg Customer Value report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateAffiliateReportData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Afilliate report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Affiliate report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$membershipLevelTable = MM_TABLE_MEMBERSHIP_LEVELS;
		$userDataTable = MM_TABLE_USER_DATA;
		$ordersTable = MM_TABLE_ORDERS;
		
		$startTime = strtotime($params['start_date']);
		$endTime = strtotime($params['end_date']);
		
		$startDate = date("Y-m-d H:i:s",$startTime); //mysql format
		$endDate =   date("Y-m-d H:i:s",$endTime);
		
		$affiliateResults = array();
		$subaffiliateResults = array();
		
		$excludedStatuses = "'".MM_Status::$PENDING."','".MM_Status::$ERROR."'"; //quoted and comma-seperated
		
		/* step 1 - get affiliate_id (segment), sub_affiliate_id, free_members, paid_members, and total_members */
		$sql = "SELECT IF(o.affiliate_id='','[unspecified]',o.affiliate_id) AS affiliate_id,".
			   "IF(o.sub_affiliate_id='','[unspecified]',o.sub_affiliate_id) AS sub_affiliate_id,".
			   "SUM(ml.is_free) AS free_members, SUM(IF((ml.is_free = 0),1,0)) AS paid_members, SUM(1) AS total_members ".
			   "FROM {$ordersTable} o INNER JOIN {$userDataTable} mu ON (o.user_id = mu.wp_user_id) ".
			   "INNER JOIN {$membershipLevelTable} ml ON (mu.membership_level_id = ml.id) ".
			   "WHERE (o.date_added BETWEEN '{$startDate}' AND '{$endDate}') AND (mu.status NOT IN ({$excludedStatuses})) ".
			   "GROUP BY o.affiliate_id, o.sub_affiliate_id";
		$results = $wpdb->get_results($sql,ARRAY_A);
		if (count($results) > 0)
		{
			foreach ($results as $k=>$v)
			{
				$affiliate = $v['affiliate_id'];
				foreach ($v as $column=>$columnValue)
				{
					if (($column != 'affiliate_id') && ($column != 'sub_affiliate_id'))
					{
						$affiliateResults[$affiliate][$column] = isset($affiliateResults[$affiliate][$column])?($affiliateResults[$affiliate][$column] + $columnValue):$columnValue;
					}
				}
			}
			
			$subaffiliateResults = $results;
			
			/* step 2 - get total revenue as a positive decimal number */
			$sql = "SELECT IF(o.affiliate_id='','[unspecified]',o.affiliate_id) AS affiliate_id,".
				   "IF(o.sub_affiliate_id='','[unspecified]',o.sub_affiliate_id) AS sub_affiliate_id,".
				   "SUM(ABS(t.amount)) AS total_revenue FROM {$transactionsTable} t INNER JOIN {$ordersTable} o  ON (t.order_id = o.id) ".
				   "WHERE (t.transaction_type IN ('".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."','".MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."')) ".
				   "AND (o.date_added BETWEEN '{$startDate}' and '{$endDate}') ".
				   "GROUP BY o.affiliate_id, o.sub_affiliate_id";
			$results = $wpdb->get_results($sql,ARRAY_A);
			foreach ($results as $k=>$v)
			{
				$affiliate = $v['affiliate_id'];
				foreach ($v as $column=>$columnValue)
				{
					if (($column != 'affiliate_id') && ($column != 'sub_affiliate_id'))
					{
						$affiliateResults[$affiliate][$column] = isset($affiliateResults[$affiliate][$column])?($affiliateResults[$affiliate][$column] + $columnValue):$columnValue;
					}
				}
			}
			
			/* step 3 - get 30,60,90,120,150 and 180 day customer value */
			$sql = "SELECT IF(affiliate_id='','[unspecified]',affiliate_id) AS affiliate_id,".
				   "IF(sub_affiliate_id='','[unspecified]',sub_affiliate_id) AS sub_affiliate_id,".
				   "SUM(IF(days_out=0,amount,0)) AS 0_day,".
				   "SUM(IF(days_out<=30,amount,0)) AS 30_day,".
				   "SUM(IF(days_out<=60,amount,0)) AS 60_day,".
				   "SUM(if(days_out<=90,amount,0)) AS 90_day,".
				   "SUM(IF(days_out<=120,amount,0)) AS 120_day ".
				   "SUM(IF(days_out<=150,amount,0)) AS 150_day ".
				   "SUM(IF(days_out<=180,amount,0)) AS 180_day ".
				   "FROM (SELECT t.transaction_date, o.date_added, t.amount, o.affiliate_id, o.sub_affiliate_id, ".
				   "IF((DATEDIFF(t.transaction_date,o.date_added)=-1),0,DATEDIFF(t.transaction_date,o.date_added)) ".
				   "AS days_out FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
				   "WHERE (t.transaction_type IN ('".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."','".MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."')) ".
				   "AND (o.date_added BETWEEN '{$startDate}' and '{$endDate}')) AS Q GROUP BY affiliate_id, sub_affiliate_id";
				   		
			/* step 4, part 1 - get avg days as member for affiliates */
			$sql = "SELECT IF(affiliate_id='','[unspecified]',affiliate_id) AS affiliate_id, ".
			  	   "AVG(days_as_member) AS avg_days_as_member ".
			  	   "FROM (SELECT DISTINCT o.affiliate_id, mu.wp_user_id, mu.status, ".
				   "DATEDIFF(IF(((mu.status='".MM_Status::$CANCELED."') or (mu.status='".MM_Status::$EXPIRED."')),mu.status_updated,NOW()),o.date_added) ".
				   "AS days_as_member FROM mm_orders o INNER JOIN mm_user_data mu ON (o.user_id = mu.wp_user_id) ".
				   "WHERE (o.date_added BETWEEN '{$startDate}' AND '{$endDate}') AND (mu.status NOT IN ({$excludedStatuses}))) AS Q GROUP BY affiliate_id";
			
		    /* step 4, part 2 - get avg days as member for subaffiliates */
		    $sql = "SELECT IF(affiliate_id='','[unspecified]',affiliate_id) AS affiliate_id, ".
		   		   "IF(sub_affiliate_id='','[unspecified]',sub_affiliate_id) AS sub_affiliate_id,".
		   		   "AVG(days_as_member) AS avg_days_as_member ".
		   		   "FROM (SELECT DISTINCT o.affiliate_id, o.sub_affiliate_id, mu.wp_user_id, mu.status, ".
		   		   "DATEDIFF(IF(((mu.status='".MM_Status::$CANCELED."') or (mu.status='".MM_Status::$EXPIRED."')),mu.status_updated,NOW()),o.date_added) ".
		   		   "AS days_as_member FROM mm_orders o INNER JOIN mm_user_data mu ON (o.user_id = mu.wp_user_id) ".
		   		   "WHERE (o.date_added BETWEEN '{$startDate}' AND '{$endDate}') AND (mu.status NOT IN ({$excludedStatuses}))) AS Q GROUP BY affiliate_id,sub_affiliate_id";
		
			/* step 5 - calculate churn - first get the churn along with the raw data for the sub affiliates, and then calculate the values for the affiliates ... */
			$sql = "select IF(o.affiliate_id='','[unspecified]',o.affiliate_id) AS affiliate_id,".
				   "IF(o.sub_affiliate_id='','[unspecified]',o.sub_affiliate_id) AS sub_affiliate_id,".
				   "SUM(IF(mu.status='".MM_Status::$CANCELED."',1,0)) AS cancelled,".
				   "SUM(1) AS total_members,".
				   "SUM(IF(mu.status='".MM_Status::$CANCELED."',1,0))/SUM(1) AS churn ".
				   "FROM mm_orders o INNER JOIN mm_user_data mu ON (o.user_id = mu.wp_user_id) ".
				   "WHERE (o.date_added BETWEEN '{$startDate}' AND '{$endDate}') AND (mu.status NOT IN ({$excludedStatuses}))".
				   "GROUP BY o.affiliate_id,o.sub_affiliate_id";
			
			/* step 6 - calculate refund rate - TODO */
		}
		$dataset = MM_ReportDataset::createCompoundReportDataset($params,$affiliateResults);
		foreach ($subaffiliateResults as $affiliate=>$subresult)
		{
			$subparams = $params + array("affiliate_id"=>$affiliate);
			$dataset->addAdditionalDataset($subparams, $subresult); //TODO: proof this
		}
		return $dataset;
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$AFFILIATE_REPORT_QUERY:
				return self::generateAffiliateReportData($params);
				break;
			case self::$TEST_QUERY:
				return self::testQuery($params);
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

