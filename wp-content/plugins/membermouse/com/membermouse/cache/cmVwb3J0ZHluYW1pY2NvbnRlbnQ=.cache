/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ReportDynamicContent extends MM_ReportVisualElement
{
	
	protected $animate = true;
	protected $contentIsCurrency = false;
	protected $showCurrencyFractionalComponent = true;
	protected $postfixIso = false;
	
	protected $unitSpecifierClass = "";
	
	//model is expected to contain some combination of an id, class, and content	
	
	public static function getJavascriptDependencies()
	{
		return array(MM_PLUGIN_URL."/resources/js/admin/jquery.animateNumber.min.js");
	}
	
	
	public static function createCurrencyDynamicContent($elementIdentifier, $currencyValue,$currencyCode, $unitSpecifier="",$unitSpecifierClass="")
	{
		$dynamicContent = new MM_ReportDynamicContent($elementIdentifier);
		$dynamicContent->contentIsCurrency = true;
		$dynamicContent->model = array();
		$dynamicContent->model['currencyCode']  = $currencyCode;
		$dynamicContent->model['content'] = $currencyValue;
		$dynamicContent->model['unitSpecifier'] = $unitSpecifier;
		$dynamicContent->model['unitSpecifierClass'] = $unitSpecifierClass;
		return $dynamicContent;
	}
	
	
	public static function createNumericDynamicContent($elementIdentifier, $numericValue,$unitSpecifier="",$unitSpecifierClass="")
	{
		$dynamicContent = new MM_ReportDynamicContent($elementIdentifier);
		$dynamicContent->contentIsCurrency = false;
		$dynamicContent->model = array();
		$dynamicContent->model['content'] = $numericValue;
		$dynamicContent->model['unitSpecifier'] = $unitSpecifier;
		$dynamicContent->model['unitSpecifierClass'] = $unitSpecifierClass;
		return $dynamicContent;
	}
	
	
	public static function createFromContent($elementIdentifier, $content)
	{
		$dynamicContent = new MM_ReportDynamicContent($elementIdentifier);
		$dynamicContent->contentIsCurrency = false;
		$dynamicContent->animate = false;
		$dynamicContent->model = array();
		$dynamicContent->model['content'] = $content;
		return $dynamicContent;
	}
	
	
	public function render()
	{
		$output = "";
		$content = $this->model['content'];
		$prefix = isset($this->model['prefix'])?$this->model['prefix']:"";
		$postfix = isset($this->model['postfix'])?$this->model['postfix']:"";
		
		if ($this->animate && is_numeric($content))
		{
			if ($this->contentIsCurrency && isset($this->model['currencyCode']) && MM_CurrencyUtil::isSupportedCurrency($this->model['currencyCode']))
			{
				//we know the number, so we can use MAGIC to split the number out from the rest of the formatting
				$currencyMetadata = MM_CurrencyUtil::getCurrencyMetadata($this->model['currencyCode']);
				$ts = $currencyMetadata['mon_thousands_sep'];
				$dp = $currencyMetadata['mon_decimal_point'];
				$dps = $currencyMetadata['int_frac_digits'];
				$zero = 0.00;
				
				$metaOverride = array("int_frac_digits"=>($this->showCurrencyFractionalComponent == false)?0:$currencyMetadata['int_frac_digits'],'postfix_iso'=>$this->postfixIso);				
				$formattedValue = _mmof($content,$this->model['currencyCode'],$metaOverride);
				
				$components = preg_split("/[0-9{$ts}]+[{$dp}]*[0-9]*/", $formattedValue);
				if (is_array($components) && (count($components) == 2) && ($dp == "."))
				{
					$prefix.= $components[0];
					$postfix = $components[1].$postfix;
					$content = number_format($content,$dps,".","");
				}
				else 
				{
					return $this->renderNonAnimated($content,$prefix,$postfix);
				}
			}
			else 
			{
				$isFloat = is_float(0+$content);
				if (($content == 0) && ((string)$content !== "0.00"))
				{
					$isFloat = false;
				}			
				$ts = ",";
				$dps = $isFloat?2:0;
				$zero = $isFloat?"0.00":"0";
			}
			
			$output .= "{$prefix}<span class='mm-report-animated' data-anim-target='{$content}' data-anim-sep='{$ts}' data-anim-dps='{$dps}'>{$zero}</span>{$postfix}";
			if (!empty($this->model['unitSpecifier']))
			{
				$closeSpan = false;
				if (!empty($this->model['unitSpecifierClass']))
				{
					$output.= "<span class='{$this->model['unitSpecifierClass']}'>";
					$closeSpan = true;
				}
				$output .= " {$this->model['unitSpecifier']}";
				$output .= ($closeSpan)?"</span>":"";
			}
			$output .= "<script type='text/javascript'>mmjs.animate('{$this->container}');</script>";
			return $output;
		}	
		else 
		{
			return $this->renderNonAnimated($content,$prefix,$postfix);
		}	
	}
	
	
	protected function renderNonAnimated($content, $prefix="", $postfix="")
	{
		$output = "{$prefix}{$content}{$postfix}";
		if (!empty($this->model['unitSpecifier']))
		{
			$closeSpan = false;
			if (!empty($this->model['unitSpecifierClass']))
			{
				$output.= "<span class='{$this->model['unitSpecifierClass']}'>";
				$closeSpan = true;
			}
			$output .= " {$this->model['unitSpecifier']}";
			$output .= ($closeSpan)?"</span>":"";
		}
		return $output;
	}


	public function getAnimate()
	{
		return $this->animate;
	}


	public function setAnimate($animate)
	{
		$this->animate = $animate;
	}


	public function getShowCurrencyFractionalComponent()
	{
		return $this->showCurrencyFractionalComponent;
	}


	public function setShowCurrencyFractionalComponent($showCurrencyFractionalComponent)
	{
		$this->showCurrencyFractionalComponent = $showCurrencyFractionalComponent;
	}


	public function getPostfixIso()
	{
		return $this->postfixIso;
	}


	public function setPostfixIso($postfixIso)
	{
		$this->postfixIso = $postfixIso;
	}
	
}

