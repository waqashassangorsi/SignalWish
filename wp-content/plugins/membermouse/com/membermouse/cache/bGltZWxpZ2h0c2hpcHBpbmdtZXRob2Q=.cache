/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_LimeLightShippingMethod extends MM_Entity
{	
	private $mmOptionKey = "";
	private $limeLightShippingMethodId = "";
	private $limeLightShippingMethodName = "";
	
	private $lastLimeLightShippingMethodId = "";
	
	public function getData() 
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." WHERE id='".$this->id."';";
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else {
			parent::invalidate();
		}
	}
	
	public function setData($data)
	{
		try 
		{
			$this->mmOptionKey = $data->membermouse_shipping_option_key;
			$this->limeLightShippingMethodId = $data->limelight_shipping_method_id;
			$this->limeLightShippingMethodName = $data->limelight_shipping_method_name;
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{	
		global $wpdb;
		
		if(!MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_LIMELIGHT))
		{
			return new MM_Response("ERROR: Lime Light is not active for this MemberMouse license", MM_Response::$ERROR);
		}
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		 
		MM_Transaction::begin();
		try
		{	
			// check if campaign/product pair is already set
			if(!$doUpdate || ((!empty($this->lastLimeLightShippingMethodId) && ($this->lastLimeLightShippingMethodId != $this->limeLightShippingMethodId))))
			{
				$sql = "SELECT membermouse_shipping_option_key FROM ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." WHERE limelight_shipping_method_id='".$this->limeLightShippingMethodId."';";
				$result = $wpdb->get_row($sql);
				
				if($result)
				{
					MM_Transaction::rollback();
						
					$split = explode("-", $result->membermouse_shipping_option_key);
					$token = $split[0];
						
					//get the shipping method
					$shippingMethod = MM_ShippingMethod::getShippingMethodByToken($token);
					$optionRetrievalResponse = $shippingMethod->getShippingOptionByKey(new MM_Order(), $result->membermouse_shipping_option_key);
					$shippingOption = $optionRetrievalResponse->message;
						
					$errorMsg = "The Lime Light shipping method '{$this->limeLightShippingMethodName}' ";
					$errorMsg .= "is already associated with MemberMouse shipping method '{$shippingOption->getName()}'";
					return new MM_Response($errorMsg, MM_Response::$ERROR);
				}
			}
			
			if(!$doUpdate) 
			{			
				$sql = "insert into ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." set " .
			 			"	membermouse_shipping_option_key='%s'," .
			 			"	limelight_shipping_method_id='%d'," .
			 			"	limelight_shipping_method_name='%s'" .
			 			"";
			}
			else 
			{	
				$sql = "update ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." set " .
			 			"	membermouse_shipping_option_key='%s'," .
			 			"	limelight_shipping_method_id='%d'," .
			 			"	limelight_shipping_method_name='%s'" .
			 			"	where id='{$this->id}'" .
			 			"";
		 	}
		 	
		 	$preparedSql = $wpdb->prepare($sql, $this->mmOptionKey, $this->limeLightShippingMethodId, $this->limeLightShippingMethodName);
		 	
		 	$result = $wpdb->query($preparedSql);
		 	
			if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("Error creating shipping method mapping.\n\nEach Lime Light shipping method can only be mapped to one MemberMouse shipping method.", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) 
		 	{
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{
		 	MM_Transaction::rollback();
	 		return new MM_Response("Error creating shipping method mapping", MM_Response::$ERROR);
		}
		 
		MM_Transaction::commit();
		
		return new MM_Response();
	}
	
	public function delete()
	{	
		global $wpdb;
		
		$sql = "DELETE FROM ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." WHERE id='%d' LIMIT 1";
		$results = $wpdb->query($wpdb->prepare($sql, $this->id));
		
		if($results) 
		{
			return true;
		}
		
		return false;
	}
	
	
	/** HELPER METHODS **/
	
	public static function findByMMShippingOptionKey($optionKey)
	{
		if (empty($optionKey))
		{
			return new MM_LimeLightShippingMethod();
		}
		
		global $wpdb;
 		
		$sql = "SELECT id FROM ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS." WHERE membermouse_shipping_option_key='%s' LIMIT 1;";
		$llShippingMethodIndex = $wpdb->get_var($wpdb->prepare($sql,$optionKey));
		
		if (!is_null($llShippingMethodIndex))
		{
			return new MM_LimeLightShippingMethod($llShippingMethodIndex);
		}
		return new MM_LimeLightShippingMethod(); //return an invalid entity if the product mapping could not be found
	}
	
	
	public static function getUnmappedShippingMethods($crntOptionKey="")
	{	
		global $wpdb;
		
		$shippingMethods = array();
		$mappedOptionKeys = array();
		$options = MM_ShippingMethod::getAvailableShippingOptions();
		
		// get existing mapped option keys
		$sql = "SELECT membermouse_shipping_option_key FROM ".MM_TABLE_LIMELIGHT_SHIPPING_METHODS;
		$results = $wpdb->get_results($sql);
	
		if($results)
		{
			foreach($results as $result)
			{
				$mappedOptionKeys[] = $result->membermouse_shipping_option_key;
			}
		}
		
		foreach ($options as $shippingOption)
		{
			if(($crntOptionKey == $shippingOption->getKey()) || (!in_array($shippingOption->getKey(), $mappedOptionKeys)))
			{
				$shippingMethods[$shippingOption->getKey()] = "{$shippingOption->getName()} ({$shippingOption->getRate(true)})";
			}
		}
		
		return $shippingMethods;
	}
	
	
	/** GETTERS/SETTERS **/
	
	public function setMMOptionKey($key) 
	{
		$this->mmOptionKey = $key;
	}
	
	public function getMMOptionKey()
	{
		return $this->mmOptionKey;
	}
	
	public function setLimeLightShippingMethodId($id)
	{
		$this->lastLimeLightShippingMethodId = $this->limeLightShippingMethodId;
		$this->limeLightShippingMethodId = $id;
	}
	
	public function getLimeLightShippingMethodId()
	{
		return $this->limeLightShippingMethodId;
	}
	
	public function setLimeLightShippingMethodName($str)
	{
		$this->limeLightShippingMethodName = $str;
	}
	
	public function getLimeLightShippingMethodName()
	{
		return $this->limeLightShippingMethodName;
	}
}
