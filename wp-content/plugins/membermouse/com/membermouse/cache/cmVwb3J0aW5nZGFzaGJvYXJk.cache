/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_ReportingDashboard extends MM_ReportBase 
{
	
	protected $visualElements = array("MM_ReportLineChart","MM_ReportDynamicContent");
	
	//visual element identifiers
	public static $TOTAL_MEMBERS_VALUE 			 	=   "reporting_dashboard_total_members";
	public static $TOTAL_RENTENTION_DURATION_VALUE  =   "reporting_dashboard_total_retention_duration_value";
	public static $TOTAL_CUSTOMER_VALUE 		 	=   "reporting_dashboard_total_customer_value";
	public static $TOTAL_ENGAGEMENT_VALUE 		 	=   "reporting_dashboard_total_engagement_value";
	
	public static $NEW_MEMBERS_LINECHART 		 	=   "reporting_dashboard_new_members_linechart";
	public static $RANGE_ADJUSTED_CHURN  		 	=   "reporting_dashboard_range_adjusted_churn";
	public static $AVG_DAILY_REVENUE     		 	=   "reporting_dashboard_avg_daily_revenue";
	public static $AVG_MONTHLY_REVENUE   		 	=   "reporting_dashboard_avg_monthly_revenue";
	public static $TOTAL_REVENUE         		 	=   "reporting_dashboard_total_revenue";
	public static $RANGE_ADJUSTED_RETENTION_RATE 	=   "reporting_dashboard_range_adjusted_retention_rate";
	
	public static $DASHBOARD_REVENUE_LINECHART   	=   "reporting_dashboard_revenue_linechart";
	
	//query identifiers
	public static $DASHBOARD_REVENUE_QUERY = "reporting_dashboard_revenue_query";
	public static $DASHBOARD_RETENTION_DURATION_QUERY = "reporting_dashboard_retention_duration_query";
	public static $DASHBOARD_TOTAL_CUSTOMER_VALUE_QUERY = "reporting_dashboard_total_customer_value_query";
	public static $DASHBOARD_CHURN_RETENTION_RATE_QUERY = "reporting_dashboard_churn_retention_rate_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$TOTAL_MEMBERS_VALUE:
				return $this->getTotalMembers();
				break;
			case self::$TOTAL_RENTENTION_DURATION_VALUE:
				return $this->getTotalRetentionDuration();
				break;
			case self::$TOTAL_CUSTOMER_VALUE:
				return $this->getTotalCustomerValue();
				break;
			case self::$TOTAL_ENGAGEMENT_VALUE:
				return $this->getTotalEngagement();
				break;
			case self::$NEW_MEMBERS_LINECHART:
				$nmr = new MM_NewMembersComparisonReport(false);
				$params['type'] = isset($params['graph_interval'])?$params['graph_interval']:"weekly";
				return $nmr->renderNewMembersComparisonLineChart(self::$NEW_MEMBERS_LINECHART,$params,$width,$height,$directives);
			case self::$DASHBOARD_REVENUE_LINECHART:
				return $this->renderRevenueLinechart(self::$DASHBOARD_REVENUE_LINECHART, $params, $width, $height, $directives);
				break;
			case self::$AVG_DAILY_REVENUE:
				return $this->getRevenueByUnit(self::$AVG_DAILY_REVENUE,$params,$width,$height,$directives);
				break;
			case self::$AVG_MONTHLY_REVENUE:
				return $this->getRevenueByUnit(self::$AVG_MONTHLY_REVENUE,$params,$width,$height,$directives,"MONTH");
				break;
			case self::$TOTAL_REVENUE:
				return $this->getRevenueByUnit(self::$TOTAL_REVENUE,$params,$width,$height,$directives,"ALLTIME");
				break;
			case self::$RANGE_ADJUSTED_CHURN:
				return $this->getChurn(self::$RANGE_ADJUSTED_CHURN, $params, $width, $height, $directives);
				break;
			case self::$RANGE_ADJUSTED_RETENTION_RATE:
				return $this->getRetentionRate(self::$RANGE_ADJUSTED_RETENTION_RATE,$params,$width,$height,$directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function getTotalMembers()
	{
		global $wpdb;
		
		$memberCountStatuses = array(MM_Status::$ACTIVE, MM_Status::$OVERDUE, MM_Status::$PENDING_CANCELLATION);
		$statuses = implode(",",$memberCountStatuses);
		$sql = "SELECT COUNT(*) AS total_members FROM ".MM_TABLE_USER_DATA." mud where mud.status IN ({$statuses})";
		$totalMembers = $wpdb->get_var($sql);
		$dynamicContent = MM_ReportDynamicContent::createNumericDynamicContent(self::$TOTAL_MEMBERS_VALUE, $totalMembers);
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function getTotalRetentionDuration()
	{	
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$DASHBOARD_RETENTION_DURATION_QUERY, array(),"",false);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$rawNumbers = $dataResponse->message;
		
		$value = 0;
		$subunit = "Hours";
		if (!is_null($rawNumbers) && ($rawNumbers->num_members > 0))
		{
			$averageRetentionHours = round(intval($rawNumbers->retention_hours)/intval($rawNumbers->num_members),2);
			if ($averageRetentionHours >= 24)
			{
				//TODO: evaluate if the following can bust MAXINT
				$averageRetentionDays = intval(floor($averageRetentionHours/24));
				$value = $averageRetentionDays;
				$subunit = "days";
			}
			else 
			{
				$value=$averageRetentionHours; 
				$subunit = "hours";
			}
		}
		$dynamicContent = MM_ReportDynamicContent::createNumericDynamicContent(self::$TOTAL_RENTENTION_DURATION_VALUE, $value,$subunit,"sub-value");		
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function getTotalCustomerValue()
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$DASHBOARD_TOTAL_CUSTOMER_VALUE_QUERY, array(),"",false);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$customerValue = $dataResponse->message;
		$dynamicContent = MM_ReportDynamicContent::createCurrencyDynamicContent(self::$TOTAL_CUSTOMER_VALUE,$customerValue, _mmfc());
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function getTotalEngagement()
	{
		global $wpdb;
		
		$excludedUserStatuses = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR));
		$sql = "SELECT X.page_count, X.timespan, Y.user_count, (X.page_count/X.timespan/Y.user_count) AS total_engagement FROM ".
			   "(SELECT TIMESTAMPDIFF(DAY,MIN(date_added),MAX(date_added)) AS timespan,  COUNT(*) AS page_count ".
			   "FROM ".MM_TABLE_EVENT_LOG." WHERE event_type='".MM_ActivityLog::$EVENT_TYPE_PAGE_ACCESS."') AS X,  ".
			   "(SELECT COUNT(1) AS user_count FROM ".MM_TABLE_USER_DATA." WHERE status NOT IN ({$excludedUserStatuses})) AS Y";
		$totalEngagmentResults = $wpdb->get_row($sql);
		$totalEngagment = is_null($totalEngagmentResults)?0:$totalEngagmentResults->total_engagement;
		$totalEngagment = round($totalEngagment,2);
		$dynamicContent = MM_ReportDynamicContent::createNumericDynamicContent(self::$TOTAL_ENGAGEMENT_VALUE, $totalEngagment,"pages/day","sub-value");
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function renderRevenueLinechart($elementIdentifier, $params, $width, $height, $directives)
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$DASHBOARD_REVENUE_QUERY, $params,"",false);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$model = MM_ReportCategoryValueModel::createFromData($dataResponse->message, "date", "amount");
		
		//now create the line chart
		$line = new MM_ReportLineChart($elementIdentifier);
		$line->setCategoriesAreDates(true);
		$line->setDateFormat("MM-DD-YYYY");
		$line->addModel($model);
		
		//set the graph resolution based on what the user chose
		$resolution = MM_ReportLineChart::$DAYS;
		if (isset($params['graph_interval']))
		{
			switch ($params['graph_interval'])
			{
				case 'weekly':
					$resolution = MM_ReportLineChart::$WEEKS;
					break;
				case 'monthly':
					$resolution = MM_ReportLineChart::$MONTHS;
					break;
				default:
					break;
			}
		}
		$line->setResolution($resolution);
		$line->setCurrencyValues(true);
		$line->setCurrencyType(MM_CurrencyUtil::getActiveCurrency());
		$line->setValueAxisTitle(ucfirst($params['graph_interval'])." revenue in ".MM_CurrencyUtil::getActiveCurrency());
		return new MM_ReportResponse($line->render());
	}
	
	
	public static function generateChurnAndRetentionData($params)
	{
		global $wpdb;
	
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Dashboard churn data: Improper parameter format",MM_Response::$ERROR);
		}
		
		if (empty($params['start_date']) || empty($params['end_date']))
		{
			return new MM_Response("Could not generate Dashboard churn data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$startDate = date("Y-m-d 00:00",strtotime($params['start_date']));
		$endDate   = date("Y-m-d 23:59:59",strtotime($params['end_date']));
		$startTime = strtotime($startDate);
		$endTime   = strtotime($endDate);
		
		//predictive churn is calculated using the formula 30 * ( summation of the number of churns each day in the period/summation of customers at the start of each day in the period)
		//first, get the number of customers on the first day. This should be the number of users registered before the start date who are either not cancelled or cancelled after that day
		$wasOnceActiveString = implode(",",array(MM_Status::$CANCELED,MM_Status::$PAUSED,MM_Status::$EXPIRED));
		$neverActivateString = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR));
		$activeishString = implode(",",array(MM_Status::$ACTIVE, MM_Status::$PENDING_CANCELLATION,MM_Status::$OVERDUE,MM_Status::$LOCKED));
		$cancelishString = implode(",",array(MM_Status::$CANCELED,MM_Status::$PAUSED)); //TODO: add expired?
		
		$userDataTable = MM_TABLE_USER_DATA;
		$sql = "SELECT COUNT(*) AS startCustomers FROM {$wpdb->users} u INNER JOIN {$userDataTable} mud ON (u.ID = mud.wp_user_id) WHERE ".
			   "u.user_registered < '{$startDate}' AND (mud.status IN ({$activeishString})) OR ((mud.status IN ({$wasOnceActiveString})) AND (mud.status_updated > '{$startDate}'))";
		$startCustomers = $wpdb->get_var($sql);
		
		if (is_null($startCustomers))
		{
			return new MM_ReportResponse("Error generating churn data",MM_ReportResponse::$ERROR);
		}
		
		//second, set up a tracking structure and the get the list of customers who either signed up or became not active within the date range
		$matrix = array();
		for ($i=$startTime; $i<=$endTime; $i+=86400) //daily values
		{
			$currentDate = date("Y-m-d",$i);
			$matrix[$currentDate] = array("startCustomers"=>0,"signups"=>0,"cancels"=>0);
		}
		
		//now pull the signups and cancels, and place them into the structure
		$sql = "SELECT 'signups' AS event_type, DATE(user_registered) AS event_date FROM {$wpdb->users} u1 INNER JOIN {$userDataTable} mu1 ON ".
			   "(u1.ID = mu1.wp_user_id) WHERE (mu1.status NOT IN ({$neverActivateString})) AND u1.user_registered BETWEEN '{$startDate}' AND '{$endDate}' ".
			   "UNION ALL SELECT 'cancels' AS event_type, DATE(mu2.status_updated) AS event_date FROM {$userDataTable} mu2 WHERE mu2.status IN ({$cancelishString}) ".
			   "AND mu2.status_updated BETWEEN '{$startDate}' AND '{$endDate}'";
		
		$res = _mmmq($sql, true);
		
		if ($res)
		{
  		//ini_set('memory_limit','12M');
  		$fetch_object_function = _mmmd()."_fetch_object";
  		$free_result_function = _mmmd()."_free_result";
  		$error_function = _mmmd()."_error";
  		
			while ($row = @$fetch_object_function($res))
			{
				$matrix[$row->event_date][$row->event_type] += 1;					
				//error_log(number_format(memory_get_usage(true)/1000000, 2)." MB");
			}
			
			if ($error_message = $error_function($wpdb->dbh))
			{
  		  return new MM_ReportResponse("Error generating churn data ({$error_message})",MM_ReportResponse::$ERROR);	
			}
			
			@$free_result_function($res);
		}
		else 
		{
			return new MM_ReportResponse("Error generating churn data",MM_ReportResponse::$ERROR);
		}
		
		//now update the structure with the calculated # of members at the start of each day
		$customerCount = $startCustomers;
		foreach ($matrix as &$dateInfo)
		{
			$dateInfo['startCustomers'] = $customerCount;
			$customerCount+= $dateInfo['signups'];
			$customerCount-= $dateInfo['cancels'];
		}
		//matrix is now updated with the current counts, make one more pass to calculate the churn rate
		$sumDailyChurn = 0;
		$sumDailyStartCustomers = 0;
		foreach ($matrix as &$dateInfo)
		{
			$sumDailyChurn += $dateInfo['cancels'];
			$sumDailyStartCustomers += $dateInfo['startCustomers'];
		}
		
		$churn = ($sumDailyStartCustomers == 0)?0:(intval((30 * ($sumDailyChurn/$sumDailyStartCustomers)) * 100));
		$retentionRate = 100 - $churn;
		$dataset = MM_ReportDataset::createSingleReportDataset($params,array("churn"=>$churn, "retention_rate"=>$retentionRate));
		return $dataset;		
	}
	
	
	public static function generateRevenueData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Dashboard revenue data: Improper parameter format",MM_Response::$ERROR);
		}
		
		if (empty($params['start_date']) || empty($params['end_date']) || empty($params['graph_interval']))
		{
			return new MM_Response("Could not generate Dashboard revenue data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$paymentStatuses = implode(",",array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT));
		$startTime = is_int($params['start_date'])?$params['start_date']:strtotime($params['start_date']);
		$endTime = is_int($params['end_date'])?$params['end_date']:strtotime($params['end_date']);
		
		$startDate = date("Y-m-d H:i:s",$startTime); //mysql format
		$endDate =   date("Y-m-d H:i:s",$endTime);
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$ordersTable = MM_TABLE_ORDERS;
		
		$sql = "SELECT t.amount, t.transaction_date FROM {$transactionsTable} t INNER JOIN {$ordersTable} o on (t.order_id = o.id) WHERE ".
			   "t.transaction_type IN ({$paymentStatuses}) AND t.transaction_date BETWEEN '{$startDate}' AND '{$endDate}'";
		
		$result = _mmmq($sql, true);
		
		if ($result) 
		{
	  		$fetch_assoc_function = _mmmd()."_fetch_assoc";
	  		$fetch_num_rows = _mmmd()."_num_rows";
	  		$free_result_function = _mmmd()."_free_result";
	  		$error_function = _mmmd()."_error";
  		
			if ($row = @$fetch_assoc_function($result))
			{	
				//create the three result sets: daily, weekly, monthly.. and initialize
				$dailyResultset = array();
				$weeklyResultset = array();
				$monthlyResultset = array();
				
				//initialize daily
				$counterStartTime = strtotime(date("Y-m-d 00:00:00",$startTime));
				$counterEndTime = strtotime(date("Y-m-d 23:59:59",$endTime));
				
				$startDayOfWeek = date("w",$counterStartTime);
				$sundayOfStartWeekOffset = $counterStartTime - strtotime("-{$startDayOfWeek} days",$counterStartTime);
				$firstSunday = date("m-d-Y",$counterStartTime - $sundayOfStartWeekOffset);
				$weeklyCounter = $startDayOfWeek;
				$weeklyResultset[$firstSunday] = 0;
				
				for ($i=$counterStartTime; $i<= $counterEndTime; $i+=86400) //86400 secs in a day
				{
					$currentDate = date("m-d-Y",$i);
					$dailyResultset[$currentDate] = 0;
					
					//initialize weekly (store only the sunday starting the week.. weeks go from Sun - Sat)
					if ((($weeklyCounter++)%7) == 0) //604800 secs in a week
					{
						$sundayDate = date("m-d-Y",$i);
						$weeklyResultset[$sundayDate] = 0;
						$weeklyCounter = 1;
					}
				}
				
				//initialize monthly
				$startMonthTime = strtotime(date("Y-m-01 00:00",$counterStartTime));
				for ($i=$startMonthTime; $i<= $endTime; $i=strtotime("+1 month",$i)) //have to use strtotime for monthly because its not a real measurement
				{
					$firstDayOfMonthDate = date("m-01-Y",$i);
					$monthlyResultset[$firstDayOfMonthDate] = 0;
				}
				
				do
				{
  				$transactionTimestamp = strtotime($row['transaction_date']);
					$transactionDate = date("m-d-Y",$transactionTimestamp);
					$transactionAmount = -($row['amount']);
					
					//add daily
					$dailyResultset[$transactionDate] += $transactionAmount; 
					
					//add weekly
					$weekOffset = date("w",$transactionTimestamp);
					$transactionWeekStartDate = date("m-d-Y",$transactionTimestamp - ($weekOffset * 86400));
					$weeklyResultset[$transactionWeekStartDate] += $transactionAmount;
					
					//add monthly
					$monthlyResultset[date("m-01-Y",$transactionTimestamp)] += $transactionAmount;
				}
				while ($row = @$fetch_assoc_function($result));
				
				if ($error_message = $error_function($wpdb->dbh))
  				{
    		  		return new MM_ReportResponse("Error generating churn data ({$error_message})",MM_ReportResponse::$ERROR);	
  				}
				
				@$free_result_function($result);
				
				//transform into final resultsets
				$finalDailyResultset = array();
				foreach ($dailyResultset as $k=>$v)
				{
					$finalDailyResultset[] = array('date'=>$k, 'amount'=>$v);
				}
				unset ($dailyResultset);
				
				$finalWeeklyResultset = array();
				foreach ($weeklyResultset as $k=>$v)
				{
					$finalWeeklyResultset[] = array('date'=>$k, 'amount'=>$v);
				}
				unset($weeklyResultset);
				
				$finalMonthlyResultset = array();
				foreach ($monthlyResultset as $k=>$v)
				{
					$finalMonthlyResultset[] = array('date'=>$k, 'amount'=>$v);
				}
				unset($monthlyResultset);
				
				//return the created resultsets
				$dsArray = array("daily"   =>  $finalDailyResultset,
								 "weekly"  =>  $finalWeeklyResultset,
								 "monthly" =>  $finalMonthlyResultset);
				$dataset = MM_ReportDataset::createCompoundReportDataset($params,$dsArray[$params['graph_interval']]);
				unset($dsArray[$params['graph_interval']]);
				foreach ($dsArray as $dsType=>$dsResultset)
				{
					$changedParams = array("graph_interval"=>$dsType) + $params;
					$dataset->addAdditionalDataset($changedParams, $dsResultset);
				}
				unset($dsArray);
				return $dataset;
			}
			else //no results returned
			{
				@$free_result_function($result);
				return new MM_ReportDataset("No Data",MM_ReportDataset::$NO_DATA);
			}
			
		}
		else 
		{
			//error running query, return error status
			return new MM_ReportDataset("error executing query",MM_ReportDataset::$ERROR);
		}
		
	}
	
	
	public function getChurn($elementIdentifier, $params, $width, $height, $directives)
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$DASHBOARD_CHURN_RETENTION_RATE_QUERY, $params,"",false);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		if (!is_array($dataResponse->message) || !isset($dataResponse->message['churn']))
		{
			return new MM_ReportResponse("Error calculating retention rate",MM_ReportResponse::$ERROR);
		}
		$churn = $dataResponse->message['churn'];
		$dynamicContent = MM_ReportDynamicContent::createNumericDynamicContent(self::$RANGE_ADJUSTED_CHURN, $churn,"%");
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function getRetentionRate($elementIdentifier, $params, $width, $height, $directives)
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$DASHBOARD_CHURN_RETENTION_RATE_QUERY, $params,"",false);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		if (!is_array($dataResponse->message) || !isset($dataResponse->message['retention_rate']))
		{
			return new MM_ReportResponse("Error calculating retention rate",MM_ReportResponse::$ERROR);
		}
		
		$retentionRate = $dataResponse->message['retention_rate'];
		$dynamicContent = MM_ReportDynamicContent::createNumericDynamicContent(self::$RANGE_ADJUSTED_RETENTION_RATE, $retentionRate,"%");
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public function getRevenueByUnit($elementIdentifier, $params, $width, $height, $directives,$unit="DAY")
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Dashboard revenue data: Improper parameter format",MM_Response::$ERROR);
		}
		
		if (empty($params['start_date']) || empty($params['end_date']))
		{
			return new MM_Response("Could not generate average daily revenue content: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$startDate = date("Y-m-d H:i:s",strtotime($params['start_date'])); //mysql format
		$endDate =   date("Y-m-d H:i:s",strtotime($params['end_date']));
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$paymentTransactionTypes = implode(",",array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT));
		
		if ($unit != "ALLTIME")
		{
			$sql = "select X.total_revenue/Y.total_time_units AS revenue FROM (SELECT ABS(SUM(amount)) AS total_revenue FROM {$transactionsTable} WHERE ".
				   "transaction_type IN ({$paymentTransactionTypes}) AND transaction_date BETWEEN '{$startDate}' AND '{$endDate}') AS X, ".
				   "(SELECT TIMESTAMPDIFF({$unit},'{$startDate}','{$endDate}') AS total_time_units) AS Y";
		}
		else 
		{
			$sql = "SELECT ABS(SUM(amount)) AS revenue FROM {$transactionsTable} WHERE ".
				   "transaction_type IN ({$paymentTransactionTypes}) AND transaction_date BETWEEN '{$startDate}' AND '{$endDate}'";
		}
		$revenue = $wpdb->get_var($sql);
		
		$metaOverride = array('int_frac_digits'=>0,'postfix_iso'=>false);
		$revenue = _mmof($revenue,MM_CurrencyUtil::getActiveCurrency(),$metaOverride); 
		$dynamicContent = MM_ReportDynamicContent::createFromContent($elementIdentifier,$revenue);
		return new MM_ReportResponse($dynamicContent->render());
	}
	
	
	public static function generateRetentionDurationData($params)
	{
		global $wpdb;
		
		$currentTime = MM_Utils::getCurrentTime();
		$sql = "SELECT COUNT(*) AS num_members, SUM(TIMESTAMPDIFF(HOUR,mud.became_active,IF(mud.status=2,mud.status_updated,'{$currentTime}'))) AS retention_hours FROM ".MM_TABLE_USER_DATA." mud ".
				"INNER JOIN (SELECT DISTINCT o.user_id FROM ".MM_TABLE_ORDERS." o INNER JOIN ".MM_TABLE_ORDER_ITEMS." oi ON (o.id = oi.order_id) WHERE oi.is_recurring=1) AS Q ON ".
				"(mud.wp_user_id = Q.user_id)";
		$rawNumbers = $wpdb->get_row($sql);
		
		if (is_null($rawNumbers))
		{
			return new MM_ReportDataset("error executing query",MM_ReportDataset::$ERROR);
		}
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$rawNumbers);
		return $dataset;
	}
	
	
	public static function generateTotalCustomerValueData($params)
	{
		global $wpdb;
		
		//get frac digits based on the active currency
		$currencyMetadata = MM_CurrencyUtil::getActiveCurrencyMetadata();
		$fracDigits = isset($currencyMetadata['int_frac_digits'])?intval($currencyMetadata['int_frac_digits']):2;
		
		$excludedUserStatuses = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR));
		$paymentTransactionTypes = implode(",",array(MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT));
		
		$sql = "SELECT IF (Y.member_count>0,(X.total_revenue/Y.member_count),0) AS customer_value FROM ".
				"(SELECT IFNULL(ABS(SUM(t.amount)),0) AS total_revenue FROM ".MM_TABLE_TRANSACTION_LOG." t WHERE ".
				"t.transaction_type IN ({$paymentTransactionTypes})) AS X, ".
				"(SELECT COUNT(*) AS member_count FROM ".MM_TABLE_USER_DATA." WHERE status NOT IN ".
				"({$excludedUserStatuses})) AS Y";
		$customerValue = $wpdb->get_var($sql);

		if (is_null($customerValue))
		{
			return new MM_ReportDataset("error executing query",MM_ReportDataset::$ERROR);
		}
		$customerValue = is_null($customerValue)?0.00:round($customerValue,$fracDigits); 
		$dataset = MM_ReportDataset::createSingleReportDataset($params,$customerValue);
		return $dataset;
	}
	
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$DASHBOARD_REVENUE_QUERY:
				return self::generateRevenueData($params);
				break;
			case self::$DASHBOARD_RETENTION_DURATION_QUERY:
				return self::generateRetentionDurationData($params);
				break;
			case self::$DASHBOARD_TOTAL_CUSTOMER_VALUE_QUERY:
				return self::generateTotalCustomerValueData($params); 
				break;
			case self::$DASHBOARD_CHURN_RETENTION_RATE_QUERY:
				return self::generateChurnAndRetentionData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

