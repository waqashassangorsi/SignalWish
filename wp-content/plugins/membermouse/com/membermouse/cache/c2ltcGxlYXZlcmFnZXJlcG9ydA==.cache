/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_SimpleAverageReport extends MM_AdvancedReportBase 
{
	
	protected $visualElements = array("MM_ReportDataGrid","MM_ReportBarChart");
	
	public static $SIMPLE_AVERAGE_DATAGRID = "simple_average_datagrid";
	public static $SIMPLE_AVERAGE_COLUMN_CHART = "simple_average_column_chart";
	
	//query identifiers
	public static $SIMPLE_AVERAGE_QUERY = "simple_average_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$SIMPLE_AVERAGE_DATAGRID:
				return $this->renderSimpleAverageDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			case self::$SIMPLE_AVERAGE_COLUMN_CHART:
				return $this->renderSimpleAverageColumnChart($elementIdentifier,$params,$width,$height,$directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderSimpleAverageDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SIMPLE_AVERAGE_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$rowIndex = "Affiliate";
		
		if (isset($params['type']))
		{
			switch ($params['type'])
			{
				case 'affiliate':
					$rowIndex = "Affiliate";
					break;
				case 'subaffiliate':
					$rowIndex = "Subaffiliate";
					break;
				case 'product':
					$rowIndex = "Product";
					break;
				default:
					$rowIndex = "Affiliate";
					break;
			}
		}
		
		$gridHeaders = array("x"=>array('label'=>$rowIndex), 
							 "customers"   =>array('label'=>"# Customers"),
							 "total_sales" =>array('label'=>"Total Sales","columnType"=>'money'),
							 "simple_average"=>array('label'=>"Simple Average","columnType"=>'money'));
		$grid = MM_ReportDatagrid::createFromData(MM_SimpleAverageReport::$SIMPLE_AVERAGE_DATAGRID, $gridHeaders, $dataResponse,$directives);
		//$grid->setGridTitle("Quick Average");
		$grid->setShowHeaderRow(false);
		return new MM_ReportResponse($grid->render());
	}
	
	
	public function renderSimpleAverageColumnChart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$SIMPLE_AVERAGE_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		$column = MM_ReportColumnChart::createFromTopResults($elementIdentifier, "x", "simple_average", 10, $dataResponse);
		$column->setCurrencyValues(true);
		$column->setValueAxisTitle("Average in ".MM_CurrencyUtil::getActiveCurrency());
		$column->setCategoryAxisTitle("Top performing affiliates");
		//TODO: handle no data
		return new MM_ReportResponse($column->render());		
	}
	
	
	/**
	 * Generate the data for the Quick Average report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateSimpleAverageData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Quick Average Report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Quick Average Report data: Start, End date, and Type must be supplied",MM_Response::$ERROR);
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$productsTable = MM_TABLE_PRODUCTS;
		$orderItemsTable = MM_TABLE_ORDER_ITEMS;
		$ordersTable = MM_TABLE_ORDERS;
		
		$startTime = strtotime($params['start_date']);
		$endTime = strtotime($params['end_date']);
		
		$startDate = date("Y-m-d H:i:s",$startTime); //mysql format
		$endDate =   date("Y-m-d H:i:s",$endTime);
		
		$type = $params['type'];
		
		if (!in_array($type,array("affiliate","subaffiliate","product")))
		{
			return new MM_Response("Invalid report type",MM_Response::$ERROR);
		}
		
		$selectField = ($type == "affiliate")?"o.affiliate_id":(($type=="subaffiliate")?"o.sub_affiliate_id":"concat(p.name,' (',oi.item_id,')')");
		$groupBy = ($type == "affiliate")?"o.affiliate_id":(($type=="subaffiliate")?"o.sub_affiliate_id":"oi.item_id");
		$sql = "SELECT x, total_sales, customers, total_sales/customers as simple_average FROM ".
			   "(SELECT IF({$selectField}='','[unspecified]',{$selectField}) as x, sum(abs(t.amount)) as total_sales, COUNT(DISTINCT o.user_id) AS customers ".
			   "FROM {$transactionsTable} t FORCE INDEX (transaction_type_idx) ".
			   "LEFT JOIN {$orderItemsTable} oi on (t.order_item_id = oi.id) ".
			   "LEFT JOIN {$ordersTable} o on (oi.order_id = o.id) ".
			   "LEFT JOIN {$productsTable} p on (p.id = oi.item_id) ".
			   "WHERE transaction_type IN (2,4) ".
			   "AND t.transaction_date BETWEEN %s AND %s ".
			   "GROUP BY {$groupBy}) AS Q ORDER BY customers DESC";
		$results = $wpdb->get_results($wpdb->prepare($sql,$startDate,$endDate),ARRAY_A);
		return MM_ReportDataset::createSingleReportDataset($params,$results);
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$SIMPLE_AVERAGE_QUERY:
				return self::generateSimpleAverageData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
}
