class MM_AffiliateTagProcessor
{	
	public static $TAG_AFFILIATE_DATA = "mm_affiliate_data";
	
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is related to affiliates.
	 * 
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to affiliates.
	 */
	public static function isAffiliateSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_AFFILIATE_DATA:
				return true;
				
			default:
				return false;
		}
	}
	
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		switch($smartTag) 
		{
			case self::$TAG_AFFILIATE_DATA:
				return self::mm_affiliate_data($content, $atts, $code);
				
			default:
				return "Invalid Affiliate SmartTag {$smartTag} found";
		}
	}
	
	
	/**
	 * This function processes the MM_Affiliate_Data tag. It is responsible for 
	 * returning data associated with the affiliate in the context.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_affiliate_data($content, $atts, $code)
	{
		if(is_array($atts) && count($atts)>0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key=$v;
			}
		}
		
		$affiliate = null;
		
		// get affiliate from context
		$affiliate = MM_SmartTagUtil::getCurrentAffiliateVO();
		
		if(!$affiliate->isValid())
		{
			return "Invalid SmartTag Context: Affiliate SmartTags can only be used in the context of an affiliate account welcome email";
		}
		
		// ensure that the name attribute is set		
		if(isset($name))
		{	
			switch(strtolower($name))
			{	
					
				case "username":
					return $affiliate->getUsername();
					break;
					
				case "password":
					return $affiliate->getPassword();
					break;
					
				case "url":
					return $affiliate->getUrl();
					break;
					
				default:
					return "Invalid SmartTag Configuration: Invalid name attribute '{$name}' passed to SmartTag {$code}";
			}
		}
		else
		{
			return "Invalid SmartTag Configuration: 'name' attribute is required for SmartTag {$code}";
		}
	}
}
