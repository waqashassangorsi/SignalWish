/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_VersionRelease extends MM_Entity
{
	private $version = "";

	public function getData()
	{
		parent::invalidate();
	}

	public function setData($data)
	{
		try 
		{
			$this->version = $data->version;
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}

	public function commitData()
	{
		global $wpdb;

		$versionReleaseData = array(
				"version"		 => $this->version,
				"date_modified"	 => MM_Utils::getCurrentTime()
		);
		
		if(intval($this->id) > 0)
		{
			$whereClause = array("id"=>$this->id);
			$wpdb->update(MM_TABLE_VERSION_RELEASES,$versionReleaseData,$whereClause);
			return $this->id;
		}
		else
		{
			$wpdb->insert(MM_TABLE_VERSION_RELEASES,$versionReleaseData);
			$this->id = $wpdb->insert_id;
			return $this->id;
		}

		return false;
	}

	
	/** GETTERS/SETTERS **/
	
	public function getVersion()
	{
		return $this->version;
	}

	public function setVersion($val)
	{
		$this->version = $val;
	}
	
	
	/** UTILITIES **/
	
	public static function findByVersion($version)
	{
		global $wpdb;
		
		$versionRelease = new MM_VersionRelease();
		
		$sql = $wpdb->prepare("SELECT * FROM ".MM_TABLE_VERSION_RELEASES." WHERE version=%s limit 1",$version);
		$result = $wpdb->get_row($sql);
	
		if($result)
		{
			$versionRelease->setId($result->id);
			$versionRelease->setData($result);
		}
	
		return $versionRelease;
	}
}
