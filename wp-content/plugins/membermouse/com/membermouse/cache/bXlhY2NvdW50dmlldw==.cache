/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MyAccountView extends MM_LoggedInUserView
{
	public static $MM_JSACTION_UPDATE_ACCOUNT_DETAILS = "updateAccountDetails";
	public static $MM_JSACTION_UPDATE_BILLING_INFO = "updateBillingInfo";
	public static $MM_JSACTION_UPDATE_SHIPPING_INFO = "updateShippingInfo";
	public static $MM_JSACTION_CANCEL_SUBSCRIPTION = "cancelSubscription";
	public static $MM_JSACTION_UPDATE_SUBSCRIPTION_BILLING = "updateSubscriptionBilling";
	public static $MM_JSACTION_UNLINK_SOCIAL_NETWORK = "unlinkSocialNetwork";


	public function __construct()
	{
		parent::__construct();
	}
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);

		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_UPDATE_ACCOUNT_DETAILS:
					return $this->updateAccountDetails($post);
					
				case self::$MM_JSACTION_UPDATE_BILLING_INFO:
					return $this->updateBillingInfo($post);
					
				case self::$MM_JSACTION_UPDATE_SHIPPING_INFO:
					return $this->updateShippingInfo($post);
					
				case self::$MM_JSACTION_CANCEL_SUBSCRIPTION:
					return $this->cancelSubscription($post);
					
				case self::$MM_JSACTION_UPDATE_SUBSCRIPTION_BILLING:
					$view = new MM_MemberDetailsView();
					return $view->updateSubscriptionBillingInfo($post);
					
				case self::$MM_JSACTION_UNLINK_SOCIAL_NETWORK:
					return $this->unlinkSocialNetwork($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	protected function updateAccountDetails($post)
	{
		$thisUserId = MM_User::getCurrentWPUserID();
		
		if(intval($thisUserId)!==false)
		{
			$user = new MM_User($thisUserId);
				
			if($user->isValid())
			{
				$enableUsernameChange = (MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ENABLE_USERNAME_CHANGE) == "1") ? true : false;
				
				$user->setFirstName($post["mm_first_name"]);
				$user->setLastName($post["mm_last_name"]);
				$user->setEmail($post["mm_email"]);
				
				if($enableUsernameChange)
				{
					$user->setUsername($post["mm_username"]);
				}
				
				$user->setPhone($post["mm_phone"]);
	
				if(isset($post["mm_new_password"]) && $post["mm_new_password"] != "")
				{
					$user->setPassword($post["mm_new_password"]);
				}
				
				foreach($post as $k=>$v)
				{
					if(preg_match("/(mm_custom_)/", $k))
					{
						// bypass radio button and checkbox helper fields
						if(strpos($k, 'helper') === false)
						{
							$fieldId = preg_replace("/[^0-9]+/", "", $k);
							$response = $user->setCustomData($fieldId, $v);
					
							if(MM_Response::isError($response))
							{
								return $response;
							}
						}
					}
				}
				
				$result = $user->commitData();
	
				if(MM_Response::isSuccess($result))
				{
					return new MM_Response("Your account was updated successfully");
				}
				else
				{
					return $result;
				}
			}
			else
			{
				return new MM_Response("Error updating your account. Invalid user ID '".$post["userId"]."'", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error your account. User ID is required.", MM_Response::$ERROR);
		}
	}
	
	protected function updateBillingInfo($post)
	{
		if(isset($post["userId"]))
		{
			$user = new MM_User($post["userId"]);
		
			if($user->isValid())
			{
				$user->setBillingAddress($post["mm_field_billing_address"]);
				$user->setBillingCity($post["mm_field_billing_city"]);
				$user->setBillingState($post["mm_field_billing_state"]);
				$user->setBillingZipCode($post["mm_field_billing_zip"]);
				$user->setBillingCountry($post["mm_field_billing_country"]);
				
				$result = $user->commitData();
	
				if(MM_Response::isSuccess($result))
				{			
					return new MM_Response("Your account was updated successfully");
				}
				else
				{
					return $result;
				}
			}
			else
			{
				return new MM_Response("Error updating your account. Invalid user ID '".$post["userId"]."'", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error your account. User ID is required.", MM_Response::$ERROR);
		}
	}
	
	protected function updateShippingInfo($post)
	{
		if(isset($post["userId"]))
		{
			$user = new MM_User($post["userId"]);

			if($user->isValid())
			{
				$user->setShippingAddress($post["mm_field_shipping_address"]);
				$user->setShippingCity($post["mm_field_shipping_city"]);
				$user->setShippingState($post["mm_field_shipping_state"]);
				$user->setShippingZipCode($post["mm_field_shipping_zip"]);
				$user->setShippingCountry($post["mm_field_shipping_country"]);
				
				$result = $user->commitData();

				if(MM_Response::isSuccess($result))
				{
					return new MM_Response("Your account was updated successfully");
				}
				else
				{
					return $result;
				}
			}
			else
			{
				return new MM_Response("Error updating your account. Invalid user ID '".$post["userId"]."'", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error updating your account. User ID is required.", MM_Response::$ERROR);
		}
	}
	
	protected function cancelSubscription($post) 
	{
		if(isset($post["mm_order_item_id"]))
		{
			$orderItem = new MM_OrderItem($post["mm_order_item_id"]);
			
			if($orderItem->isValid())
			{
				$view = new MM_MemberDetailsView();
				return $view->cancelSubscriptionForOrderItem($orderItem);
			}
			else
			{
				return new MM_Response("Error cancelling subscription. Order Item {$post["mm_order_item_id"]} is invalid.", MM_Response::$ERROR);
			}
		}
		else 
		{
			return new MM_Response("Error cancelling subscription. Order Item ID is required.", MM_Response::$ERROR);
		}
	}
	
	protected function showDialog($post)
	{
		$info = new stdClass();
	
		foreach($post as $key=>$value)
		{
			$info->$key = $value;
		}
	
		if(!isset($info->id) || !isset($info->dialogId))
		{
			return new MM_Response("Unable to show My Account dialog. ID and module parameters are required.", MM_Response::$ERROR);
		}
		
		switch($info->dialogId)
		{
			case "mm-myaccount-account-details-dialog":
				$crntModule = "myaccount_account_details.php";
				break;
			
			case "mm-myaccount-billing-info-dialog":
				$crntModule = "myaccount_billing_info.php";
				break;
			
			case "mm-myaccount-shipping-info-dialog":
				$crntModule = "myaccount_shipping_info.php";
				break;
				
			case "mm-myaccount-subscription-info-dialog":
				$crntModule = "myaccount_subscription_info.php";
				break;
				
			case "mm-myaccount-show-gift-link-dialog":
				$crntModule = "myaccount_show_gift_link.php";
				break;
				
			case "mm-myaccount-order-history-dialog":
				$user = new MM_User($info->id);
				
				if($user->isValid())
				{
					$view = new MM_TransactionHistoryView();
					$dataGrid = new MM_DataGrid(null, "date", "desc");
					$data = $view->getViewData($user->getId(), $dataGrid);
					$rows = $view->generateRows($data, false);
					$dataGrid->setRows($rows);
					$dataGrid->setHeaders(array("force-set-headers"));
						
					if(count($rows) > 0)
					{
						return $dataGrid->generateHtml("myaccount_orderhistory.datagrid.php");
					}
					else
					{
						return "<em>No orders placed</em>";
					}
				}
				else
				{
					return new MM_Response("Invalid user ID '{$info->id}'", MM_Response::$ERROR);
				}
				
				break;
				
			case "mm-myaccount-gift-history-dialog":
				$user = new MM_User($info->id);
				
				if($user->isValid())
				{
					$view = new MM_GiftHistoryView();
					$dataGrid = new MM_DataGrid(null, "date_gifted", "desc", 5);
					$data = $view->getViewData($user->getId(), $dataGrid);
					$rows = $view->generateRows($data, false);
					$dataGrid->setRows($rows);
					$dataGrid->setHeaders(array("force-set-headers"));
						
					if(count($rows) > 0)
					{
						return $dataGrid->generateHtml("myaccount_gifthistory.datagrid.php");
					}
					else
					{
						return "<em>No gifts purchased</em>";
					}
				}
				else
				{
					return new MM_Response("Invalid user ID '{$info->id}'", MM_Response::$ERROR);
				}
				
				break;
		}
		
		if($crntModule != "")
		{
			return MM_TEMPLATE::generate(MM_MODULES."/".$crntModule, $info);
		}
		else
		{
			return new MM_Response("MM_MyAccountView.showDialog(): requested module does not exist", MM_Response::$ERROR);
		}
	}
	
	
	protected function unlinkSocialNetwork($post)
	{
		
		if(isset($post["linkedAccountId"]) && isset($post['linkedAccountUserId']))
		{	
			if(MM_AbstractSocialLoginExtension::removeLinkedSocialMediaAccounts($post['linkedAccountUserId'],$post["linkedAccountId"]))
			{
				return new MM_Response("Your social network account is no longer linked to this account.");
			}
			else
			{
				return new MM_Response("Error updating your linked social networks.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error updating your linked social networks.", MM_Response::$ERROR);
		}
	}
}
