/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_UserDefinedPage extends MM_Entity
{
	public static $ICON_TYPE_PAGE = 1;
	public static $ICON_TYPE_REPORT = 2;
	
	private $name = "";
	private $url = "";
	private $iconType = 1;
	
	public function getData() 
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_USER_DEFINED_PAGES." WHERE id='".$this->id."';";
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else 
		{
			parent::invalidate();
		}
	}

	public function setData($data)
	{
		try 
		{
			$this->name = $data->name;
			$this->url = $data->url;
			$this->iconType = $data->icon_type;
			parent::validate();
		}
		catch (Exception $ex) {
			parent::invalidate();
		}
	}
	
	public function delete()
	{
		
		global $wpdb;
		if(intval($this->id)>0){
			$sql = "delete from ".MM_TABLE_USER_DEFINED_PAGES." where id='{$this->id}' limit 1";
			$result = $wpdb->query($sql);
			if($result===false)
			{
				return new MM_Response("Could not remove user-defined page due to SQL error.", MM_Response::$ERROR);
			}
			return new MM_Response();
		}
		return new MM_Response("Could not remove invalid user-defined page.", MM_Response::$ERROR);
	}
	
	public function commitData()
	{	
		global $wpdb;
		if(intval($this->id)>0)
		{
			$sql = "update ".MM_TABLE_USER_DEFINED_PAGES." set 
						name='%s', 
						url='%s',
						icon_type='%s'
					where 
						id='{$this->id}'
			";
			$preparedSql = $wpdb->prepare($sql, $this->name, $this->url, $this->iconType);
			$ret = $wpdb->query($preparedSql);
			if($ret===false){
				return new MM_Response("Could not save query {$preparedSql}.", MM_Response::$ERROR);
			}
		}
		else
		{
			$sql = "insert into ".MM_TABLE_USER_DEFINED_PAGES." set 
						name='%s', 
						url='%s',
						icon_type='%s'
			";
			$preparedSql = $wpdb->prepare($sql, $this->name, $this->url, $this->iconType);
			$ret = $wpdb->query($preparedSql);
			if($ret===false){
				return new MM_Response("Could not save query {$preparedSql}.", MM_Response::$ERROR);
			}
		}
		return new MM_Response();
	}
	
	public static function getPageList()
	{
		global $wpdb;
		$pages = array();
		$sql = "select * from ".MM_TABLE_USER_DEFINED_PAGES." ";
		
		$rows = $wpdb->get_results($sql);
		if(is_array($rows))
		{
			foreach($rows as $row)
			{
				$crntPage = new MM_UserDefinedPage($row->id);
				
				if($crntPage->isValid())
				{
					$pages[] = $crntPage;
				}
			}
		}
		return $pages;
	}
	
	public function getIconList()
	{
		$arr =  array(
			self::$ICON_TYPE_PAGE=>'Page',
			self::$ICON_TYPE_REPORT=>'Report',
		);
		return $arr;
	}
	
	public function setName($str)
	{
		$this->name = $str;
	}
	
	public function getName()
	{
		return $this->name;
	}
	
	public function setUrl($val)
	{
		$this->url = $val;
	}
	
	public function getUrl()
	{
		return $this->url;
	}
	
	public function setIconType($val)
	{
		$this->iconType = $val;
	}
	
	public function getIconType()
	{
		return $this->iconType;
	}
}