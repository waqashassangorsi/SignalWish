/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * 
 * MM_AsyncTaskManager has the ability to take certain MemberMouse and Wordpress events and dispatch them asynchronously. This is 
 * accomplished by creating a non-blocking HTTP connection back to the server and transmitting the encoded data needed to 
 * process the event. The fact that the opened connection is non-blocking means that the process keeps running even after the connection 
 * is closed. 
 * 
 * This class is meant to be used in one of three scenarios: A payment service mediator event, dispatch of a push notification, or calling a 
 * wordpress action.
 * 
 */
class MM_AsyncTaskManager
{ 
    
    //supported event types
    const PAYMENT_SERVICE_MEDIATOR_EVENT = 1;
    const PUSH_NOTIFICATION = 2;
    const WORDPRESS_ACTION = 3;
    
    protected static $maxExecutionTime = 30; //this is for each discrete operation
    
    /**
     * Immediately dispatches events received from the mediator asynchronously and returns
     * 
     * @param string $mediatorEventType The mediator event
     * @param array $mediatorEventData The data associated with the event
     * 
     * @return MM_Response
     */
    public static function dispatchPaymentServiceMediatorEvent($mediatorEventType, $mediatorEventData)
    {
        $payload = array("mediatorEventType"   => $mediatorEventType,
                         "mediatorEventData"   => $mediatorEventData);
        //error_log("Dispatching payment service mediator event, process id ".getmypid()); //Testing: remove me
        return self::dispatchEvent(self::PAYMENT_SERVICE_MEDIATOR_EVENT,$payload);   
    }
    
    
    /**
     * Immediately dispatches actions received from the push notification engine asynchronously
     * @param array $actions contains the push notifications encapsulated in MM_Action objects
     * @param array $params the params that go along with the dispatch
     */
    public static function dispatchPushNotifications($actions,$params)
    {
        $payload = array("pushNotificationActions" => $actions,
                         "pushNotificationParams"  => $params);
        //error_log("Dispatching push notification, process id ".getmypid()); //Testing: remove me
        return self::dispatchEvent(self::PUSH_NOTIFICATION, $payload);
    }
    
    
    public static function dispatchAsyncWordpressAction($actionName,$actionArgs="")
    {
        $payload = array("actionName"=>$actionName,"actionArgs"=>$actionArgs);
        //error_log("Dispatching Wordpress action, process id ".getmypid()); //Testing: remove me
        return self::dispatchEvent(self::WORDPRESS_ACTION,$payload);
    } 
    
    
    /**
     * Takes the event data and POSTs it to admin_post.php with "blocking" set to false, which causes control to return 
     * immediately to this function, while the process containing the POST handler continues
     * 
     * @param integer $asyncEventType One of the event type constants defined in MM_AsyncTaskManager
     * @param mixed $asyncEventData The data that will be passed via POST
     * 
     * @return MM_Response indicating whether the dispatch succeeded. Note that this indicates whether the request was sent, not the outcome of the async operation
     */
    protected static function dispatchEvent($asyncEventType, $asyncEventData)
    {
        if (!is_numeric($asyncEventType))
        {
            return false;
        }
        
        $optimizeTransport = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ASYNC_OPTIMIZE_TRANSPORT,'uninitialized');
        if ($optimizeTransport === 'uninitialized')
        {
            if (class_exists('Requests_Transport_fsockopen'))
            {
                $capabilities = array('ssl'=>MM_Utils::isSSL());
                $optimizeTransport = Requests_Transport_fsockopen::test($capabilities);
                MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_ASYNC_OPTIMIZE_TRANSPORT,true);
            }
            else 
            {
                MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_ASYNC_OPTIMIZE_TRANSPORT,false);
            }
        }
        
        if (($optimizeTransport == true))
        {
            //disable the curl and streams transport (leaving only fsockopen)
            add_filter( 'use_curl_transport',    '__return_false' );
            add_filter( 'use_streams_transport', '__return_false' );
        }
        
        $requestId = uniqid();
        $asyncNonceLifetimeFunc = function() {
            return 1800; //due to the way wp does ticks, this will set the nonce lifetime to between 15-30mins
        };
        
        //now reduce nonce lifetime, create a nonce for this request, and then restore nonce lifetime
        //add_filter('nonce_life', $asyncNonceLifetimeFunc);
        $nonce = wp_create_nonce("mm-async-requestid-{$requestId}");
        //remove_filter('nonce_life', $asyncNonceLifetimeFunc);
        
        //error_log("Created nonce with action mm-async-requestid-{$requestId} and value {$nonce}");
        
        //copy wordpress authcookies so the async process has the same privileges as this one
        $authcookies = "";
        foreach($_COOKIE as $cookieName => $cookieValue)
        {
            if (preg_match('/^(wordpress_test_cookie|wordpress_logged_in_|wp-settings-1|wp-settings-time-1)/', $cookieName))
            {
                $authcookies .= "{$cookieName}=".urlencode($cookieValue)."; ";
            }
        } 
        
        $request_args = array(
            'timeout'   => 0.01,
            'blocking'  => false,
            'sslverify' => apply_filters( 'https_local_ssl_verify', false ),
            'body'      => array('action'             => 'mm_async_request',
                                 'mm-async-nonce'     => $nonce,
                                 'mm-async-requestid' => $requestId,
                                 'mm-async-eventtype' => $asyncEventType,
                                 'mm-async-eventdata' => base64_encode(serialize($asyncEventData))
             ),
            'headers'   => array('cookie' => $authcookies,
                                 'Expect' => ''),
        );
        
        //error_log("Dispatching an event with params:".print_r($request_args,true)); //Testing: remove me
        $response = wp_remote_post(network_admin_url("admin-post.php"), $request_args);
        if (is_wp_error($response)) 
        {
            $errorMessage = $response->get_error_message();
            //error_log("Error encountered:{$errorMessage}"); //Testing: remove me
            return new MM_Response("MM_AsyncTaskManager error: {$errorMessage}",MM_Response::$ERROR);
        }
        return new MM_Response();
        
    }
    
    
    public static function handleAsyncRequest()
    {
        //error_log("Receiving async event, process id ".getmypid()); //Testing: remove me
        //error_log("Receiving async params:".print_r($_POST,true)); //Testing: remove me
        if (empty($_POST['mm-async-requestid']) || empty($_POST['mm-async-eventtype']) || empty($_POST['mm-async-eventdata']))
        {
            return false;
        }
        
        $nonceAction = "mm-async-requestid-{$_POST['mm-async-requestid']}";
        //error_log("Verifying nonce with action {$nonceAction} and value {$_POST['mm-async-nonce']}");
        if (wp_verify_nonce($_POST['mm-async-nonce'], $nonceAction)) 
        {
            if (function_exists('fastcgi_finish_request'))
            {
                ignore_user_abort();
                fastcgi_finish_request();
            }
            
            //expand max execution time limit
            set_time_limit(MM_AsyncTaskManager::$maxExecutionTime); 
            $asyncEventdata = unserialize(base64_decode($_POST['mm-async-eventdata']));
            switch ($_POST['mm-async-eventtype'])
            { 
                case self::PAYMENT_SERVICE_MEDIATOR_EVENT:
                    return self::handlePaymentServiceMediatorEvent($asyncEventdata);
                    break;
                case self::PUSH_NOTIFICATION:
                    return self::handlePushNotificationDispatch($asyncEventdata);
                    break;
                case self::WORDPRESS_ACTION:
                    return self::handleAsyncWordpressAction($asyncEventdata);
                    break;                
                default:
                    return false;
            }
        }
    }
    
    
    public static function handlePaymentServiceMediatorEvent($eventData)
    {
        if (isset($eventData['mediatorEventType']) && isset($eventData['mediatorEventData']))
        {
            $mediator = new MM_PaymentServiceMediator(false);
            $mediator->notifyServicesOfEvent($eventData['mediatorEventType'], $eventData['mediatorEventData']);
        }
    }
    
    
    public static function handlePushNotificationDispatch($eventData)
    {
        if (isset($eventData['pushNotificationActions']) && isset($eventData['pushNotificationParams']))
        {
            $pne = new MM_PushNotificationEngine();
            $pne->performActionsAsync($eventData['pushNotificationActions'], $eventData['pushNotificationParams']);
        }
    }
    
    
    public static function handleAsyncWordpressAction($eventData)
    {
        if (isset($eventData['actionName']) && isset($eventData['actionArgs']))
        {
            do_action($eventData['actionName'],$eventData['actionArgs']);
        }
    }
    
    
}