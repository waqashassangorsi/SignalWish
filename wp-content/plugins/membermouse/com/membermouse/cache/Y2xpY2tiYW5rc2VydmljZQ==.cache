/**
 * 
 * The ClickBank service supports a subset of the payment service interface. Charging orders is not supported, but the creation of orders 
 * as a result of IPN notification IS supported. Refunds and cancellations are also supported via IPN. The service also supports cancellation and refunds
 * initiated from the MemberMouse side, which it sends to ClickBank via API.
 * 
 * ClickBank uses payment links to create orders on their servers, and then sends the user to a confirmation page that they have designated.
 * This means that orders can be created in MemberMouse in 2 ways. The first way is via the confirmation page. The potential exists for the users to be
 * redirected to the confirmation page prior to the SALE ipn being sent, so the service supports creating an order based on the variables sent along with the
 * confirmation page redirect. The name is sent in one field, and no payment amount is sent, so orders created this way guess what the first and last name are (based on spacing)
 * and use the default amount of the product as stored in MemberMouse. Then the user is redirected to the confirmation page. 
 * When the IPN arrives later, it detects that the order is already created and updates the name and order/item/transaction totals to what was actually charged, which is important
 * because ClickBank has started charging customers tax
 * 
 * If the IPN arrives first, the order is created using the information in the IPN, and then when the confirmation page redirect happens after that, the existence of the order is detected, and
 * the order is simply looked up and used to create the environment necessary for generating a transaction key (@see MM_TransactionKey) and redirecting to the correct confirmation page url based on
 * the order.
 * 
 * An important thing to note about the order creation process is that the possibility exists for the confirmation redirect and the IPN to happen simultaneously (or close enough to cause problems).
 * To guard against this, a check is done against the MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS table for the existence of the clickbank receipt number (ctransreceipt) and
 * if it doesn't exist, the first thing the __createOrder method does is put an entry in that table for the receipt number, with a placeholder value that later gets updated for the order item.
 * The check and the __createOrder method NEED to happen as close together as possible, in order to ensure that this happens fast enough in all scenarios to avoid two processes entering that code block
 * at the same time. 
 * 
 * An example is that, at the time of writing, the IPN creation method does the check on line 824, and then calls __createOrder on line 826.  It is crucial that there be no significant delay between the check and the create call
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ClickBankService extends MM_PaymentService
{
	protected $token = "CLICKBANK";
	
	protected $siteName = "";
	protected $apiDeveloperKey = "";
	protected $apiClerkKey = "";
	
	protected $secretKey = "";	
	protected $fallbackConfirmationPage = "";
	
	protected $supportedCurrencies = array("ARS","AUD","BRL","CAD","CHF","CLP","CNY","COP","CZK","DKK",
			"EUR","GBP","HKD","HUF","IDR","INR","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RUB",
			"SEK","SGD","THB","TRY","USD","ZAR");
	
	private static $MAX_PRODUCTS = 100;
	
	public function __construct()
	{
		parent::__construct();
	}
	
	
	public function install() 
	{ 
		global $wpdb;
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." (\n".
				"membermouse_product_id BIGINT(20) NOT NULL,\n".
				"clickbank_product_id VARCHAR(25) NOT NULL,\n".
				"UNIQUE KEY clickbank_to_mm_prodid_idx (clickbank_product_id,membermouse_product_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		$sql.= "CREATE TABLE ".MM_TABLE_CLICKBANK_IPN_LOG." (\n".
				"id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n".
				"ctransreceipt VARCHAR(14) NOT NULL,\n".
				"cupsellreceipt VARCHAR(14),\n".
				"ctransaction VARCHAR(18) NOT NULL,\n".
				"corderamount DECIMAL(19,4),\n".
				"ctransaffiliate VARCHAR(10),\n".
				"crebillamnt DECIMAL(19,4) DEFAULT '0',\n".
				"cprocessedpayments  TINYINT(2),\n".
				"cfuturepayments TINYINT(2),\n".
				"cnextpaymentdate VARCHAR(20),\n".
				"crebillstatus VARCHAR(10),\n".
				"ctranstime VARCHAR(20),\n".
				"recurring TINYINT NOT NULL,\n".
				"date_received DATETIME NOT NULL,\n".
				"attempt TINYINT NOT NULL,\n".
				"declinedConsent TINYINT,\n".
				"user_id INT(11),\n".
				"version VARCHAR(10),\n".
				"PRIMARY KEY  (id),\n".
				"KEY ctransreceipt_idx (ctransreceipt)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		$sql.=  "CREATE TABLE ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." (\n".
				"ctransreceipt VARCHAR(16) NOT NULL,\n".
				"order_item_id BIGINT(20) UNSIGNED NOT NULL,\n".
				"UNIQUE KEY clickbank_to_mm_orderitem_idx (ctransreceipt,order_item_id),\n".
				"KEY clickbank_receipt_order_item_id_idx (order_item_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		dbDelta($sql);
		$wpdb->update(MM_TABLE_CLICKBANK_IPN_LOG, array("version" => "2.1"), array("version" => null));
	}
	
	
	/**
	 * Report the features the ClickBank service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::OFFSITE_SERVICE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring ClickBank
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/clickbank_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = isset($post['offsite_payment_services']) && in_array(strtolower($this->getToken()), $post['offsite_payment_services']);
		$this->setActive($active);
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['clickbank'])?$post['payment_service']['clickbank']:array();
			$empty_errors = "";
			$requiredValues = array("site_name"=>"Site Name","secret_key"=>"Secret Key", "api_developer_key"=>"Developer Key","api_clerk_key"=>"Clerk Key");
			foreach ($requiredValues as $k=>$v)
			{
				if (empty($config[$k]))
				{
					$empty_errors .= "ClickBank: Please enter a value for the {$v}\n";
				}
			}
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means the required values are present
			$this->setSiteName($config['site_name']);
			$this->setSecretKey($config['secret_key']);
			$this->setAPIDeveloperKey($config['api_developer_key']);
			$this->setAPIClerkKey($config['api_clerk_key']);
			$this->setFallbackConfirmationPage($config['fallback_confirmation_page']);
		}
		return new MM_Response();
	}

	/**
	 * Processes ClickBank IPN notifications. Used to notify MemberMouse of sales, rebills, refunds, and cancellations, even those
	 * initiated from the ClickBank side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request This parameter is not used. The IPN comes from php://input
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request)
	{
		$this->install();

		if (!empty($_GET['op']) && ($_GET['op'] == "conf"))
		{
			$this->redirectToConfirmationPage($_REQUEST);
		}

		$request = file_get_contents('php://input');
		MM_DiagnosticLog::log( MM_DiagnosticLog::$MM_SUCCESS, "Clickbank Process Notification (" . print_r( $request, true ) . ")" );
		
		if ($this->decryptAndVerifyIPN($request))
		{
			$transactionType = $request->{'transactionType'};
			switch($transactionType) 
			{
				case 'TEST_SALE':
				case 'SALE':
					return MM_PaymentServiceResponse::translate($this->createOrderFromIPN($request));
					break;
				case "TEST_BILL":
				case "BILL":
					return MM_PaymentServiceResponse::translate($this->processRebillNotification($request));
					break;
				case "TEST_RFND":
				case "RFND":
					return MM_PaymentServiceResponse::translate($this->processRefundNotification($request));
					break;
				case "CGBK":
				case "INSF":
					return MM_PaymentServiceResponse::translate($this->processChargebackNotification($request));
					break;
				case "CANCEL-REBILL":
				case "CANCEL-TEST-REBILL":
					return MM_PaymentServiceResponse::translate($this->processCancellationNotification($request));
					break;
				case "UNCANCEL-REBILL":
					return MM_PaymentServiceResponse::translate($this->processUncancellationNotification($request));
					break;
				case "TEST":
					return new MM_PaymentServiceResponse("Test Successful");
					break;
				default:
					break;
			}
		}
		else
		{
			return new MM_PaymentServiceResponse("Invalid message format: Could not decrypt and verify", MM_PaymentServiceResponse::$ERROR);
		}
		return MM_PaymentServiceResponse::translate(new MM_Response());
	}

	/**
	 * Creates an order based on ClickBank confirmation vars in the $request (if necessary), otherwise looks up the order.
	 * Then the user is redirected to the confirmation page for the referenced order
	 *
	 * @param array $request The $_POST superglobal, which will contain the IPN
	 */
	protected function redirectToConfirmationPage($request)
	{
		global $wpdb;
		
		/*
		 * We leverage this code to handle the thankyou page redirect from a product purchase. 
		 * In this case there is no params or iv posted just the raw request data.
		 * We will check that this exists first.
		 */
		if(isset($request["params"]) && isset($request["iv"]))
		{
		    $request = json_decode($this->decryptPayload($request['params'], $request['iv']), true);
		}

		//first validate the incoming parameters to prevent spoofing
		$key = $this->getSecretKey();
		$rcpt = !empty($request['cbreceipt'])?$request['cbreceipt']:"";
		$time = !empty($request['time'])?$request['time']:"";
		$item = !empty($request['item'])?$request['item']:"";
		$cbpop = !empty($request['cbpop'])?$request['cbpop']:"";
		$xxpop=sha1("$key|$rcpt|$time|$item");
		$xxpop=strtoupper(substr($xxpop,0,8));

		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB confirmation request: ".print_r($request,true));
		if ($cbpop==$xxpop) //cipher matches
		{
			if (!empty($rcpt))
			{
				//the confirmation page returns the name as one field. We can assume in most cases that it will be the firstname and last name concatenated
				//we can reverse engineer it by splitting on spaces, and assume that the last item in the array is the lastname, and everything else is the first name
				//in the vast majority of cases, there will be only 2 array members, because most compound first names (or last names) are hyphenated
				$fullname = !empty($request['cname'])?$request['cname']:"";
				$pieces = explode(" ",$fullname);
				$piecesLength = count($pieces);
				if ($piecesLength > 1)
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (first name split block)");
					$firstname = ucfirst(strtolower(implode(" ",array_slice($pieces,0,($piecesLength-1)))));
					$lastname = ucfirst(strtolower($pieces[$piecesLength-1]));
				}
				else
				{
					//there were no spaces
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (second name split block)");
					$firstname = ucfirst(strtolower($request['cname']));
					$lastname  = "";
				}

				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation: First: {$firstname}, Last: {$lastname}");
				$billingAddress = new MM_CustomerAddress($firstname,$lastname,"","","","",$request['czip'],"",$request['ccountry']);
				$shippingAddress = null;
				$email = !empty($request['cemail'])?$request['cemail']:"";
				$affId = !empty($request['cbaffi'])?$request['cbaffi']:"";
				$order = null; //default
				if (!$this->checkForExistingOrder($rcpt))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (creating order): ");
					$createResponse = $this->__createOrder($firstname, $lastname, $email, $item, $rcpt, $billingAddress,$shippingAddress,$affId);
					if (MM_Response::isSuccess($createResponse) && ($createResponse->message instanceof MM_Order))
					{
						$order = $createResponse->message;
					}
				}
				else
				{
					//order already created, look it up
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (order exists): ");

					//the potential exists for there to be a race condition between the confirmation and the IPN, whereas the lookup fails when
					//performed prior to the order being written. This next block guards against that by doing controlled sleeps until the order item id
					//is present in the table
					$maxRetries = 5;
					$numSleeps = 0;
					
					$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($rcpt);
					$sql = "SELECT membermouse_product_id from " . MM_TABLE_CLICKBANK_PRODUCT_LINKS . " where clickbank_product_id=%s";
					$productId = $wpdb->get_var($wpdb->prepare($sql, $item));
					$orderItemId = $this->findOrderItemIdWithProduct($listOrderItemsIds, $productId);
					
					while ((in_array($orderItemId, array(0, false))) && ($numSleeps++ < $maxRetries))
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Waiting for order: {$numSleeps}...");
						usleep(1200000); //sleep for 1200ms
						$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($rcpt);
						$orderItemId = $this->findOrderItemIdWithProduct($listOrderItemsIds, $productId);
					}

					if (!is_null($orderItemId) && ($orderItemId > 0))
					{
						$orderItem = new MM_OrderItem($orderItemId);
						if ($orderItem->isValid())
						{
							MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (found order item)");
							$order = new MM_Order($orderItem->getOrderId());
						}
					}
					else
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (order exists but could not be read): order item id = ".(is_null($orderItemId)?"null":$orderItemId));
					}
				}

				if (!is_null($order))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (redirect block)");
					MM_Session::value(MM_Session::$KEY_LAST_USER_ID,MM_Order::getUserIdByOrderId($order->getId()));
					$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
					if ($confirmationUrl !== false)
					{
						wp_redirect($confirmationUrl);
						exit;
					}
				}
			}
		}

		//if execution reaches here, we were not able to locate the order, not much that can be done
		//redirect to the main site url or the fallback confirmation page
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (falling through to default redirect)");
		wp_redirect($this->getFallbackConfirmationPage());
		exit;
	}

	/**
	 * Process notification of a un-cancellation from ClickBank
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processUncancellationNotification($request)
	{
		global $wpdb;

		$logIPNResponse = $this->logIPN($request);
		$ipnId = MM_Response::isSuccess($logIPNResponse)?$logIPNResponse->message:null;

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		$cbReceipt = $request->receipt;
		$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($cbReceipt);

		foreach ($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				if (property_exists($lineItem, 'paymentPlan') && $lineItem->paymentPlan->rebillStatus === 'ACTIVE')
				{
					$sql = "SELECT membermouse_product_id from " . MM_TABLE_CLICKBANK_PRODUCT_LINKS . " where clickbank_product_id=%s";
					$productId = $wpdb->get_var($wpdb->prepare($sql, $lineItem->itemNo));
					$orderItemId = $this->findOrderItemIdWithProduct($listOrderItemsIds, $productId);
					$orderItem = new MM_OrderItem($orderItemId);

					// consume Order Item Id to prevent updating same MM Order Item twice.
					unset($listOrderItemsIds[$orderItemId]);

					if (is_null($orderItem))
					{
						return new MM_Response("Unable to process ClickBank un-cancellation: could not find a matching order item", MM_Response::$ERROR);
					}

					if ($orderItem->isRecurring() && ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED))
					{
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
						$orderItem->commitData();
					}
				}
			}
		}

		$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
		return MM_AccessControlEngine::assignAccessFromOrderItems($user, array($orderItem));
	}

	/**
	 * Process notification of a cancellation from ClickBank
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processCancellationNotification($request)
	{
		global $wpdb;
		
		$logIPNResponse = $this->logIPN($request);
		$ipnId = MM_Response::isSuccess($logIPNResponse)?$logIPNResponse->message:null;

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		$cbReceipt = $request->receipt;
		$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($cbReceipt);
		$transactionLogResponses = array();
		$revokeAccessResponses = array();

		foreach($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{  
			    /// is recurring
				if (property_exists($lineItem, 'paymentPlan') && $lineItem->paymentPlan->rebillStatus === 'CANCELED')
				{
					$sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." where clickbank_product_id=%s";
					$productId = $wpdb->get_var($wpdb->prepare($sql,$lineItem->itemNo));
					$orderItemId = $this->findOrderItemIdWithProduct( $listOrderItemsIds, $productId );
					$orderItem = new MM_OrderItem( $orderItemId );

					// consume Order Item Id to prevent updating same MM Order Item twice.
					unset( $listOrderItemsIds[ $orderItemId ] );

					if (is_null($orderItem))
					{
						return new MM_Response("Unable to process ClickBank cancellation: could not find a matching order item",MM_Response::$ERROR);
					}

					if ($orderItem->isRecurring() && ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED))
					{
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
						$orderItem->commitData();
						$revokeAccessResponses[] = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
					}  
				}
				///// not a recurring product
				else 
				{ 
				    $sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." where clickbank_product_id=%s";
				    $productId = $wpdb->get_var($wpdb->prepare($sql,$lineItem->itemNo));
				    $orderItemId = $this->findOrderItemIdWithProduct( $listOrderItemsIds, $productId );
				    $orderItem = new MM_OrderItem( $orderItemId );
				    
				    unset( $listOrderItemsIds[ $orderItemId ] );
				    
				    if (is_null($orderItem))
				    {
				        return new MM_Response("Unable to process ClickBank cancellation: could not find a matching order item [2]",MM_Response::$ERROR);
				    }
				    
				    $revokeAccessResponses[] = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
				}
			}
		}

		foreach ($revokeAccessResponses as $revokeAccessResponse)
		{
			if (MM_Response::isError($revokeAccessResponse))
			{
				return $revokeAccessResponse;
			}
		}
		return new MM_Response("Success",MM_Response::$SUCCESS);
	}

	/**
	 * Process notification of a chargeback or failed e-check from ClickBank
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processChargebackNotification($request)
	{
		global $wpdb;
		
		$logIPNResponse = $this->logIPN($request);
		$ipnId = MM_Response::isSuccess($logIPNResponse)?$logIPNResponse->message:null;

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		$cbReceipt = $request->receipt;
		$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($cbReceipt);
		$transactionLogResponses = array();
		$revokeAccessResponses = array();

		if (empty($listOrderItemsIds)) 
		{
			return new MM_Response("Unable to process ClickBank recurring payment notification: could not find a matching order", MM_Response::$ERROR);
		}

		foreach($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				if (property_exists($lineItem, 'paymentPlan'))
				{
					$sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." where clickbank_product_id=%s";
					$productId = $wpdb->get_var($wpdb->prepare($sql,$lineItem->itemNo));
					$orderItemId = $this->findOrderItemIdWithProduct( $listOrderItemsIds, $productId );
					$orderItem = new MM_OrderItem( $orderItemId );
					$chargebackAmount = (property_exists($request, 'totalOrderAmount')) ? $request->totalOrderAmount : $orderItem->getAmount();
					$order = new MM_Order($orderItem->getOrderId());
					$transactionDescription = "Chargeback for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
					$transactionLogResponses[] = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $chargebackAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_CHARGEBACK, false, $this->getId(), $ipnId);
					
					// consume Order Item Id to prevent updating same MM Order Item twice.
					unset( $listOrderItemsIds[ $orderItemId ] );

					if (is_null($orderItem))
					{
						return new MM_Response("Unable to process ClickBank cancellation: could not find a matching order item",MM_Response::$ERROR);
					}

					if ($orderItem->isRecurring())
					{
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
						$orderItem->commitData();
						$revokeAccessResponses[] = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
					}
				}
			}
		}

		foreach ($transactionLogResponses as $transactionLogResponse)
		{
			if (MM_Response::isError($transactionLogResponse))
			{
				return $transactionLogResponse;
			}
		}

		foreach ($revokeAccessResponses as $revokeAccessResponse)
		{
			if (MM_Response::isError($revokeAccessResponse))
			{
				return $revokeAccessResponse;
			}
		}
		return new MM_Response();
	}

	/**
	 * Process notification of a refund from ClickBank
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processRefundNotification($request)
	{
		global $wpdb;

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		$lookupSQL = "SELECT id FROM ".MM_TABLE_CLICKBANK_IPN_LOG." WHERE ctransreceipt=%s";
		$cbReceipt = $request->receipt;
		$cbProductID = null;
		$shippingAddress = null;
		$billingAddress = null;

		foreach($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				$refundAmount = $lineItem->productPrice;
				$productTypeRecurring = ($lineItem->recurring == 1) ? true : false;
				if (property_exists($lineItem, 'paymentPlan'))
				{
					$processedPayments = $lineItem->paymentPlan->paymentsProcessed;
				} else {
					$processedPayments = false;
				}
				break;
			}
		}

		if ($productTypeRecurring && $processedPayments !== false)
		{
			$lookupSQL.= $wpdb->prepare(" AND cprocessedpayments=%s",$processedPayments);
		}
		$lookupSQL.=" ORDER BY id DESC LIMIT 1";
		$lookupSQL = $wpdb->prepare($lookupSQL, $cbReceipt);
		$originalIPNID = $wpdb->get_var($lookupSQL);
		if (is_null($originalIPNID))
		{
			return new MM_Response("Unable to process refund: Could not find the original ClickBank order",MM_Response::$ERROR);
		}

		//find the matching transaction
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE payment_service_id=%s AND payment_service_detail_id=%s",$this->getId(),$originalIPNID));
		if (is_null($transactionRow))
		{
			return new MM_Response("Unable to process refund: Could not find the matching transaction for the ClickBank charge being refunded",MM_Response::$ERROR);
		}

		//log the new IPN
		$ipnResponse = $this->logIPN($request);
		if (MM_Response::isError($ipnResponse))
		{
			return new MM_PaymentServiceResponse("Error logging refund IPN for ClickBank receipt {$cbReceipt}", MM_PaymentServiceResponse::$ERROR);
		}
		$ipnId = $ipnResponse->message;

		//if the transaction has already been refunded, bail
		if (!empty($transactionRow->refund_id))
		{
			return new MM_Response("Unable to process refund: the designated ClickBank transaction has already been refunded",MM_Response::$ERROR);
		}

		//create a refund transaction
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$response = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
			$transactionRow->order_item_id,
			$refundAmount,
			$transactionRow->currency,
			$transactionDescription,
			MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
			false,
			$this->getId(),
			$ipnId,
			MM_Utils::getCurrentTime(),
			$transactionRow->id);
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionRow->id));
		}

		//refunds on ClickBank automatically cancel recurring subscriptions
		return $this->processCancellationNotification($request);
	}

	/**
	 * Process notification of a rebill from ClickBank
	 *
	 * @param array $request
	 * @return MM_Response indicating success or failure
	 */
	protected function processRebillNotification($request)
	{
		$logIPNResponse = $this->logIPN($request);
		$ipnId = MM_Response::isSuccess($logIPNResponse) ? $logIPNResponse->message : null;

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		$cbReceipt = $request->receipt;
		$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($cbReceipt);
		$transactionLogResponses = array();
		$revokeAccessResponses = array();

		if (empty($listOrderItemsIds))
		{
			return new MM_Response("Unable to process ClickBank recurring payment notification: could not find a matching order",MM_Response::$ERROR);
		}

		foreach ($request->lineItems as $lineItem) 
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				$orderItemId = $this->findOrderItemIdWithProduct($listOrderItemsIds, $lineItem->itemNo);
				$orderItem = new MM_OrderItem($orderItemId);

				// consume Order Item Id to prevent updating same MM Order Item twice.
				unset($listOrderItemsIds[$orderItemId]);
				// update details.
				if (!is_null($orderItem)) {
					$paymentAmount = (property_exists($request, 'totalOrderAmount')) ? $request->totalOrderAmount : '';

					$order = new MM_Order($orderItem->getOrderId());
					$transactionDescription = "Recurring payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
					$transactionLogResponses[] = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT, true, $this->getId(), $ipnId);
					if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
					{
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
						$orderItem->commitData();
						$revokeAccessResponses[] = MM_AccessControlEngine::assignAccessFromOrderItems($order->getCustomer(), array($orderItem)); //reinstate access
					}
				}
				else
				{
					return new MM_Response("Unable to process ClickBank recurring payment notification: could not find a matching order", MM_Response::$ERROR);
				}
			}
		}
		foreach($transactionLogResponses as $transactionLogResponse)
		{
			if (MM_Response::isError($transactionLogResponse))
			{
				return $transactionLogResponse;
			}
		}

		foreach ($revokeAccessResponses as $revokeAccessResponse)
		{
			if (MM_Response::isError($revokeAccessResponse))
			{
				return $revokeAccessResponse;
			}
		}
		return new MM_Response();
	}

	/**
	 * Returns the order item linked to the ClickBank receipt number (receipt) provided
	 *
	 * @param string $receiptNumber the ClickBank receipt number (receipt) to lookup
	 * @return MM_OrderItem if the lookup is successful, null if it fails
	 */
	protected function lookupOrderItemFromReceipt($receiptNumber)
	{
		global $wpdb;

		if (empty($receiptNumber))
		{
			return null;
		}

		$orderItem = null;
		$lookupQuery = "SELECT order_item_id FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupQuery, $receiptNumber));
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			if (!$orderItem->isValid())
			{
				return null;
			}
		}
		return $orderItem;
	}

	/**
	 * Returns the order item linked to the ClickBank receipt number (receipt) provided
	 *
	 * @param string $receiptNumber the ClickBank receipt number (receipt) to lookup
	 * @return MM_OrderItem if the lookup is successful, null if it fails
	 */
	private function lookupAllOrderItemsFromReceipt($receiptNumber)
	{
		global $wpdb;

		if (empty($receiptNumber))
		{
			return null;
		}

		$orderItems = null;
		$lookupQuery = "SELECT order_item_id FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s";
		$results = $wpdb->get_results($wpdb->prepare($lookupQuery, $receiptNumber));
		foreach($results as $res)
		{
			$orderItemId = intval($res->order_item_id);
			if (!is_null($orderItemId))
			{
				$orderItem = new MM_OrderItem($orderItemId);
				if ($orderItem->isValid())
				{
					$orderItems[$orderItemId] = $orderItemId;
				}
			}
		}
		return $orderItems;
	}
	
	private function findOrderItemIdWithProduct($orderItemIds, $itemNo)
	{
		// look up order item product id
		foreach($orderItemIds as $orderItemId)
		{
			// compare with itemNo
			$orderItem = new MM_OrderItem($orderItemId);
			if ($orderItem->isValid())
			{
				if ($orderItem->getItemId() == $itemNo)
				{
					return intval($orderItemId);
				}
			}
		}
		return false;
	}

	/**
	 * Returns the ClickBank receipt number (receipt) linked to the order item
	 *
	 * @param int $orderItemId the id of the order item to look up
	 * @return string receipt number on success, null on failure
	 */
	private function lookupReceiptFromOrderItemId($orderItemId)
	{
		global $wpdb;

		if (empty($orderItemId))
		{
			return null;
		}

		$orderItem = null;
		$lookupQuery = "SELECT ctransreceipt FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE order_item_id=%s";
		$receipt = $wpdb->get_var($wpdb->prepare($lookupQuery,$orderItemId));
		return $receipt;
	}

	/**
	 * Processes information from the settings screen prior to the payment service settings being saved. Allows for
	 * data to be retrieved from ClickBank using ajax during the configuration process
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS containing any requested data as the message, or a MM_Response of type ERROR on failure
	 */
	public function processIntermediateAction($post)
	{
		$this->install();
		if ((!isset($post['payment_service']['clickbank'])) || !(is_array($post['payment_service']['clickbank'])))
		{
			return new MM_Response("No configuration information sent to processIntermediateAction",MM_Response::$ERROR);
		}
		$config = $post['payment_service']['clickbank'];

		if (!empty($config['secret_key']))
		{
			$this->setSecretKey($config['secret_key']);
		}

		if (!empty($config['api_developer_key']) && !empty($config['api_clerk_key']))
		{
			$this->setAPIDeveloperKey($config['api_developer_key']);
			$this->setAPIClerkKey($config['api_clerk_key']);
		}

		if (!empty($config['site_name']))
		{
			$this->setSiteName($config['site_name']);
		}

		//perform the requested action
		$config['command'] = !empty($config['command'])?$config['command']:"";
		switch ($config['command'])
		{
			case 'populate_sites':
				//retrieve the list of sites the user has access to. This will also highlight an incorrect setup of their clerk key
				return $this->getSiteList();
				break;
			case 'retrieve_products':
			    if(isset($_REQUEST["page"]))
			    {
			       return $this->getProductMappingsDialog(intval($_REQUEST["page"]));
			    }
				return $this->getProductMappingsDialog();
				break;
			case 'save_product_mappings':
				return $this->saveProductMappings($post);
				break;
			default:
				return new MM_Response("ClickBank: Unknown command",MM_Response::$ERROR);
		}
	}

	/**
	 * There are potentially hundreds of mappings that need to be saved. Rather than issue multiple inserts and round-trip to the db for each one, this method
	 * utilizes mySQL's batch insert mechanism to create one insert for all the rows
	 *
	 * @param The $_POST request containing the mappings $post
	 * @return MM_Response indicating success or failure
	 */
	protected function saveProductMappings($post)
	{
		global $wpdb;

		$wpdb->query("DELETE FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS);

		$clickbankProductMappings = isset($post['clickbank_product_mapping'])?$post['clickbank_product_mapping']:array();

		$product_mappings = array();
		foreach ($clickbankProductMappings as $key => $value)
		{
			$product_mappings[] = $wpdb->prepare('(%s, %s)', $key, $value);
		}
		$values = implode(', ', $product_mappings);

		$res = $wpdb->query("INSERT INTO ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." (clickbank_product_id,membermouse_product_id) VALUES $values");
		if ($res === false)
		{
			return new MM_Response("Error saving ClickBank product mappings");
		}
		return new MM_Response();
	}

	/**
	 * Returns an array of curl options containing authentication headers and headers instructing the ClickBank API to return us JSON
	 *
	 * @return multitype:multitype:string
	 */
	private function getClickbankJSONAPIHeaders($page=null)
	{
	    $header = array(
	               "Authorization:{$this->getAPIDeveloperKey()}:{$this->getAPIClerkKey()}", 
	               "Accept:application/json"
	             );
	    if(!is_null($page) && intval($page)>0)
	    {
	        $header[] = "Page: ".$page;
	    }
		return array(CURLOPT_HTTPHEADER => $header);
	}

	/**
	 * Returns the list of sites that can be accessed using the supplied dev and clerk keys
	 *
	 * @return MM_Response
	 */
	private function getSiteList()
	{
		$endpoint = "{$this->getAPIUrl()}/quickstats/accounts";
		$siteListResponse = $this->doHTTPRequest($endpoint,"GET","",$this->getClickbankJSONAPIHeaders());
		if (MM_Response::isError($siteListResponse))
		{
			return $siteListResponse;
		}
		$responseObj = json_decode($siteListResponse->message);
		if ($responseObj === false)
		{
			return new MM_Response("Error retrieving sites from ClickBank",MM_Response::$ERROR);
		}
		$siteNames = array();

		// ClickBank has different version using different protocols for the response data. This detects if an
		// accountData attribute is present to determine which protocol is being used
		if (isset($responseObj->accountData))
		{
			$responseObj = $responseObj->accountData;
		}

		if(!is_array($responseObj))
		{
			//the documentation is really poor about what we can expect back, so the assumption is being made that with multiple
			//sites, the return value will be an array of json objects, but for a single object only the object is returned.
			//this places single objects into an array, so that both scenarios can be handled by the same code block
			$responseObj = array($responseObj);
		}

		foreach ($responseObj as $account)
		{
			// check for data in first possible protocol
			if (isset($account->accountData->nickName))
			{
				$siteNames[] = $account->accountData->nickName;
			}

			// check for data in second possible protocol
			else if(isset($account->nickName))
			{
				$siteNames[] = $account->nickName;
			}
		}
		return new MM_Response($siteNames);
	}

	/**
	 * Returns the HTML for the product-mapping configuration dialog
	 *
	 * @return MM_Response on success, contains the html for the dialog as the message, on error the message details the error
	 */
	private function getProductMappingsDialog($page=null)
	{
		global $wpdb;
		$this->install(); //creates the necessary tables if this is first run

		//retrieve clickbank products via api
		$endpoint = "{$this->getAPIUrl()}/products/list?site={$this->getSiteName()}"; 
		$retrieveProductsResponse = $this->doHTTPRequest($endpoint,"GET","",$this->getClickbankJSONAPIHeaders($page));
		if (MM_Response::isError($retrieveProductsResponse))
		{
			return $retrieveProductsResponse;
		}
		$responseObj = json_decode($retrieveProductsResponse->message);

		// When there's only one product in ClickBank and the response object is decoded, products->product is set as an object
		// containing the data associated with the single product instead of being set as a single-item array. Since the following
		// code expects products->product to be an array, attempt to modify the JSON in order to standardize the structure.
// 		if (($responseObj !== false) && isset($responseObj->total_record_count) && intval($responseObj->total_record_count) == 1)
// 		{
			if(isset($responseObj->products->product) && !is_array($responseObj->products->product))
			{
				$productObj = $responseObj->products->product;
				$responseObj->products->product = array();
				$responseObj->products->product[] = $productObj;
			}
// 		}

		if (($responseObj === false) || !isset($responseObj->products->product) || !is_array($responseObj->products->product))
		{
			return new MM_Response("Error retrieving products from ClickBank",MM_Response::$ERROR);
		}

		if (count($responseObj->products->product) == 0)
		{
			return new MM_Response("There are no products configured in ClickBank. Products must be configured in ClickBank prior to mapping them to MemberMouse products",MM_Response::$ERROR);
		}

		//retrieve local mappings
		$localMappings = array();
		$localMappingsSql = "SELECT membermouse_product_id, clickbank_product_id FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS;
		$localMappingsResults = $wpdb->get_results($localMappingsSql);
		if (!is_null($localMappingsResults))
		{
			foreach ($localMappingsResults as $localMappingResult)
			{
				$localMappings[$localMappingResult->clickbank_product_id] = $localMappingResult->membermouse_product_id;
			}
		}

		//place the clickbank products (if any) into an array and add an attribute to each product to indicate if/how it is mapped
		$clickbankProducts = array();
		$skuName = "@sku"; //testing has showed that clickbank products have an id and a sku, but the sku is passed back as the id in the IPN.
		//so the sku needs to be used everywhere an id is stored externally to reference a clickbank product
		foreach ($responseObj->products->product as $productObj)
		{
			if (isset($localMappings[$productObj->$skuName]))
			{
				$productObj->mapped = true;
				$productObj->membermouse_product_id = $localMappings[$productObj->$skuName];
			}
			else
			{
				$productObj->mapped = false;
			}
			$clickbankProducts[] = $productObj;
		}

		//retrieve membermouse products and put them into an array
		$membermouseProducts = array();
		$membermouseProductSQL = "SELECT id, name, price FROM ".MM_TABLE_PRODUCTS;
		$membermouseProductResults = $wpdb->get_results($membermouseProductSQL);
		if (!is_null($membermouseProductResults))
		{
			foreach ($membermouseProductResults as $membermouseProductResult)
			{
				//the MM_Product object is heavier than we need on the front end, so instead use the generic object created by the products query
				//this has the benefit of automatically passing back any fields we add to the query in the future
				$membermouseProducts[$membermouseProductResult->id] = $membermouseProductResult;
			}
		}

		//attach the clickbank products array and the membermouse products array to a results object, and return it
		$resultsObj = new stdClass();
		$resultsObj->clickbank_page = (!is_null($page) && intval($page)>0)?$page:1;
		$resultsObj->clickbank_prev_page = 0;
		$resultsObj->clickbank_next_page = 0;
		 
		if($resultsObj->clickbank_page>1)
		{
		    $resultsObj->clickbank_prev_page = $resultsObj->clickbank_page-1;
		}
		$resultsObj->clickbank_products = $clickbankProducts;
		$resultsObj->clickbank_total_records = $responseObj->total_record_count;
		if($responseObj->total_record_count>self::$MAX_PRODUCTS)
		{
		  $totalPages= ceil($responseObj->total_record_count/self::$MAX_PRODUCTS);
		  if($totalPages>$resultsObj->clickbank_page)
		  {
		      $resultsObj->clickbank_next_page = $resultsObj->clickbank_page+1;
		  }
		}
		$resultsObj->clickbank_total_records_max = self::$MAX_PRODUCTS;
		$resultsObj->clickbank_total_records_diff = ($resultsObj->clickbank_total_records>self::$MAX_PRODUCTS)?$resultsObj->clickbank_total_records - self::$MAX_PRODUCTS:0;
		$resultsObj->membermouse_products = $membermouseProducts;
		$dialog = MM_TEMPLATE::generate($this->getTemplateDir()."/clickbank_configure_products.dialog.php",$resultsObj);
		return new MM_Response($dialog);

	}

	/**
	 * Decrypts and verifies the ClickBank IPN using their algorithm for message decryption.
	 *
	 * @param object $request The php://input object representing the request
	 * @return boolean true if verification is successful, false if it fails
	 */
	protected function decryptAndVerifyIPN(&$request)
	{
		$request = json_decode($request);
		$encrypted = $request->{'notification'};
		$iv        = $request->{'iv'};
		// decrypt the body
		$decrypted = $this->decryptPayload($encrypted, $iv);
		$request = json_decode($decrypted);
		if (empty($request) && !empty($decrypted) && extension_loaded("mbstring"))
		{
		    $decrypted = mb_convert_encoding($decrypted,"UTF-8");
		    $request = json_decode($decrypted);
		}
		return ($request !== false);
	}

	protected function decryptPayload($payload, $iv)
	{
		return trim(
			openssl_decrypt( base64_decode( $payload ),
			'AES-256-CBC',
			substr( sha1( $this->secretKey ), 0, 32 ),
			OPENSSL_RAW_DATA,
			base64_decode( $iv ) ), "\0..\32" );
	}

	/**
	 * Creates an order from an incoming IPN request, if possible
	 *
	 * @param array $request The IPN request to attempt to create an order from
	 * @return MM_Response indicating success or failure
	 */
	protected function createOrderFromIPN($request)
	{
		global $wpdb;

		//first log the ipn
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: request = ".print_r($request,true));
		$logIPNResponse = $this->logIPN($request);
		$ipnId = (MM_Response::isSuccess($logIPNResponse))?$logIPNResponse->message:"";

		if (!is_object($request))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request not a valid request object");
			return new MM_Response("Cannot process ClickBank IPN.)", MM_Response::$ERROR );
		}

		if (!property_exists($request,'receipt'))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Request does not contain a valid receipt");
			return new MM_Response("Cannot process ClickBank IPN missing receipt.)", MM_Response::$ERROR );
		}

		//create order
		$receipt = $request->receipt;
		$products = array();
		$shippingAddress = null;
		$billingAddress = null;

		foreach($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				$products[$lineItem->itemNo] = array(
					'productPrice' => doubleval($lineItem->productPrice),
					'productDiscount' => doubleval($lineItem->productDiscount),
					'quantity' => $lineItem->quantity,
					'taxAmount' => $lineItem->taxAmount,
				);
			}
		}

		// Shipping Address
		if (property_exists($request->customer, 'shipping'))
		{
			$customer = $request->customer->shipping;
			$firstname = ((property_exists($customer, 'firstName')) ? $customer->firstName : '');
			$lastname = ((property_exists($customer, 'lastName')) ? $customer->lastName : '');
			$email = ((property_exists($customer, 'email')) ? $customer->email: '');
			$address1 = ((property_exists($customer->address, 'address1')) ? $customer->address->address1 : '');
			$address2 = ((property_exists($customer->address, 'address2')) ? $customer->address->address2: '');
			$city = ((property_exists($customer->address, 'city')) ? $customer->address->city : '');
			$state = ((property_exists($customer->address, 'state')) ? $customer->address->state: '');
			$postalCode = ((property_exists($customer->address, 'postalCode')) ? $customer->address->postalCode : '');
			$country = ((property_exists($customer->address, 'country')) ? $customer->address->country : '');
			$province = '';
			$shippingAddress = new MM_CustomerAddress($firstname, $lastname, $address1, $address2, $city, $state, $postalCode,$province, $country);
		}

		// Billing Address
		if (property_exists($request->customer, 'billing'))
		{
			$customer = $request->customer->shipping;
			$firstname = ((property_exists($customer, 'firstName')) ? $customer->firstName : '');
			$lastname = ((property_exists($customer, 'lastName')) ? $customer->lastName : '');
			$email = ((property_exists($customer, 'email')) ? $customer->email: '');
			$address1 = '';
			$address2 = '';
			$city = ((property_exists($customer->address, 'city')) ? $customer->address->city : '');
			$state = ((property_exists($customer->address, 'state')) ? $customer->address->state: '');
			$postalCode = ((property_exists($customer->address, 'postalCode')) ? $customer->address->postalCode : '');
			$country = ((property_exists($customer->address, 'country')) ? $customer->address->country : '');
			$province = '';
			$billingAddress = new MM_CustomerAddress($firstname, $lastname, $address1, $address2, $city, $state, $postalCode,$province, $country);
		}

		// Order Details
		$currency = (property_exists($request, 'currency')) ? $request->currency : 'USD';
		$orderAmount = (property_exists($request, 'totalOrderAmount')) ? $request->totalOrderAmount : '';
		$affiliateId = (property_exists($request, 'affiliate')) ? $request->affiliate : '';

		if (empty($email))
		{
			MM_DiagnosticLog::log( MM_DiagnosticLog::$MM_ERROR, "CB IPN: Missing required field customer email" );
			return new MM_Response( "Cannot create ClickBank order without a customer email.)", MM_Response::$ERROR );
		}

		if (empty($products))
		{
			MM_DiagnosticLog::log( MM_DiagnosticLog::$MM_ERROR, "CB IPN: Missing required field product" );
			return new MM_Response( "Cannot create ClickBank order without a product.)", MM_Response::$ERROR );
		}

		if (is_null($receipt))
		{
			MM_DiagnosticLog::log( MM_DiagnosticLog::$MM_ERROR, "CB IPN: Missing required field receipt" );
			return new MM_Response( "Cannot create ClickBank order without a Clickbank receipt number.)", MM_Response::$ERROR );
		}

		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: checking for existence of ClickBank order# {$receipt}");
		if (!$this->checkForExistingOrder($receipt))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order not found, creating order for ClickBank order# {$receipt}");
			foreach($products as $itemNo => $product)
			{
				$productQuantity = $product['quantity'];
				$productPrice = $product['productPrice'];
				$discountAmount = $product['productDiscount'];
				$taxAmount = $product['taxAmount'];
				$createResponse = $this->__createOrder($firstname, $lastname, $email, $itemNo, $productQuantity, $receipt, $billingAddress, $shippingAddress, $affiliateId, $productPrice, $ipnId, $currency, $discountAmount, $taxAmount);
				if (MM_Response::isError($createResponse))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: error creating ClickBank order# {$receipt}:".$createResponse->message);
					return $createResponse;
				}
			}
		}
		else
		{
			//order exists, lookup and update the user's name, and the order amount
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order(s) already exists for ClickBank receipt# {$receipt}, retrieving it");
			$listOrderItemsIds = $this->lookupAllOrderItemsFromReceipt($receipt);
			foreach($products as $itemNo => $product)
			{
				// Find First Order Item Id with matching product
				$orderItemId = $this->findOrderItemIdWithProduct($listOrderItemsIds, $itemNo);
				$orderItem = new MM_OrderItem($orderItemId);

				// consume Order Item Id to prevent updating same MM Order Item twice.
				unset($listOrderItemsIds[$orderItemId]);

				// update details.
				if (!is_null($orderItem))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order item lookup successful");
					$order = new MM_Order($orderItem->getOrderId());
					if ($order->isValid())
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order successfully retrieved");
						if ($orderAmount !== "")
						{
							MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: modifying order id {$order->getId()} to have new total of $orderAmount");
							$productQuantity = intval($product['productQuantity']);
							$productPrice = doubleval($product['productPrice']);
							$productUnitPrice = $productPrice/ $productQuantity;

							$order->setTotal($productPrice);
							$order->setCurrency($currency);
							$orderProductItems = $order->getProducts();
							$orderItem = reset($orderProductItems);
							$orderItem->setAmount($productUnitPrice);
							$orderItem->setQuantity($productQuantity);
							$orderItem->setTotal($productPrice);
							$order->commitData();

							//now update the transaction
							$transParams = array("order_id"=>$orderItem->getOrderId(),
												 "order_item_id"=>$orderItem->getId(),
												 "payment_service_id"=>$this->getId());

							$chargeTransParams = array("transaction_type"=>MM_TransactionLog::$TRANSACTION_TYPE_CHARGE) + $transParams;
							$wpdb->update(MM_TABLE_TRANSACTION_LOG, array("amount"=>$productPrice, "currency"=>$currency), $chargeTransParams); //update the charge
							$paymentTransParams = array("transaction_type"=>MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT) + $transParams;
							$wpdb->update(MM_TABLE_TRANSACTION_LOG, array("amount"=>(-$productPrice), "currency"=>$currency),$paymentTransParams); //update the payment
						}
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: attempting to lookup customer on existing order");
						$user = $order->getCustomer();
						if ($user->isValid() && ($user->getEmail() == $email)) //precaution
						{
							MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: customer from retrieved order was valid, updating name fields with IPN values");
							$user->setFirstName($firstname);
							$user->setLastName($lastname);
							$user->commitData();
							MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: customer first: {$firstname} , last: {$lastname}");
						}
					}
				}

			}
		}
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: completed IPN create method");
		return new MM_Response();
	}

	/**
	 * Checks to see if a ClickBank receipt number already has an order created
	 *
	 * @param string $receiptNumber The ClickBank receipt number to check
	 * @return boolean true or false
	 */
	private function checkForExistingOrder($receiptNumber)
	{
		global $wpdb;

		$existingSQL = "SELECT count(*) as existing FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s";
		$numOrders = $wpdb->get_var($wpdb->prepare($existingSQL,$receiptNumber));
		if (is_null($numOrders))
		{
			return false;
		}
		return (intval($numOrders) > 0);
	}

	/**
	 * __createOrder() is an internal method that creates an order using ClickBank-supplied parameters
	 *
	 * @param string $firstname
	 * @param string $lastname
	 * @param string $email
	 * @param string $cbProductID
	 * @param string $quantity
	 * @param string $cbReceipt
	 * @param MM_CustomerAddress $billingAddress
	 * @param MM_CustomerAddress $shippingAddress
	 * @param string $affId
	 * @param string $orderAmount
	 * @param string $ipnId
	 * @param string $currency
	 * @param string $discountAmount
	 * @param string $taxAmount
	 *
	 * @return MM_Response containing the MM_Order object on success or a descriptive error message on error
	 */
	private function __createOrder($firstname, $lastname, $email, $cbProductID, $quantity, $cbReceipt, MM_CustomerAddress $billingAddress, MM_CustomerAddress $shippingAddress=null, $affId="", $orderAmount="",$ipnId=null, $currency="", $discountAmount ="", $taxAmount = "")
	{
		global $wpdb;

		//insert a placeholder in the order item link table to let other processes know this order is being handled
		$linkData = array("ctransreceipt" => $cbReceipt,
						  "order_item_id" => 0
		);

		$wpdb->insert(MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS, $linkData);

		try
		{
			//set the currency to the active currency if one was not supplied
			$currency = !empty($currency)?$currency:MM_CurrencyUtil::getActiveCurrency();
			//retrieve matching mm product
			$sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." where clickbank_product_id=%s";
			$productId = $wpdb->get_var($wpdb->prepare($sql,$cbProductID));
			$product = new MM_Product($productId);
			if (is_null($productId) || !$product->isValid())
			{
				throw new Exception("Cannot create ClickBank order because ClickBank product id {$cbProductID} is not linked to any local products");
			}

			$user = MM_User::findByEmail($email);
			if (!$user->isValid()) //this is a new customer
			{
				$user->setFirstName($firstname);
				$user->setLastName($lastname);
				$user->setEmail($email);
				if (!empty($affId))
				{
					$user->setOriginAffiliateId($affId);
				}
				
				if(!is_null($billingAddress) && !empty($billingAddress))
				{
				    $user->setBillingAddress($billingAddress->getAddressLine1());
				    $user->setBillingAddress2($billingAddress->getAddressLine2());
				    $user->setBillingCity($billingAddress->getCity());
				    $user->setBillingCountry($billingAddress->getCountry());
				    $user->setBillingState($billingAddress->getState());
				    $user->setBillingZipCode($billingAddress->getPostalCode());
				}
				
				if(!is_null($shippingAddress) && !empty($shippingAddress))
				{
				    $user->setShippingAddress($shippingAddress->getAddressLine1());
				    $user->setShippingAddress2($shippingAddress->getAddressLine2());
				    $user->setShippingCity($shippingAddress->getCity());
				    $user->setShippingCountry($shippingAddress->getCountry());
				    $user->setShippingState($shippingAddress->getState());
				    $user->setShippingZipCode($shippingAddress->getPostalCode());
				}
				$user->commitData();
			}

			// save user_id on ipn log record
			$updateValues = array("user_id" => $user->getId());
			$whereClause = array("id" => $ipnId);
			$wpdb->update(MM_TABLE_CLICKBANK_IPN_LOG, $updateValues, $whereClause);

			$order = new MM_Order();
			$order->setCustomer($user);
			$order->addProduct($product, $quantity);

			$orderProductItems = $order->getProducts();
			$orderItem = reset($orderProductItems); //should only be one product, get a reference to it

			if ($orderItem->isRecurring())
			{
				//in other services this is done after payment is received, however with ClickBank, payment happens prior to order creation so we set the status in this process
				$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			}
			$orderAmount = doubleval($orderAmount);
			$quantity = intval($quantity);

			if ($orderAmount !== "")
			{
				// Calculate order item amount
				$orderItemAmount = $orderAmount / $quantity;
				//an amount was passed in
				$order->setTotal($orderAmount);
				$order->setCurrency($currency);
				$orderItem->setAmount($orderItemAmount);
				$orderItem->setCurrency($currency);
				$orderItem->setTotal($orderAmount);
			}

			// add CB Discount Line Item if one exists
			$discountAmount = doubleval($discountAmount);
			if ($discountAmount > 0)
			{
				$discountOrderItem = new MM_OrderItem();
				$discountOrderItem->setItemType(MM_OrderItem::$ORDER_ITEM_TYPE_DISCOUNT);
				$discountOrderItem->setDescription("ClickBank Order Discount");
				$discountOrderItem->setAmount($discountAmount / $quantity);
				$discountOrderItem->setQuantity($quantity);
				$discountOrderItem->setTotal($discountAmount);
				$order->addDiscount($discountOrderItem);
			}

			$order->setBillingAddress($billingAddress);
			if ($product->isShippable())
			{
				$order->setShippable(true);
				$order->setShippingAddress($shippingAddress);
			}
			$order->setPaymentMethod($this);

			//add affiliate
			if (!empty($affId))
			{
				$order->setAffiliateId($affId);
			}
			$taxAmount = doubleval($taxAmount);
			if ($taxAmount > 0)
			{
				$order->setTax($taxAmount);
			}
			$order->setOrderStatus(MM_ORDER::$PAID_COMPLETE);
			$orderCreationResponse = $order->commitData();

			if (MM_Response::isError($orderCreationResponse))
			{
				throw new Exception($orderCreationResponse->message); //have to bail on error because without an order, there is nothing to link a transaction to
			}

			//order is created, now log the transaction
			$transactionDescription = $transactionDescription = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
			MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->id,$ipnId);

			//now link the receipt to the order item id. receipt stays constant throughout future rebills, so its an effective way to keep track of a product
			$linkData = array("order_item_id" => $orderItem->getId());
			$wpdb->update(MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS, $linkData, array("ctransreceipt" => $cbReceipt, "order_item_id" => 0));

			//now assign any access granted by the order
			$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
			if (MM_Response::isError($accessResponse))
			{
				$accessResponse->message = "Error assigning access order with order id {$order->getId()}: {$accessResponse->message}";
				return $accessResponse;
			}
			return new MM_Response($order);
		}
		catch (Exception $e)
		{
			//we need to know if anything went wrong, so we can delete the placeholder
			$wpdb->query($wpdb->prepare("DELETE FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s AND order_item_id = 0",$cbReceipt));
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}

	/**
	 * Logs a ClickBank IPN request.
	 *
	 * @param array $request This is an array containing the IPN variables, typically identical to $_POST
	 * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
	 */
	private function logIPN($request)
	{
		global $wpdb;

		$ipnData = array(    "ctransreceipt"       =>   $request->receipt,
							 "ctransaction"        =>   $request->transactionType,
							 "corderamount"        =>   doubleval($request->totalOrderAmount),
							 "ctransaffiliate"     =>   "",
							 "cupsellreceipt"      =>   "",
							 "crebillamnt"         =>   "",
							 "cprocessedpayments"  =>   "",
							 "cfuturepayments"     =>   "",
							 "cnextpaymentdate"    =>   "",
							 "crebillstatus"       =>   "",
							 "recurring"           =>   0,
							 "ctranstime"          =>   $request->transactionTime,
							 "attempt"             =>   $request->attemptCount,
							 "date_received"       =>   MM_Utils::getCurrentTime(),
							 "declinedConsent"     =>   "",
							 "version"             =>   $request->version,
		);

		$required = array('ctransreceipt', 'ctransaction');
		$missing = array();
		foreach ($required as $k)
		{
			if (empty($ipnData[$k]))
			{
				$missing[] = $k;
			}
		}

		if (count($missing) > 0) 
		{
			$missingString = implode(",",$missing);
			return new MM_Response("Could not log ClickBank IPN because the following required fields were missing:".$missingString,MM_Response::$ERROR);
		}

		if (property_exists($request, 'affiliate'))
		{
			$ipnData["ctransaffiliate"] = $request->affiliate;
		}

		if (property_exists($request, 'declinedConsent'))
		{
			$ipnData["declinedConsent"] = $request->declinedConsent;
		}
		if (property_exists($request, 'upsell'))
		{
			if (property_exists($request->upsell, 'upsellOriginalReceipt'))
			{
				$ipnData["cupsellreceipt"] = $request->upsell->upsellOriginalReceipt;
			}
		}

		// find the first valid line item
		foreach($request->lineItems as $lineItem)
		{
			if ($this->validProduct($lineItem->itemNo))
			{
				$ipnData['recurring'] = $lineItem->recurring;
				if (property_exists($lineItem, 'paymentPlan')) {
					$ipnData["crebillamnt"] = (property_exists($lineItem->paymentPlan, 'rebillAmount')) ? $lineItem->paymentPlan->rebillAmount : 0;
					$ipnData["cprocessedpayments"] = $lineItem->paymentPlan->paymentsProcessed;
					$ipnData["cfuturepayments"] = $lineItem->paymentPlan->paymentsRemaining;
					$ipnData["cnextpaymentdate"] = $lineItem->paymentPlan->nextPaymentDate;
					$ipnData["crebillstatus"] = $lineItem->paymentPlan->rebillStatus;
				}
				break;
			}
		}
		$userId = $this->getUserIdFromReceipt($ipnData['ctransreceipt']);
		if ($userId !== false)
		{
			$ipnData['user_id'] = $userId;
		}

		$result = $wpdb->insert(MM_TABLE_CLICKBANK_IPN_LOG, $ipnData);
		if ($result === false)
		{
			return new MM_Response("Could not log ClickBank IPN to the database",MM_Response::$ERROR);
		}
		return new MM_Response($wpdb->insert_id);
	}

	private function getUserIdFromReceipt($receipt)
	{
		global $wpdb;

		$lookupQuery = "SELECT user_id FROM ".MM_TABLE_CLICKBANK_IPN_LOG." WHERE user_id IS NOT NULL AND ctransreceipt LIKE '%%%s%%'";
		$userId = $wpdb->get_var($wpdb->prepare($lookupQuery,$receipt));
		return $userId;
	}
	/**
	 * Charge an order. Not supported with ClickBank
	 *
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt. In this case, it will always be an error object
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true)
	{
		return new MM_PaymentServiceResponse("ClickBank orders must be initiated through ClickBank",MM_PaymentServiceResponse::$ERROR);
	}

	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * Not supported for ClickBank; this method responds with an error and a message directing the user to the proper ClickBank url
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 *
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 *
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 *
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null)
	{
		$clickbankUrl = "https://www.clkbank.com/clkbank.htm";
		$errorMessage = "To update payment information, use the ClickBank interface at {$clickbankUrl}";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}

	
	/**
	 * Cancels the user's subscription.
	 * @see MM_PaymentService::cancelSubscription()
	 *
	 * @param MM_OrderItem $orderItem The product item whose subscription is being cancelled
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function cancelSubscription(MM_OrderItem $orderItem)
	{
		global $wpdb;
		if (!$orderItem->isValid())
		{
			return new MM_PaymentServiceResponse("Could not cancel subscription: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}
		$lookupSQL = "SELECT mmcoil.ctransreceipt, mmcpl.clickbank_product_id, mmoi.amount FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." mmcoil LEFT JOIN ".MM_TABLE_ORDER_ITEMS." mmoi ON mmcoil.order_item_id = mmoi.id LEFT JOIN ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." mmcpl ON mmoi.item_id = mmcpl.membermouse_product_id WHERE mmcoil.order_item_id = {$orderItem->getId()}";
		$row = $wpdb->get_row($lookupSQL);
		$receiptNumber = $row->ctransreceipt;
		$clickbankProductId = $row->clickbank_product_id;

		// Get count of items on a receipt to determine if full or partial cancel is needed
		$count = $wpdb->get_var("SELECT count(ctransreceipt) as count FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." where ctransreceipt = '{$receiptNumber}'");
		$type = ($count > 1) ? 'partial':'full';

		$opResponse = $this->doCancelOrRefund($receiptNumber, "CNCL", $clickbankProductId, $amount = 0, $type);

		if (MM_Response::isError($opResponse))
		{
			if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
			{
				$opResponse->message = "Error cancelling subscription; This can mean that your API keys don't have the permissions required to perform this operation, or that the subscription could not be located in ClickBank. Please try cancelling manually from the ClickBank interface";
			}
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}
		if ($orderItem->isRecurring())
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		return new MM_PaymentServiceResponse();
	}

	/**
	 * Refunds a transaction
	 *
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		global $wpdb;

		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Could not refund transaction: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}

		//make sure the transaction exists
		$transactionLookupResponse = MM_TransactionLog::getTransactionInfo($transactionId);
		if (MM_Response::isError($transactionLookupResponse))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}

		$transactionRow = $transactionLookupResponse->message;

		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}

		$lookupSQL = "SELECT mmcoil.ctransreceipt, mmcpl.clickbank_product_id, mmoi.amount FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." mmcoil LEFT JOIN ".MM_TABLE_ORDER_ITEMS." mmoi ON mmcoil.order_item_id = mmoi.id LEFT JOIN ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." mmcpl ON mmoi.item_id = mmcpl.membermouse_product_id WHERE mmcoil.order_item_id = {$transactionRow->order_item_id}";
		$row = $wpdb->get_row($lookupSQL);
		$receiptNumber = $row->ctransreceipt;
		$clickbankProductId = $row->clickbank_product_id;
		$refundAmount = $row->amount;

		// Get count of items on a receipt to determine if full or partial refund is needed
		$count = $wpdb->get_var("SELECT count(ctransreceipt) as count FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." where ctransreceipt = '{$receiptNumber}'");
		$refundType = ($count > 1) ? 'partial':'full';

		$opResponse = $this->doCancelOrRefund($receiptNumber, "RFND", $clickbankProductId, $refundAmount, $refundType);
		if (MM_Response::isError($opResponse))
		{
			if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
			{
				$opResponse->message = "Error refunding transaction; This can mean that your API keys don't have the permissions required to perform this operation, or that the transaction doesn't exist. Please try attempting this refund manually from the ClickBank interface";
			}
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}

		//refund was success for execution to reach this point, log it in the transaction table
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$refundTransactionResponse = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
			$transactionRow->order_item_id,
			$transactionRow->amount,
			$transactionRow->currency,
			$transactionDescription,
			MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
			false,
			$this->getId(),
			"",
			MM_Utils::getCurrentTime(),
			$transactionRow->id);

		if (MM_Response::isSuccess($refundTransactionResponse))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$refundTransactionResponse->message,$transactionRow->id));
		}

		//issuing a ClickBank refund also cancels the subscription
		$orderItem = new MM_OrderItem($transactionRow->order_item_id);
		if ($orderItem->isRecurring())
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}

		$accessResponse = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		if (MM_Response::isError($accessResponse))
		{
			return MM_PaymentServiceResponse::translate($accessResponse);
		}
		return MM_PaymentServiceResponse::translate($refundTransactionResponse);
	}

	/**
	 * Calls the ClickBank ticket API to open a ticket to issue a cancellation or refund (the same api endpoint handles both)
	 *
	 * @param string $receiptNumber The ClickBank
	 * @param string $transactionType A string containing the value RFND or CNCL indicating the operation to perform
	 * @param int $sku The ClickBank item id used as the SKU for the line item. This value is used to identify individual purchases in multi-item orders.
	 * @param float $amount The dollar amount to refund. Must be the dollar amount of the original receipt
	 * @param float $actionType The type of refund: valid options are partial, full, percent.
	 *
	 * @return MM_Response containing the created ClickBank TicketData object on success or an error message on failure
	 */
	protected function doCancelOrRefund($receiptNumber, $transactionType, $sku, $amount, $actionType)
	{
		if (empty($receiptNumber))
		{
			return new MM_Response("Error performing cancel/refund: No receipt number supplied",MM_Response::$ERROR);
		}

		if (empty($actionType))
		{
			return new MM_Response("Error performing cancel/refund: No refund type (partial/full) supplied",MM_Response::$ERROR);
		}

		if ( $actionType == 'partial' && empty($sku))
		{
			return new MM_Response("Error performing cancel/refund: No sku supplied for partial cancel/refund.",MM_Response::$ERROR);
		}

		if ( $actionType == 'percent')
		{
			return new MM_Response("Error performing refund: Refunds by percent not supported.",MM_Response::$ERROR);
		}

		if ( $actionType == 'partial')
		{
			$refundType = 'PARTIAL_AMOUNT';
		}
		else if( $actionType == 'full')
		{
			$refundType = 'FULL';
		}
		else
		{
			return new MM_Response("Error performing refund: Invalid refund type requested",MM_Response::$ERROR);
		}

		$transactionType = strtoupper($transactionType);
		if ($transactionType == "RFND")
		{
			$reason = "ticket.type.refund.8"; //reason type is set to "other" because we don't have access to that information
			$queryFields = array("type" =>$transactionType,"reason" =>$reason,"refundType"=>$refundType,"sku" =>$sku,'refundAmount'=>$amount);
		}
		else if ($transactionType == "CNCL")
		{
			$reason = "ticket.type.cancel.7"; //other
			$queryFields = array("type" =>$transactionType,"reason"=>$reason,"sku" =>$sku);
		}
		else
		{
			return new MM_Response("Error performing cancel/refund: Invalid operation requested",MM_Response::$ERROR);
		}

		$queryString = http_build_query($queryFields);

		$endpoint = "{$this->getAPIUrl()}/tickets/{$receiptNumber}?{$queryString}";
		$crResponse = $this->doHTTPRequest($endpoint,"POST",array(),$this->getClickbankJSONAPIHeaders());
		if (MM_Response::isError($crResponse))
		{
			return $crResponse;
		}
		$responseObj = json_decode($crResponse->message);
		if ($responseObj === false)
		{
			return new MM_Response("Error communicating with ClickBank",MM_Response::$ERROR);
		}
		return new MM_Response($responseObj);
	}

	public function displayPaymentForm(MM_Order $order)
	{
		$orderProductItems = $order->getProducts();

		foreach ($orderProductItems as $eachProductItem)
		{
			$product = new MM_Product($eachProductItem->getItemId());

			if($product->isValid())
			{
				break;
			}
		} 
		
		$templateData = new stdClass();
		$templateData->form_destination = mm_purchase_link(array("productId"=>$product->getId(), "paymentMethod"=>"clickbank"));
 
		$html= MM_TEMPLATE::generate("{$this->getTemplateDir()}/clickbank_payment_form.html.php",$templateData);
		return $html;
	}

	private function validProduct($cbProductID)
	{
		global $wpdb;

		$sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." WHERE clickbank_product_id=%s";
		$productId = $wpdb->get_var($wpdb->prepare($sql, $cbProductID));
		$product = new MM_Product($productId);

		return (is_null($productId) || !$product->isValid()) ? false : true;
	}

	public function getAPIDeveloperKey()
	{
		return $this->apiDeveloperKey;
	}

	public function setAPIDeveloperKey($apiDeveloperKey)
	{
		$this->apiDeveloperKey = $apiDeveloperKey;
	}

	public function getAPIClerkKey()
	{
		return $this->apiClerkKey;
	}

	public function setAPIClerkKey($apiClerkKey)
	{
		$this->apiClerkKey = $apiClerkKey;
	}

	public function getSecretKey()
	{
		return $this->secretKey;
	}

	public function setSecretKey($secretKey)
	{
		$this->secretKey = $secretKey;
	}

	public function getSiteName()
	{
		return $this->siteName;
	}

	public function setSiteName($siteName)
	{
		$this->siteName = $siteName;
	}

	public function getFallbackConfirmationPage()
	{
		if(!empty($this->fallbackConfirmationPage))
		{
			return $this->fallbackConfirmationPage;
		}
		else
		{
			return site_url();
		}
	}

	public function setFallbackConfirmationPage($confirmationPage)
	{
		$this->fallbackConfirmationPage = $confirmationPage;
	}

	private function getAPIUrl()
	{
		return "https://api.clickbank.com/rest/1.3";
	}

	/**
	 * Overrides the parent curl request method to translate the "access is denied" response ClickBank returns into an error type
	 * All other functionality is the same as the superclass method
	 *
	 * @see MM_PaymentService::doHTTPRequest()
	 */
	protected function doHTTPRequest($remoteUrl, $method="POST", $data="", $options=array())
	{ 
	    $response = parent::doHTTPRequest($remoteUrl,$method,$data,$options);
	  	$opStatus = MM_Response::isSuccess($response);
		$opStatus = ($opStatus && (($response instanceof MM_Response) && ($response->getData("http_code") != "403"))); //forbidden status is a failure, but returns a result
		$opStatus = ($opStatus && (strpos(strtolower($response->message),"access is denied") === false));
		if (!$opStatus)
		{
			$response->type = MM_Response::$ERROR;
		}
		return $response;
	}

	/**
	 * Constructs a ClickBank purchase link for the supplied product id
	 * @see MM_PaymentService::getPurchaseLink()
	 *
	 * @param string $productId The membermouse product id to construct a purchase link for
	 * @return A string containing the purchase link on success, null on failure
	 */
	public function getPurchaseLink($productId)
	{
		global $wpdb;

		$lookupQuery = "SELECT clickbank_product_id FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." WHERE membermouse_product_id = %s";
		$clickbankPID = $wpdb->get_var($wpdb->prepare($lookupQuery,$productId));
		if (is_null($clickbankPID))
		{
			return null;
		}
		$purchaseLink = "http://{$this->getSiteName()}.pay.clickbank.net?cbitems={$clickbankPID}";
		
		return $purchaseLink;
	}
}