/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_AffiliateProvider extends MM_Entity
{	
	
	private $name="";
	private $token="";
	private $configOptions = array();
	private $isActiveProvider = false;
	
	public static $DEFAULT_TOKEN = "default";
	
	/**
	 * getData()
	 * Retrieve an Affiliate Provider entity from the db. 
	 * Requires that the token or the id be set on the object 
	 */
	public function getData() 
	{
		global $wpdb;
		
		if (!empty($this->token)) 
		{
			$sql = "SELECT * FROM ".MM_TABLE_AFFILIATE_PROVIDERS." WHERE provider_token='".$this->token."';";
		}
		else 
		{
			$sql = "SELECT * FROM ".MM_TABLE_AFFILIATE_PROVIDERS." WHERE id='".$this->id."';";
		}
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * Returns the active Affiliate Provider
	 */
	public static function getActiveAffiliateProvider()
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_AFFILIATE_PROVIDERS." WHERE active='1' LIMIT 1";
		$result = $wpdb->get_row($sql);
		
		$provider_entity = new MM_AffiliateProvider();
		
		if($result) {
			$provider_entity->setData($result);
		}
		else {
			$provider_entity->invalidate();
		}
		return $provider_entity;
	}
	
	/**
	 * 
	 * Sets the entity fields based on the content of $data
	 * @param object $data
	 */
	public function setData($data)
	{
		try 
		{
			$this->id = $data->id;
			$this->name = $data->provider_name;
			$this->token = $data->provider_token;
			$this->setConfig($data->additional_data); 
			$this->isActiveProvider = ($data->active == 1)?true:false;
						
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * 
	 * Accepts a serialized array and uses it to set the configOptions configuration array on the entity
	 * @param string $serialized_config
	 */
	private function setConfig($serialized_config) 
	{
		$unserialized_config = unserialize($serialized_config);
		$this->configOptions = (is_array($unserialized_config))?$unserialized_config:array();
	}
	
	/**
	 * Serializes the configOptions array and returns the serialized string
	 */
	private function getConfig() 
	{
		return serialize($this->configOptions);
	}
	
	/**
	 * Commits the values stored in the entity to the db
	 */
	public function commitData()
	{
		global $wpdb;
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		
		MM_Transaction::begin();
		try
		{	
			
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_AFFILIATE_PROVIDERS." set " .
			 			"	provider_name = '%s'," .
			 			"	provider_token='%s'," .
			 			"	additional_data='%s'," .
			 			"	active='%d'" .
			 			"";
			}
		 	else 
		 	{
				$sql = "update ".MM_TABLE_AFFILIATE_PROVIDERS." set " .
			 			"	provider_name = '%s'," .
			 			"	provider_token='%s'," .
			 			"	additional_data='%s'," .
			 			"	active='%d' where id='{$this->id}'" .
			 			"";
		 	}
			
		 	$preparedSql = $wpdb->prepare($sql, $this->name, $this->token,  $this->getConfig(), (($this->isActiveProvider == true)?1:0));
		 	$result = $wpdb->query($preparedSql);
		 	
		 	if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("ERROR: unable to create affiliate provider (".$preparedSql.")", MM_Response::$ERROR);
		 	}
		 	
		 	if($this->isActiveProvider){
		 		$this->deactivateOtherProviders();
		 	}
		 	
		 	if(!$doUpdate) {
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{	
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create affiliate provider", MM_Response::$ERROR);
		}
		
		MM_Transaction::commit();
	
		return new MM_Response();
	}
	
	private function deactivateOtherProviders()
	{
		global $wpdb;
		
		$sql = "update ".MM_TABLE_AFFILIATE_PROVIDERS." set active='0' where id!='{$this->id}'";
		$wpdb->query($sql);
	}
	
	/**
	 * Deletes the row having an id matching that stored in the entity, as long as it is not the default affiliate provider
	 */
	public function delete()
	{	
		global $wpdb;
		
		if(!$this->token != self::$DEFAULT_TOKEN)
		{
			$sql = "DELETE FROM ".MM_TABLE_AFFILIATE_PROVIDERS." WHERE id='%d' and provider_token != '%s' LIMIT 1";
			$results = $wpdb->query($wpdb->prepare($sql, $this->id,self::$DEFAULT_TOKEN));
			
			if($results) {
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * returns an array of all the affiliate providers names in the db, keyed by the token
	 */
	public static function getAffiliateProvidersList()
	{
		global $wpdb;
 		
 		$providers = array();
 		
 		$sql = "SELECT * FROM ".MM_TABLE_AFFILIATE_PROVIDERS;
 		
 		$rows = $wpdb->get_results($sql);
 		
 		if($rows===false)
 		{
 			return $providers;
 		}
 		if($rows) 
 		{
	 		foreach($rows as $row)
			{
				$providers[$row->provider_token] = $row->provider_name;
			}
 		}
 		
 		return $providers;
	}
	
	/**
	 * Set the Affiliate Provider Name
	 * @param string $str
	 */
	
	public function setName($str) 
	{
		$this->name = $str;
	}
	
	/**
	 * 
	 * Get the Affiliate Provider Name
	 */
	public function getName()
	{
		return $this->name;
	}
	
	/**
	 * 
	 * Set the Affiliate Provider Token
	 * @param string $str
	 */
	public function setToken($str) 
	{
		$this->token = $str;
	}
	
	/**
	 * 
	 * Get the Affiliate Provider Token
	 */
	public function getToken()
	{
		return $this->token;
	}
	
	/**
	 * 
	 * Set a configuration option for the Affiliate Provider. Note: to remove an option, use deleteConfigOption
	 * @param string $key
	 * @param string $value
	 */
	public function setConfigOption($key,$value) 
	{
		$this->configOptions[$key] = $value;
	}
	
	/**
	 * 
	 * Get a configuration option for the Affiliate Provider
	 * @param string $key
	 */
	public function getConfigOption($key) 
	{
		return (isset($this->configOptions[$key]))?$this->configOptions[$key]:"";
	}
	
	/**
	 *
	 * Remove a configuration option from the Affiliate Provider
	 * @param string $key
	 */
	public function deleteConfigOption($key)
	{
		if (isset($this->configOptions[$key]))
		{
			unset($this->configOptions[$key]);
		}
	}
	
	/**
	 * 
	 * Set whether this Affiliate Provider is the active provider or not
	 * @param boolean $state
	 */
	public function setActive($state=true) 
	{
		$this->isActiveProvider = $state;
	}
	
	/**
	 * 
	 * Return whether or not this Affiliate Provider is the active provider or not
	 * @return boolean true is this is the active provider, false otherwise
	 */
	public function isActive() 
	{
		return $this->isActiveProvider;
	}
}
