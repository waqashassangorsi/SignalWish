class MM_FormTagProcessor
{	
	public static $TAG_FORM = "mm_form";
	public static $TAG_FORM_SECTION = "mm_form_section";
	public static $TAG_FORM_SUBSECTION = "mm_form_subsection";
	public static $TAG_FORM_FIELD = "mm_form_field";
	public static $TAG_FORM_DATA = "mm_form_data";
	public static $TAG_FORM_MESSAGE = "mm_form_message";
	public static $TAG_FORM_BUTTON = "mm_form_button";
	
	protected static $subTags = array("MM_Form_Section","MM_Form_Field","MM_Form_Data","MM_Form_Message","MM_Form_Button","MM_Form_Subsection");
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is related to a form.
	 * 
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to a form.
	 */
	public static function isFormSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_FORM:
			case self::$TAG_FORM_SECTION:
			case self::$TAG_FORM_SUBSECTION:
			case self::$TAG_FORM_FIELD:
			case self::$TAG_FORM_DATA:
			case self::$TAG_FORM_MESSAGE:
			case self::$TAG_FORM_BUTTON:
				return true;
				
			default:
				return false;
		}
	}
	
	
	public static function registerFormSubtags()
	{
		$util = new MM_SmartTagUtil();
		foreach (self::$subTags as $subTag)
		{
			add_shortcode($subTag,array($util, 'addShortCode'));
		}
	}
	
	
	public static function deregisterFormSubtags()
	{
		$util = new MM_SmartTagUtil();
		foreach (self::$subTags as $subTag)
		{
			remove_shortcode($subTag);
		}
	}
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		$formTag = false;
		if($smartTag == self::$TAG_FORM)
		{
			$formTag = true;
			//registering subtags (SmartTags that depend on the context of a parent tag to run properly) only when inside of the parent tag
			//prevents them from being run out of context by the new wordpress do_shortcode() changes
			self::registerFormSubtags();
			
			//reverse any earlier entity substitutions done by wordpress on subtags contained in the content 
			$content = preg_replace("/(<a\s+[^>]*href=[^>]*)(&#91;MM_)([^>]*)(&#93;)/is","$1[MM_$3]",$content);
		}
		else
		{
			// check that a form is stored in the session
			$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
			
			if(!isset($form) || $form == null || $form->isValid() == false)
			{
				return "Unable to process SmartTag {$code}. It must be contained within a MM_Form SmartTag.";
			}
		}
		
		$returnValue = "";
		switch($smartTag) 
		{
			case self::$TAG_FORM:
				$returnValue = self::mm_form($content, $atts, $code);
				break;
				
			case self::$TAG_FORM_SECTION:				
			case self::$TAG_FORM_SUBSECTION:
				$returnValue = $form->mm_form_section($content, $atts, $code);
				break;
				
			case self::$TAG_FORM_FIELD:
				$returnValue = $form->mm_form_field($content, $atts, $code);
				break;
				
			case self::$TAG_FORM_DATA:
				$returnValue = $form->mm_form_data($content, $atts, $code);
				break;
				
			case self::$TAG_FORM_MESSAGE:
				$returnValue = $form->mm_form_message($content, $atts, $code);
				break;
				
			case self::$TAG_FORM_BUTTON:
				$returnValue = $form->mm_form_button($content, $atts, $code);
				break;
				
			default:
				$returnValue = "Invalid Form SmartTag {$smartTag} found.";
				break;
		}
		
		if ($formTag)
		{
			self::deregisterFormSubtags();
		}
		return $returnValue;
	}
	
	/**
	 * This function process the MM_Form tag. It is responsible for creating an instance of the
	 * MM_Form class based on the $productId retrieved from the attributes
	 * passed in $atts or from the $_GET params. It is further responsible for saving this instance in the 
	 * session so that all subsequent CheckoutForm tags processed will be able to access it. It then calls the do_shortcode() 
	 * method on the $content parameter in order to recursively process any SmartTags that occur in $content.
	 * Following all processing, the instance is cleared from the session and the fully processed CheckoutForm 
	 * tags are returned as HTML.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	private static function mm_form($content, $atts, $code)
	{
		$outputStr = "";
		
		if(isset($atts["type"]) && $atts["type"] != "")
		{
			$form = MM_AbstractForm::getForm($atts["type"], $atts);
			
			if($form->isValid())
			{
				MM_ObjectCache::set(MM_ObjectCache::$KEY_LAST_FORM,$form);
				
				// the body must be generated first because in processing the SmartTags some
				// parameters are set on the form instance that are use in generating the header
				$formBody = do_shortcode($content);
				
				$outputStr = $form->generateFormHeader().$formBody.$form->generateFormFooter();
					
				$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
			}
			else
			{
				$outputStr .= "<p class=\"mm-form-error\">";
				
				if($form->error != "")
				{
					$outputStr .= $form->error;
				}
				else
				{
					$outputStr .= "Invalid form type of '{$atts["type"]}' passed to SmartTag {$code}.";
				}
				
				$outputStr .= "</p>
";
			}
		}
		else
		{
			$outputStr .= "Invalid SmartTag Configuration: The 'type' attributes is required for SmartTag {$code}.";
		}

		return $outputStr;
	}
}
