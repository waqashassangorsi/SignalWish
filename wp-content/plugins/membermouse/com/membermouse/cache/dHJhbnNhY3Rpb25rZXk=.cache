/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_TransactionKey generates a unique key that is used to reference an order and a user. 
 * It is used to generate the confirmation page, because since an order can be generated completely outside of 
 * MemberMouse, the confirmation might the the first MemberMouse page the user accesses, so the order and user 
 * would not be in the session.
 * 
 */
class MM_TransactionKey extends MM_Entity
{	
	private $transactionKey="";
	private $userId="";
	private $orderId="";
	private $age="";	
	
	/**
	 * getData()
	 * Retrieve a transaction key entity from the db. 
	 * Requires that the token or the id be set on the object 
	 */
	public function getData() 
	{
		global $wpdb;
		
		if (!empty($this->transactionKey)) 
		{
			$sql = "SELECT * FROM ".MM_TABLE_TRANSACTION_KEY." WHERE transaction_key='".$this->transactionKey."';";
		}
		else 
		{
			$sql = "SELECT * FROM ".MM_TABLE_TRANSACTION_KEY." WHERE id='".$this->id."';";
		}
		$result = $wpdb->get_row($sql);
		
		if($result) 
		{
			$this->setData($result);
		}
		else 
		{
			parent::invalidate();
		}
	}
	
	/**
	 * 
	 * Sets the entity fields based on the content of $data
	 * @param object $data
	 */
	public function setData($data)
	{
		try 
		{
			$this->id = $data->id;
			$this->transactionKey = $data->transaction_key;
			$this->userId = $data->user_id;
			$this->orderId = $data->order_id;
			$this->age = $data->age;
						
			parent::validate();
		}
		catch (Exception $ex) {
			parent::invalidate();
		}
	}
	
	
	/**
	 * Commits the values stored in the entity to the db
	 */
	public function commitData()
	{
		global $wpdb;
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		
		MM_Transaction::begin();
		try
		{	
			
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_TRANSACTION_KEY." set " .
			 			"	transaction_key = '%s'," .
			 			"	user_id='%s'," .
			 			"	order_id='%s'," .
			 			"	age=NOW()".
			 			"";
			}
		 	else 
		 	{
				$sql = "update ".MM_TABLE_TRANSACTION_KEY." set " .
			 			"	transaction_key = '%s'," .
			 			"	user_id='%s'," .
			 			"	order_id='%s'," .
			 			"	age=NOW() where id = '{$this->id}'".
			 			"";
		 	}
			
		 	$preparedSql = $wpdb->prepare($sql, $this->transactionKey, $this->userId, $this->orderId);
		 	$result = $wpdb->query($preparedSql);
		 	
		 	if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("ERROR: unable to create transaction key (".$preparedSql.")", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) {
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{	
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create transaction key", MM_Response::$ERROR);
		}
		
		MM_Transaction::commit();
	
		return new MM_Response();
	}
	
	/**
	 * Deletes the row having an id matching that stored in the entity
	 */
	public function delete()
	{	
		global $wpdb;
		
		$sql = "DELETE FROM ".MM_TABLE_TRANSACTION_KEY." WHERE id='%d' LIMIT 1";
		$results = $wpdb->query($wpdb->prepare($sql, $this->id));
		
		if($results) {
			return true;
		}	
		
		return false;
	}
	
	/**
	 * Deletes all transaction keys older than 20 mins
	 * @return boolean true if operation successful, false otherwise
	 */
	public static function deleteAged()
	{
		global $wpdb;
	
		$sql = "DELETE FROM ".MM_TABLE_TRANSACTION_KEY." WHERE age < (now() - INTERVAL 20 minute)";
		$results = $wpdb->query($sql);
	
		if($results) {
			return true;
		}
	
		return false;
	}
	
	/**
	 * Generates a new random 32 alphanumeric string and associates it with a user id and order id
	 * @param integer $userId 
	 * @param integer $orderId
	 * @return MM_Response A response that contains the generated key in the message on success, and an error response on error
	 */
	public static function generateKey($userId, $orderId)
	{
		global $wpdb; 
		
		if (empty($userId))
		{
			return new MM_Response("User ID must be set when generating a transaction key", MM_Response::$ERROR);
		}
		
		//create a random 32-char string and make sure its unique
		do 
		{
			$newKey = self::createRandomIdentifier();
			$results = $wpdb->get_results($wpdb->prepare("select * from ".MM_TABLE_TRANSACTION_KEY." where transaction_key='%s'",$newKey));
		} 
		while (count($results) > 0); //iterate while key is not unique.
		
		//should be safe
		$results = $wpdb->query($wpdb->prepare("insert into ".MM_TABLE_TRANSACTION_KEY." set transaction_key='%s', user_id='%d', order_id='%d', age=now()",$newKey,$userId,$orderId));
		if($results === false)
		{
			return new MM_Response("Error creating transaction key",MM_Response::$ERROR);
		}
		else 
		{
			return new MM_Response($newKey,MM_Response::$SUCCESS);	
		}
	}
	
	
	/**
	 * Generates a new random 32 alphanumeric string
	 */
	public static function createRandomIdentifier($keyLength=32)
	{
		//generate the key
		$newKey = "";
		for ($i=0; $i<$keyLength; $i++) //create random 32 char string
		{
			$type = rand(1,3);
			switch ($type) {
				case 1: //numeric
					$newKey.=chr(rand(48,57));
					break;
				case 2: //upper alpha
					$newKey.=chr(rand(65,90));
					break;
				case 3: //lower alpha
				default:
					$newKey.=chr(rand(97,122));
					break;
			}
		}
		return $newKey;
	}
	
	/**
	 * Lookup a transaction by key. If founds stores the order id and user id in the session
	 * @param String $transactionKey 
	 * @return MM_TransactionKey The transaction key object with user id and order id info populated on success, an invalid object on failure
	 */
	public static function getTransactionByKey($transactionKey)
	{
		MM_TransactionKey::deleteAged();
		$key = new MM_TransactionKey();
		$key->setTransactionKey($transactionKey);
		$key->getData();
		if ($key->isValid())
		{
			MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID,$key->getOrderId());
			MM_Session::value(MM_Session::$KEY_LAST_USER_ID,$key->getUserId());
		}
		return $key;
	} 
	
	/**
	 * Set the transaction key
	 * @param string $transactionKey
	 */
	public function setTransactionKey($transactionKey)
	{
		$this->transactionKey = $transactionKey;
	}
	
	/**
	 * 
	 * Retrieve the transaction key
	 * @return string the transaction key
	 */
	public function getTransactionKey()
	{
		return $this->transactionKey;
	}
	
	/**
	 * Set the order id
	 * @param string $order id
	 */
	public function setOrderId($orderId)
	{
		$this->orderId = $orderId;
	}
	
	/**
	 *
	 * Retrieve the order id
	 * @return string the order id
	 */
	public function getOrderId()
	{
		return $this->orderId;
	}
	
	/**
	 * Set the user id
	 * @param string $user id
	 */
	public function setUserId($userId)
	{
		$this->userId = $userId;
	}
	
	/**
	 *
	 * Retrieve the user id
	 * @return string the user id
	 */
	public function getUserId()
	{
		return $this->userId;
	}
	
	
}
