/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_TotalValueReport extends MM_AdvancedReportBase 
{
	
	protected $visualElements = array("MM_ReportDataGrid");
	
	public static $TOTAL_VALUE_REPORT_DATAGRID = "total_value_report_datagrid";
	
	//query identifiers
	public static $TOTAL_VALUE_REPORT_QUERY = "total_value_report_query";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$TOTAL_VALUE_REPORT_DATAGRID:
				return $this->renderTotalValueReportDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	public function renderTotalValueReportDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData($this,self::$TOTAL_VALUE_REPORT_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		
		$gridHeaders = array("affiliate_id" => array('label'=>"Affiliate"), 
						     "0_day"        => array('label'=>"Day 0",   'columnType'=>'money'),
							 "7_day"        => array('label'=>"Day 7",   'columnType'=>'money'),
							 "14_day"       => array('label'=>"Day 14",  'columnType'=>'money'),
							 "21_day"       => array('label'=>"Day 21",  'columnType'=>'money'),
							 "30_day"       => array('label'=>"Day 30",  'columnType'=>'money'),
							 "60_day"       => array('label'=>"Day 60",  'columnType'=>'money'),
							 "90_day"       => array('label'=>"Day 90",  'columnType'=>'money'),
							 "120_day"      => array('label'=>"Day 120", 'columnType'=>'money'),
							 "150_day"      => array('label'=>"Day 150", 'columnType'=>'money'),
							 "180_day"      => array('label'=>"Day 180", 'columnType'=>'money')
								
		);
		$grid = MM_ReportDatagrid::createFromData(self::$TOTAL_VALUE_REPORT_DATAGRID, $gridHeaders, $dataResponse,$directives);
		//$grid->setGridTitle("Channel Sales Report");
		$grid->setShowHeaderRow(false);
		return new MM_ReportResponse($grid->render());
	}
	
	
	/**
	 * Generate the data for the Channel Sales report. 
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing the results
	 */
	public static function generateTotalValueReportData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Channel Sales report data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (!isset($params['start_date']) || !isset($params['end_date']))
		{
			return new MM_Response("Could not generate Channel Sales report data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$ordersTable = MM_TABLE_ORDERS;
		
		$startDate = date("Y-m-d H:i:s",strtotime($params['start_date'])); //mysql format
		$endDate =   date("Y-m-d H:i:s",strtotime($params['end_date']));
		
		$affiliateResults = array();
		$subaffiliateResults = array();
		
		/* get 30,60,90,120,150 and 180 day customer value */
		$sql = "SELECT IF(affiliate_id='','[unspecified]',affiliate_id) AS affiliate_id,".
			   "IF(sub_affiliate_id='','[unspecified]',sub_affiliate_id) AS sub_affiliate_id,".
			   "ABS(SUM(IF(days_out=0,amount,0))) AS 0_day,".
			   "ABS(SUM(IF(days_out<=7,amount,0))) AS 7_day,".
			   "ABS(SUM(IF(days_out<=14,amount,0))) AS 14_day,".
			   "ABS(SUM(IF(days_out<=21,amount,0))) AS 21_day,".
			   "ABS(SUM(IF(days_out<=30,amount,0))) AS 30_day,".
			   "ABS(SUM(IF(days_out<=60,amount,0))) AS 60_day,".
			   "ABS(SUM(if(days_out<=90,amount,0))) AS 90_day,".
			   "ABS(SUM(IF(days_out<=120,amount,0))) AS 120_day, ".
			   "ABS(SUM(IF(days_out<=150,amount,0))) AS 150_day, ".
			   "ABS(SUM(IF(days_out<=180,amount,0))) AS 180_day ".
			   "FROM (SELECT t.transaction_date, o.date_added, t.amount, o.affiliate_id, o.sub_affiliate_id, ".
			   "IF((DATEDIFF(t.transaction_date,o.date_added)=-1),0,DATEDIFF(t.transaction_date,o.date_added)) ".
			   "AS days_out FROM {$transactionsTable} t INNER JOIN {$ordersTable} o ON (t.order_id = o.id) ".
			   "WHERE (t.transaction_type IN ('".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."','".MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."')) ".
			   "AND (o.date_added BETWEEN %s and %s)) AS Q GROUP BY Q.affiliate_id, Q.sub_affiliate_id";
		
		$sql = $wpdb->prepare($sql,$startDate,$endDate);
		$results = $wpdb->get_results($sql,ARRAY_A);
		if (count($results) > 0)
		{
			foreach ($results as $k=>$v)
			{
				$affiliate = $v['affiliate_id'];
				foreach ($v as $column=>$columnValue)
				{
					if (($column != 'affiliate_id') && ($column != 'sub_affiliate_id'))
					{
						$affiliateResults[$affiliate][$column] = isset($affiliateResults[$affiliate][$column])?($affiliateResults[$affiliate][$column] + $columnValue):$columnValue;
					}
				}
			}
			
			//convert to dataset format
			$finalResults = array();
			foreach ($affiliateResults as $affiliate=>$row)
			{
				$finalResults[] = array('affiliate_id'=>$affiliate) + $row;
			}
			
			$subaffiliateResults = $results;
		}
		
		$dataset = MM_ReportDataset::createCompoundReportDataset($params,$finalResults);
		foreach ($subaffiliateResults as $affiliate=>$subresult)
		{
			$subparams = $params + array("affiliate_id"=>$affiliate);
			$dataset->addAdditionalDataset($subparams, $subresult); //TODO: proof this
		}
		return $dataset;
	}
	
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$TOTAL_VALUE_REPORT_QUERY:
				return self::generateTotalValueReportData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

