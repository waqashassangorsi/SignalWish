/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
abstract class MM_ReportBase implements MM_ReportBaseInterface
{
	
	protected $token = "";
	
	protected $javascriptDependencies = array();
	protected $cssDependencies = array();
	
	protected $visualElements = array();
	
	protected $formTemplate = "";
	
	public static $DATA_STATUS_LOADING = "loading";
	public static $DATA_STATUS_LOADED  = "loaded";
	
	//defaults
	public static $DEFAULT_DATE_NOW = "mm-report-default-date-now";
	public static $DEFAULT_DATE_3MONTHS_AGO = "mm-report-default-date-3mon-past";
		
	
	public function __construct($autoEnqueueDependencies=true)
	{	
		$this->formTemplate = MM_TEMPLATE_REPORTING.DIRECTORY_SEPARATOR."form".DIRECTORY_SEPARATOR."reportform.html.php";
		if (is_array($this->visualElements) && (count($this->visualElements)>0))
		{
			if ($autoEnqueueDependencies)
			{
				foreach ($this->visualElements as $element)
				{
					$dependencies = call_user_func(array($element,"getDependencies"),$element);
					if (is_array($dependencies) && (count($dependencies)>1))
					{
						$this->registerDependencies($dependencies);
					}
				}
				
			}

			$this->enqueueDependencies();
		}
		
		//when to reap expired reporting cache entries is a difficult decision, because we want to make sure that stale data is
		//ejected from the cache, but we don't want to issue too many superfluous delete queries due to the overhead incurred.
		//this makes the report class constructor a good place for it, because we don't really care if cache data is expired until it
		//is time to generate a report
		MM_ReportDataRetriever::clearDataCache(true);
	}
	
	/**
	 * Creates a div using $elementIdentifier as the element id and containing
	 * the visual element associated with $elementIdentifier
	 * 
	 * @param string $elementIdentifier The identifier of the visual element the div is meant to contain
	 * @param array $params An array of the parameters to be used in rendering the visual element
	 * @param string $width The weight of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param string $height The height of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param array $attributes An array of key-value paired attributes that should be added to the tag of the container element
	 * @param array $directives An array of key-value paired directives that will be passed to the visual element (not parameters, i.e. sorting and pagination settings)
	 * @param boolean $isStatic Whether or not this element should react to parameter changes after its initial rendering
	 * 
	 * @return string The html/css/js
	 */
	public function createVisualElement($elementIdentifier, $params="", $width="",$height="",$attributes="", $directives=array(),$isStatic=false)
	{
		$output = "";
		$attribString = "";
		$style = "";
		
		//call method to get attributes
		$attributes = $this->calculateElementAttributes($width,$height,$attributes,true,$isStatic);
		
		$renderResponse = $this->renderVisualElement($elementIdentifier, $params, $width, $height);
		if (!MM_ReportResponse::isError($renderResponse))
		{
			$attribString = (!empty($attributes['attributes']))?$attributes['attributes']:"";
			$style = (!empty($attributes['style']))?$attributes['style']:"";
			$classString = (!empty($attributes['class']))?$attributes['class']:"";
		}
		
		if (MM_ReportResponse::isSuccess($renderResponse))
		{
			$dataStatus = self::$DATA_STATUS_LOADED;
			$output .= "<div id='{$elementIdentifier}' class='{$classString}' data-status='{$dataStatus}' {$attribString} {$style}>\n";
			$output .= $renderResponse->message;
			$output .= "</div>\n";
			
			$paramsJson = json_encode($params);
			$output.= "<script type='text/javascript'>mmjs.pushParams('{$elementIdentifier}',{$paramsJson});</script>\n";
		}
		else if (MM_ReportResponse::isNotReady($renderResponse))
		{
			$dataStatus = self::$DATA_STATUS_LOADING;
			$output .= "<div id='{$elementIdentifier}' class='{$classString}' data-status='{$dataStatus}' {$attribString} {$style}>\n";
			$output .= "</div>\n";
			
			$paramsJson = json_encode($params);
			$output.= "<script type='text/javascript'>mmjs.pushParams('{$elementIdentifier}',{$paramsJson});</script>\n";
		}
		else if (MM_ReportResponse::hasNoData($renderResponse))
		{
			$dataStatus = self::$DATA_STATUS_LOADED;
			$classString .= " mm-no-data-placeholder";
			$output .= "<div id='{$elementIdentifier}' class='{$classString}' data-status='{$dataStatus}' {$attribString} {$style}>\n";
			$output .= "<p><span><i class='fa fa-warning'></i> <strong>Hey there!</strong></span>  You don't have any reporting data yet, but as soon as you get some members we'll show you some cool graphs here!</p>\n";
			$output .= "</div>\n";
		}
		else
		{
			//error
			$dataStatus = self::$DATA_STATUS_LOADED;
			$classString .= " mm-no-data-placeholder";
			$output .= "<div id='{$elementIdentifier}' class='{$classString}' data-status='{$dataStatus}' {$attribString} {$style}>\n";
			$output .= "<p><span><i class='fa fa-error'></i> <strong>Hey there!</strong></span>  There was an error generating this graph! Please try again, and if the error continues, contact MemberMouse support</p>\n";
			$output .= "</div>\n";
		}
		return $output;
	}
	
	
	/**
	 * Convenience method for creating a visual element that doesn't respond to page actions after the first rendering
	 * @see MM_ReportBase::createVisualElement
	 */
	public function createStaticVisualElement($elementIdentifier, $params="", $width="",$height="",$attributes="", $directives=array())
	{
		return $this->createVisualElement($elementIdentifier,$params,$width,$height,$attributes,$directives,true);
	}
	
	
	/**
	 * Creates a div using $elementIdentifier as the element id, to serve as a placeholder for a visual element to be loaded in the 
	 * future.
	 * 
	 * @param string $elementIdentifier The identifier of the visual element the div is meant to contain
	 * @param string $width The weight of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param string $height The height of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param array $attributes An array of key-value paired attributes that should be added to the tag of the container element
	 * @param array $directives An array of key-value paired directives that will be passed to the visual element (not parameters, i.e. sorting and pagination settings)
	 * @param string $visible Whether or not the div should be visible
	 * 
	 * @return string The html/css/js
	 */
	public function createVisualElementPlaceholder($elementIdentifier, $width="", $height="", $attributes="", $directives=array(), $visible=false)
	{
		$output = "";
	
		//call method to get attributes
		$attributes = $this->calculateElementAttributes($width,$height,$attributes,$visible);
		$attribString = (!empty($attributes['attributes']))?$attributes['attributes']:"";
		$style = (!empty($attributes['style']))?$attributes['style']:"";
		
		$dataStatus = self::$DATA_STATUS_LOADED;
		$output .= "<div id='{$elementIdentifier}' data-status='{$dataStatus}' {$attribString} {$style}>\n";
		$output .= "</div>\n";
		return $output;
	}
	
	
	/**
	 * Converts the height, width, attributes, and visible parameters into a string to be inserted into the 'style' tag
	 * and a string of custom attribute pairs, both of which are returned in an array
	 *  
	 * @param string $width The weight of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param string $height The height of the element container. This is inserted directly into the style tag, so can include px or em
	 * @param array $attributes An array of key-value paired attributes that should be added to the tag of the container element
	 * @param string $visible Whether or not the div should be visible
	 * 
	 * @return array containing optional keys 'attributes', 'style', and 'class'. These keys have string values if they exist. If all three keys are not set, an empty array is returned
	 */
	protected function calculateElementAttributes($width="", $height="", $attributes="", $visible=true, $isStatic=false)
	{
		if (is_numeric($height))
		{
			$height.="px";
		}
		
		if (is_numeric($width))
		{
			$width.="px";
		}
		
		if (!is_array($attributes))
		{
			$attributes = array();
		}
		
		$classString = $isStatic?"mm-report-static-visual-element":"mm-report-visual-element";
		if (!empty($attributes['class'])) //this 
		{
		    $classString .= " {$attributes['class']}";
		}
		unset($attributes['class']); //handled above
		
		$style = (!empty($attributes['style']))?$attributes['style']:"";
		$style .= ($height != "")?"height:{$height}; ":"";
		$style .= ($width != "")?"width:{$width}; ":"";
		$style .= !$visible?"display:none; ":"";
		$style = ($style != "")?"style='{$style}'":$style;
		unset($attributes['style']); //handled above
		
				
		$attribString = "";
		if (is_array($attributes))
		{	
			foreach ($attributes as $k=>$v)
			{
				$attribString .= "{$k}='{$v}' ";
			}
		}
		
		$returnValues = array('class' => $classString);
		if (!empty($style))
		{
			$returnValues['style'] = $style;
		}
		
		if (!empty($attribString))
		{
			$returnValues['attributes'] = $attribString;	
		}
		
		return $returnValues;
	}
	
	
	/**
	 * Returns the html/javascript for the requested visual element
	 * 
	 * @param string $elementIdentifier
	 * @param array $params
	 * @param int $width
	 * @param int $height
	 * @param array $directives
	 * 
	 * @return MM_ReportResponse containing visual element code if the identifier could be found and the data is ready.
	 */
	public abstract function renderVisualElement($elementIdentifier, $params="", $width="", $height="", $directives=array());
	
	
	/**
	 * return the value of the token identifying the specific report
	 * @return string the value of the token
	 */
	public function getToken()
	{
		return $this->token;
	}
	
	
	public function registerDependencies($dependencies)
	{
		$this->cssDependencies = array_merge($this->cssDependencies,(isset($dependencies['css'])?$dependencies['css']:array()));
		$this->javascriptDependencies = array_merge($this->javascriptDependencies,(isset($dependencies['js'])?$dependencies['js']:array()));
	}
	
	
	public function enqueueDependencies() 
	{
		foreach ($this->cssDependencies as $dependency)
		{
			wp_enqueue_style(basename($dependency),$dependency);
		}
		
		foreach ($this->javascriptDependencies as $dependency)
		{
			wp_enqueue_script(basename($dependency),$dependency);
		}	
	} 
	
	
	public function renderForm($configurationArray, $id="mm-form-container", $class="mm-report-params",$style="")
	{
		if (!is_array($configurationArray))
		{
			return "";
		}
		
		$submitButtons = "";
		$content = "";
		foreach ($configurationArray as $spec)
		{
			if (in_array($spec['type'],array("submit-button","reset-button")))
			{
				$thisClass = isset($spec['class'])?"class='{$spec['class']}' ":"class='mm-ui-button blue mm-report-submitter' ";
				$thisStyle = isset($spec['style'])?"style='{$spec['style']}' ":"";
				switch ($spec['type'])
				{
					case 'submit-button':
						$value = isset($spec['value'])?$spec['value']:"";
						$submitButtons.= "<input type='button' {$thisClass}{$thisStyle} value='{$value}'>\n";
						break;
					case 'reset-button':
						$value = isset($spec['value'])?$spec['value']:"";
						$submitButtons.= "<input type='button' {$thisClass}{$thisStyle} value='{$value}' onclick='mmjs.resetForm()'>\n";
						break;
					default:
						break;
				}
			}
			else if ($spec['type'] == "blank_row")
			{
				$content.= "<tr>\n<td colspan='2'>&nbsp;</td>\n</tr>\n";
			}
			else 
			{
				$value = $this->processFormValue($spec);
				$thisClass = isset($spec['class'])?$spec['class']:"";
				$thisId = isset($spec['id'])?"id='{$spec['id']}' ":"";
				$content.="<tr>\n";
				$content.="<td>{$spec['label']}</td>\n";
				$content.="<td>\n";
				$validationString = $this->getValidationString($spec);
				switch ($spec['type'])
				{
					case 'date':
						$content.= MM_Utils::getCalendarIcon();
						$content.=" <input type='text' {$validationString} name='{$spec['name']}' {$thisId} value='{$value}' class='mm-reporting-datepicker {$class}'>\n";
						break;
					case 'dropdown':
						$content.="<select name='{$spec['name']}' {$validationString} {$thisId}>\n";
						if (isset($spec['options']) && is_array($spec['options']))
						{
							$content.= MM_HtmlUtils::generateSelectionsList($spec['options'],$value);
						}
						$content.="</select>\n";
						break;
					case 'checkbox':
						$defaultCheck = (isset($spec['checkedByDefault']) && (filter_var($spec['checkedByDefault'],FILTER_VALIDATE_BOOLEAN)))?'checked="checked" ':"";
						$content.="<input type='checkbox' name='{$spec['name']}' {$validationString} {$thisId} {$defaultCheck}/>\n";
						break;
					default:
						$content.="&nbsp;";
				}
				$content.="</td>\n";
				$content.="</tr>\n";
			}
		}
		$p = new stdClass();
		$p->content = $content;
		$p->id = $id;
		$p->class = $class;
		$p->style = $style;
		$p->buttons = $submitButtons;
		return MM_TEMPLATE::generate($this->formTemplate,$p);
	}
	
	
	protected function processFormValue($spec)
	{
		$value = "";
		if (isset($spec['default']))
		{
			switch ($spec['default'])
			{
				case self::$DEFAULT_DATE_NOW:
					$value = date("m/d/Y",MM_Utils::getCurrentTime('timestamp'));
					break;
				case self::$DEFAULT_DATE_3MONTHS_AGO:
					$value = date("m/d/Y",strtotime("-3 months",MM_Utils::getCurrentTime('timestamp')));
					break;
				default:
					$value = $spec['default'];
					break;
			}
		}
		return $value;
	}
	
	
	protected function getValidationString($spec)
	{
		if (isset($spec['validation']))
		{
			if (empty($spec['validation']))
			{
				return "";
			}
			return $spec['validation'];
		}
		
		//no custom validator supplied, use on of the standard ones
		$validations = array();
		if (isset($spec['required']) && ($spec['required'] == true))
		{
			$validations[] = 'data-required="true"';
		}
		switch ($spec['type'])
		{
			case 'date':
				$validations[] = 'data-parsley-trigger="change" data-type="dateiso"';
				break;
			default: 
				break;
		}
		$validationString = implode(" ",$validations);
		return $validationString;
	}
}

//TODO: the interface below is to circumvent php limitation on abstract static methods... this may be a code smell, investigate later

interface MM_ReportBaseInterface {
	static function generateData($queryIdentifier, $params);
}

